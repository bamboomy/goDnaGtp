b:0,1,1,2,2,3,5,2,5,5,4,0,12,2,7,3,12,0,6,5,1,2,21,6,8,25,16,5,14,19,
d:0,1,1,0,3,5,1,5,2,6,9,11,10,4,4,1,13,16,7,7,19,4,4,23,18,10,4,23,13,1,
o:0,0,0,3,0,2,2,3,7,4,9,9,2,8,1,7,13,10,17,2,15,0,6,14,18,18,16,19,14,9,26,10,15,15,24,14,12,14,18,22,29,16,0,36,3,17,45,0,44,13,46,18,14,39,30,25,41,42,5,25,22,23,44,19,55,14,22,64,10,20,2,70,13,27,24,30,38,50,55,58,15,78,53,81,62,56,25,2,30,19,
arg:5,1,0,3,4,7,6,2,
public class Input {
Thought[][] thoughts = new Thought[9][9];
{
thoughts[0][0] = new Thought69(new Thought56(), new Thought3(), null, null);
thoughts[0][1] = new Thought72(new Thought59(), new Thought63(), null, null);
thoughts[0][2] = new Thought83(new Thought12(), new Thought50(), null, null);
thoughts[0][3] = new Thought59(new Thought66(), new Thought58(), null, null);
thoughts[0][4] = new Thought87(new Thought65(), new Thought21(), null, null);
thoughts[0][5] = new Thought50(new Thought68(), new Thought41(), null, null);
thoughts[0][6] = new Thought16(new Thought82(), new Thought18(), null, null);
thoughts[0][7] = new Thought65(new Thought24(), new Thought89(), null, null);
thoughts[0][8] = new Thought98(new Thought99(), new Thought17(), null, null);
thoughts[1][0] = new Thought47(new Thought38(), new Thought8(), null, null);
thoughts[1][1] = new Thought96(new Thought73(), new Thought42(), null, null);
thoughts[1][2] = new Thought5(new Thought56(), new Thought47(), null, null);
thoughts[1][3] = new Thought50(new Thought62(), new Thought1(), null, null);
thoughts[1][4] = new Thought3(new Thought36(), new Thought85(), null, null);
thoughts[1][5] = new Thought90(new Thought73(), new Thought51(), null, null);
thoughts[1][6] = new Thought36(new Thought19(), new Thought21(), null, null);
thoughts[1][7] = new Thought36(new Thought74(), new Thought76(), null, null);
thoughts[1][8] = new Thought33(new Thought31(), new Thought43(), null, null);
thoughts[2][0] = new Thought16(new Thought81(), new Thought84(), null, null);
thoughts[2][1] = new Thought56(new Thought40(), new Thought23(), null, null);
thoughts[2][2] = new Thought7(new Thought62(), new Thought83(), null, null);
thoughts[2][3] = new Thought70(new Thought67(), new Thought43(), null, null);
thoughts[2][4] = new Thought64(new Thought76(), new Thought15(), null, null);
thoughts[2][5] = new Thought11(new Thought50(), new Thought8(), null, null);
thoughts[2][6] = new Thought14(new Thought30(), new Thought98(), null, null);
thoughts[2][7] = new Thought66(new Thought40(), new Thought44(), null, null);
thoughts[2][8] = new Thought74(new Thought31(), new Thought21(), null, null);
thoughts[3][0] = new Thought41(new Thought23(), new Thought63(), null, null);
thoughts[3][1] = new Thought53(new Thought41(), new Thought64(), null, null);
thoughts[3][2] = new Thought44(new Thought81(), new Thought58(), null, null);
thoughts[3][3] = new Thought14(new Thought52(), new Thought66(), null, null);
thoughts[3][4] = new Thought42(new Thought83(), new Thought95(), null, null);
thoughts[3][5] = new Thought53(new Thought89(), new Thought91(), null, null);
thoughts[3][6] = new Thought67(new Thought52(), new Thought56(), null, null);
thoughts[3][7] = new Thought41(new Thought9(), new Thought12(), null, null);
thoughts[3][8] = new Thought16(new Thought52(), new Thought4(), null, null);
thoughts[4][0] = new Thought73(new Thought31(), new Thought84(), null, null);
thoughts[4][1] = new Thought78(new Thought61(), new Thought36(), null, null);
thoughts[4][2] = new Thought28(new Thought9(), new Thought13(), null, null);
thoughts[4][3] = new Thought82(new Thought15(), new Thought5(), null, null);
thoughts[4][4] = new Thought83(new Thought84(), new Thought92(), null, null);
thoughts[4][5] = new Thought58(new Thought21(), new Thought4(), null, null);
thoughts[4][6] = new Thought30(new Thought30(), new Thought83(), null, null);
thoughts[4][7] = new Thought94(new Thought34(), new Thought80(), null, null);
thoughts[4][8] = new Thought98(new Thought16(), new Thought39(), null, null);
thoughts[5][0] = new Thought14(new Thought39(), new Thought52(), null, null);
thoughts[5][1] = new Thought70(new Thought83(), new Thought92(), null, null);
thoughts[5][2] = new Thought22(new Thought6(), new Thought35(), null, null);
thoughts[5][3] = new Thought59(new Thought31(), new Thought39(), null, null);
thoughts[5][4] = new Thought82(new Thought80(), new Thought73(), null, null);
thoughts[5][5] = new Thought38(new Thought25(), new Thought16(), null, null);
thoughts[5][6] = new Thought20(new Thought30(), new Thought49(), null, null);
thoughts[5][7] = new Thought53(new Thought70(), new Thought94(), null, null);
thoughts[5][8] = new Thought72(new Thought13(), new Thought86(), null, null);
thoughts[6][0] = new Thought18(new Thought28(), new Thought30(), null, null);
thoughts[6][1] = new Thought53(new Thought4(), new Thought36(), null, null);
thoughts[6][2] = new Thought96(new Thought29(), new Thought20(), null, null);
thoughts[6][3] = new Thought83(new Thought72(), new Thought48(), null, null);
thoughts[6][4] = new Thought9(new Thought78(), new Thought6(), null, null);
thoughts[6][5] = new Thought27(new Thought86(), new Thought72(), null, null);
thoughts[6][6] = new Thought73(new Thought81(), new Thought76(), null, null);
thoughts[6][7] = new Thought89(new Thought64(), new Thought72(), null, null);
thoughts[6][8] = new Thought93(new Thought71(), new Thought41(), null, null);
thoughts[7][0] = new Thought71(new Thought38(), new Thought66(), null, null);
thoughts[7][1] = new Thought2(new Thought36(), new Thought11(), null, null);
thoughts[7][2] = new Thought88(new Thought94(), new Thought68(), null, null);
thoughts[7][3] = new Thought59(new Thought83(), new Thought6(), null, null);
thoughts[7][4] = new Thought47(new Thought49(), new Thought41(), null, null);
thoughts[7][5] = new Thought57(new Thought4(), new Thought47(), null, null);
thoughts[7][6] = new Thought42(new Thought14(), new Thought38(), null, null);
thoughts[7][7] = new Thought8(new Thought81(), new Thought6(), null, null);
thoughts[7][8] = new Thought47(new Thought31(), new Thought11(), null, null);
thoughts[8][0] = new Thought4(new Thought95(), new Thought92(), null, null);
thoughts[8][1] = new Thought0(new Thought9(), new Thought8(), null, null);
thoughts[8][2] = new Thought3(new Thought79(), new Thought57(), null, null);
thoughts[8][3] = new Thought51(new Thought59(), new Thought50(), null, null);
thoughts[8][4] = new Thought64(new Thought25(), new Thought86(), null, null);
thoughts[8][5] = new Thought83(new Thought71(), new Thought63(), null, null);
thoughts[8][6] = new Thought21(new Thought50(), new Thought21(), null, null);
thoughts[8][7] = new Thought20(new Thought56(), new Thought96(), null, null);
thoughts[8][8] = new Thought80(new Thought92(), new Thought3(), null, null);
}
public void accept(int x, int y, String color){
try {
thoughts[x][y].accept(color);
} catch (CountDownExc e) { 
// dan niet... 
} catch (StackOverflowExc e) {
Thought.STACK_COUNTER = 100;
}
}
}
<endClass/>
public class Output {
public static double[][] points = new double[9][9];
public static void clear(){
points[0][0] = 0.0;
points[0][1] = 0.0;
points[0][2] = 0.0;
points[0][3] = 0.0;
points[0][4] = 0.0;
points[0][5] = 0.0;
points[0][6] = 0.0;
points[0][7] = 0.0;
points[0][8] = 0.0;
points[1][0] = 0.0;
points[1][1] = 0.0;
points[1][2] = 0.0;
points[1][3] = 0.0;
points[1][4] = 0.0;
points[1][5] = 0.0;
points[1][6] = 0.0;
points[1][7] = 0.0;
points[1][8] = 0.0;
points[2][0] = 0.0;
points[2][1] = 0.0;
points[2][2] = 0.0;
points[2][3] = 0.0;
points[2][4] = 0.0;
points[2][5] = 0.0;
points[2][6] = 0.0;
points[2][7] = 0.0;
points[2][8] = 0.0;
points[3][0] = 0.0;
points[3][1] = 0.0;
points[3][2] = 0.0;
points[3][3] = 0.0;
points[3][4] = 0.0;
points[3][5] = 0.0;
points[3][6] = 0.0;
points[3][7] = 0.0;
points[3][8] = 0.0;
points[4][0] = 0.0;
points[4][1] = 0.0;
points[4][2] = 0.0;
points[4][3] = 0.0;
points[4][4] = 0.0;
points[4][5] = 0.0;
points[4][6] = 0.0;
points[4][7] = 0.0;
points[4][8] = 0.0;
points[5][0] = 0.0;
points[5][1] = 0.0;
points[5][2] = 0.0;
points[5][3] = 0.0;
points[5][4] = 0.0;
points[5][5] = 0.0;
points[5][6] = 0.0;
points[5][7] = 0.0;
points[5][8] = 0.0;
points[6][0] = 0.0;
points[6][1] = 0.0;
points[6][2] = 0.0;
points[6][3] = 0.0;
points[6][4] = 0.0;
points[6][5] = 0.0;
points[6][6] = 0.0;
points[6][7] = 0.0;
points[6][8] = 0.0;
points[7][0] = 0.0;
points[7][1] = 0.0;
points[7][2] = 0.0;
points[7][3] = 0.0;
points[7][4] = 0.0;
points[7][5] = 0.0;
points[7][6] = 0.0;
points[7][7] = 0.0;
points[7][8] = 0.0;
points[8][0] = 0.0;
points[8][1] = 0.0;
points[8][2] = 0.0;
points[8][3] = 0.0;
points[8][4] = 0.0;
points[8][5] = 0.0;
points[8][6] = 0.0;
points[8][7] = 0.0;
points[8][8] = 0.0;
}
}
<endClass/>
class Thought0 extends Thought{
private static ArrayList<Thought0> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 160.9265142943903;
private double fd1 = 672.9633297427855;
private Thought fo0 = null;
private Thought fo1 = null;
Thought0 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought0 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought0 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought0 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought0 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought0 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought0 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought0 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought0 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought0 instance = new Thought0 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought0 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought0 instance = new Thought0 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought0 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought0 instance = new Thought0 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought0 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought0 instance = new Thought0 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought0 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought0 instance = new Thought0 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought0 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought0 instance = new Thought0 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought0 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought0 instance = new Thought0 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought0 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought0 instance = new Thought0 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint0>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    bk = dk > dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    Thought lo0 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    bk = bk || bk;
    Thought lo1 = Thought80.getInstance(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb2 = false;
    if (bk) {
        double ld3 = 626.5649884329681;
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint0>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1>
    ok = ok.m4();
    boolean lb0 = false;
    dk *= -1;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb1 = true;
    Thought lo2 = Thought30.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought59.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = true;
    bk = ok.m2(dk, dk, dk, dk);
    double ld5 = 291.9648087818651;
    Thought lo6 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2>
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld0 = 958.0162969383102;
    dk = dk - dk;
    boolean lb1 = true;
    bk = bk || bk;
    double ld2 = 284.9255580561704;
    if (bk) {
        dk = dk - dk;
        bk = !bk;
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok);
</cutPoint2>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3>
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb0 = true;
    Thought lo1 = Thought2.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint4>
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 183.86165748458356;
    bk = !bk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb1 = true;
    bk = !bk;
    Thought lo2 = Thought54.getInstance(bk, bk, bk, bk);
        dk = dk + dk;
    bk = bk && bk;
    bk = dk > dk;
    boolean lb3 = false;
</cutPoint4>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint5>
    bk = bk || bk;
    bk = bk || bk;
    dk = ok.m3();
    Thought lo0 = Thought23.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    bk = bk && bk;
    dk = dk + dk;
    boolean lb1 = true;
    Thought lo2 = Thought8.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint5>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint6>
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought91.getInstance();
    bk = dk < dk;
    double ld1 = 302.9304073123901;
    double ld2 = 313.5613715506491;
    double ld3 = 101.98826800702882;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought7.getInstance(ok, ok, ok, ok);
    boolean lb5 = false;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 379.9479804507681;
    double ld7 = 810.2990368648735;
    dk = dk + dk;
    boolean lb8 = true;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk);
</cutPoint6>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint7>
    boolean lb0 = false;
    bk = dk > dk;
    Thought lo1 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    Thought lo2 = Thought51.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    boolean lb3 = false;
    boolean lb4 = false;
    double ld5 = 199.73658156844888;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint7>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint8>
    dk = dk + dk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    on += dk;
    boolean lb1 = true;
    ok.m3();
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    dk = dk + dk;
</cutPoint8>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint9>
    bk = !bk;
    dk *= -1;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb0 = true;
    boolean lb1 = false;
    bk = dk > dk;
    dk *= -1;
    double ld2 = 459.1438038957356;
    boolean lb3 = true;
    bk = dk < dk;
    bk = !bk;
    Thought lo4 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    double ld5 = 345.95211809701374;
    boolean lb6 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
</cutPoint9>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint10>
    bk = !bk;
    ok = ok.m4();
    Thought lo0 = Thought15.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    boolean lb1 = false;
    boolean lb2 = false;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
</cutPoint10>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint11>
    double ld0 = 72.64912112309388;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = false;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
    bk = bk || bk;
    boolean lb2 = false;
    boolean lb3 = false;
    dk = dk - dk;
</cutPoint11>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint12>
    dk = dk - dk;
    dk = dk + dk;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
        ok.m2();
    boolean lb1 = false;
</cutPoint12>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint13>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb0 = true;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint13>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint14>
    double ld0 = 691.3023257330059;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = true;
    double ld2 = 995.8797646923078;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    dk = dk + dk;
    dk = dk - dk;
    Thought lo3 = Thought82.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = !bk;
        bk = !bk;
        bk = bk || bk;
        bk = dk > dk;
        ok.m1(dk, dk, dk, dk);
        Thought lo4 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        ok.m1();
</cutPoint14>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint15>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    dk *= -1;
    bk = bk || bk;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
        dk = dk - dk;
</cutPoint15>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint16>
    bk = dk < dk;
    double ld0 = 842.4099266197971;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = false;
    ok = ok.m4();
    bk = bk && bk;
        double ld2 = 688.3994692953639;
    dk = dk + dk;
</cutPoint16>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint17>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo0 = Thought50.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought37.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    Thought lo3 = Thought41.getInstance(ok, ok, ok, ok);
    bk = !bk;
    Thought lo4 = Thought8.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb5 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3();
</cutPoint17>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint18>
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought25.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb1 = true;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3();
    dk *= -1;
</cutPoint18>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint19>
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = true;
    Thought lo2 = Thought35.getInstance(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    boolean lb3 = true;
    dk *= -1;
    boolean lb4 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok.m1(bk, bk, bk, bk);
        bk = !bk;
        double ld5 = 823.3649620998126;
</cutPoint19>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint20>
    if (bk) {
        bk = ok.m2();
        Thought lo0 = Thought59.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk > dk;
        boolean lb1 = true;
        boolean lb2 = true;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk || bk;
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint20>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint21>
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    dk = dk - dk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 527.0814805537194;
    bk = dk < dk;
    Thought lo1 = Thought52.getInstance(ok, ok, ok, ok);
    Thought lo2 = Thought73.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    Thought lo3 = Thought50.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
</cutPoint21>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint22>
    boolean lb0 = true;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        dk = ok.m3(bk, bk, bk, bk);
        dk = dk - dk;
        boolean lb1 = false;
        dk = dk + dk;
        }
    double ld2 = 672.7776707744924;
</cutPoint22>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint23>
    bk = dk > dk;
    dk = dk + dk;
    bk = !bk;
    bk = bk || bk;
        bk = dk > dk;
    dk *= -1;
    boolean lb0 = false;
    dk = ok.m3();
    dk *= -1;
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint23>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint24>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought29.getInstance(dk, dk, dk, dk);
    double ld1 = 768.8703075833464;
    on += dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    bk = dk < dk;
    boolean lb2 = false;
    dk = dk - dk;
    boolean lb3 = false;
    dk = dk + dk;
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk && bk;
</cutPoint24>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint25>
    bk = dk > dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 975.3945685609979;
    Thought lo1 = Thought12.getInstance(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    on += dk;
    dk = dk + dk;
    boolean lb2 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint25>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint26>
    Thought lo0 = Thought29.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    double ld1 = 524.0123378483963;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk < dk;
    bk = dk < dk;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        for(int j=0; j<10; j++){
            boolean lb2 = false;
</cutPoint26>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint27>
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 406.59769811408484;
    on -= dk;
    Thought lo2 = Thought82.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb3 = true;
    dk = ok.m3(bk, bk, bk, bk);
    double ld4 = 519.2784918412232;
    dk *= -1;
    ok = ok.m4();
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    dk = dk + dk;
    boolean lb5 = true;
    dk *= -1;
    bk = dk < dk;
</cutPoint27>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint28>
    ok.m3(ok, ok, ok, ok);
    Thought lo0 = Thought69.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    Thought lo1 = Thought56.getInstance(dk, dk, dk, dk);
    on += dk;
    boolean lb2 = false;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo3 = Thought84.getInstance();
    for(int j=0; j<10; j++){
        dk *= -1;
        Thought lo4 = Thought78.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb5 = false;
        bk = ok.m2(ok, ok, ok, ok);
        boolean lb6 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld7 = 80.5331563100034;
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        bk = bk || bk;
        bk = ok.m2(dk, dk, dk, dk);
        dk *= -1;
</cutPoint28>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint29>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
    if (bk) {
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        on -= dk;
        if (bk) {
            dk = dk - dk;
            for(int j=0; j<10; j++){
                ok.m1(ok, ok, ok, ok);
                dk = dk - dk;
                bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
                dk *= -1;
                Thought lo0 = Thought99.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
                dk = dk - dk;
                ok.m3(dk, dk, dk, dk);
                bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
                boolean lb1 = true;
                dk = dk + dk;
                dk = dk - dk;
                bk = bk && bk;
                bk = !bk;
</cutPoint29>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint30>
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 156.4289055109071;
    bk = dk > dk;
    dk = dk - dk;
    bk = dk < dk;
    bk = ok.m2();
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    on -= dk;
    boolean lb2 = true;
    Thought lo3 = Thought98.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint30>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint31>
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    on += dk;
    bk = dk > dk;
    dk *= -1;
    boolean lb1 = true;
    Thought lo2 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb3 = false;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 988.8060382075689;
</cutPoint31>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint32>
    bk = dk < dk;
    bk = !bk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    dk = dk - dk;
    double ld2 = 696.1405691844714;
    bk = dk > dk;
</cutPoint32>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint33>
    dk = dk - dk;
    Thought lo0 = Thought72.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld1 = 580.9810970754387;
    dk = dk - dk;
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
    ok.m3();
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint33>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint34>
    double ld0 = 692.8040119261432;
        boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb2 = true;
    dk *= -1;
    boolean lb3 = true;
    double ld4 = 725.4246513684275;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint34>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought1 extends Thought{
private static ArrayList<Thought1> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 380.6059111293333;
private double fd1 = 160.4496150838834;
private Thought fo0 = null;
private Thought fo1 = null;
Thought1 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought1 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought1 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought1 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought1 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought1 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought1 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought1 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought1 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought1 instance = new Thought1 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought1 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought1 instance = new Thought1 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought1 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought1 instance = new Thought1 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought1 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought1 instance = new Thought1 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought1 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought1 instance = new Thought1 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought1 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought1 instance = new Thought1 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought1 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought1 instance = new Thought1 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought1 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought1 instance = new Thought1 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint35>
    bk = bk || bk;
    bk = bk && bk;
    dk = dk - dk;
    Thought lo0 = Thought39.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = ok.m2(bk, bk, bk, bk);
        ok.m1();
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok);
        dk *= -1;
        bk = bk && bk;
</cutPoint35>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint36>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    ok.m3();
    on -= dk;
    dk = dk - dk;
    dk *= -1;
</cutPoint36>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint37>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    bk = bk || bk;
    dk = dk - dk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    Thought lo1 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb2 = false;
        dk = dk + dk;
        double ld3 = 895.7933228636003;
</cutPoint37>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint38>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = true;
    bk = dk > dk;
    boolean lb2 = true;
    boolean lb3 = true;
    on -= dk;
    boolean lb4 = false;
    boolean lb5 = true;
    on += dk;
    bk = bk || bk;
    double ld6 = 539.3291515924423;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb7 = true;
    Thought lo8 = Thought65.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb9 = true;
    bk = bk && bk;
    dk = dk + dk;
    boolean lb10 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint38>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint39>
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
        double ld0 = 179.81924640054277;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb1 = false;
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought21.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 605.8074732519577;
    dk *= -1;
    double ld4 = 445.03809711354415;
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    dk *= -1;
    Thought lo5 = Thought95.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint39>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint40>
    dk *= -1;
    boolean lb0 = false;
    boolean lb1 = true;
    double ld2 = 878.3003800268382;
    dk = ok.m3(ok, ok, ok, ok);
        for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo3 = Thought7.getInstance(dk, dk, dk, dk);
        double ld4 = 864.2585076457299;
        dk *= -1;
        double ld5 = 160.07233311482761;
        dk = dk - dk;
</cutPoint40>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint41>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld0 = 232.1969567721907;
    bk = !bk;
    bk = dk > dk;
    Thought lo1 = Thought71.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint41>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint42>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought79.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought6.getInstance();
    bk = dk < dk;
    bk = dk < dk;
    dk *= -1;
    dk *= -1;
    bk = dk > dk;
    bk = bk || bk;
    bk = dk > dk;
    on -= dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok);
</cutPoint42>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint43>
    boolean lb0 = false;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    boolean lb2 = true;
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        bk = !bk;
    dk *= -1;
    double ld3 = 639.4550324819679;
    dk = dk + dk;
</cutPoint43>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint44>
    ok = ok.m4();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    double ld0 = 334.0271512283708;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld1 = 252.6899491541989;
    double ld2 = 591.2988231335604;
        dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld3 = 413.96462829153626;
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint44>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint45>
    ok = ok.m4();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    double ld0 = 542.0178141628163;
    bk = !bk;
    if (bk) {
        dk = dk + dk;
        boolean lb1 = true;
        } else if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(dk, dk, dk, dk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb2 = false;
        bk = bk || bk;
        ok.m3();
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint45>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint46>
    double ld0 = 314.02249377502324;
        boolean lb1 = false;
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo2 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought19.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 765.125137013084;
    ok.m1(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4();
    bk = bk || bk;
</cutPoint46>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint47>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 907.0165267329261;
    bk = bk || bk;
    Thought lo1 = Thought74.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo2 = Thought42.getInstance(dk, dk, dk, dk);
    boolean lb3 = false;
    dk *= -1;
    Thought lo4 = Thought31.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
        dk *= -1;
    Thought lo5 = Thought18.getInstance(bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo6 = Thought22.getInstance();
    bk = dk < dk;
    Thought lo7 = Thought68.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb8 = true;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint47>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint48>
    Thought lo0 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought66.getInstance(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        Thought lo2 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        Thought lo3 = Thought97.getInstance(bk, bk, bk, bk);
        dk = ok.m3();
        dk *= -1;
        dk = dk - dk;
        }
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
    Thought lo4 = Thought9.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
</cutPoint48>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint49>
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    boolean lb0 = true;
    dk *= -1;
    dk = dk - dk;
    bk = dk > dk;
    on += dk;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    boolean lb1 = false;
    dk = dk + dk;
    dk = dk - dk;
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    boolean lb2 = false;
    bk = bk && bk;
    boolean lb3 = false;
    on += dk;
    bk = dk > dk;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
</cutPoint49>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint50>
    ok.m2(ok, ok, ok, ok);
    dk *= -1;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    bk = dk > dk;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    boolean lb0 = true;
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk = ok.m3(bk, bk, bk, bk);
        ok = ok.m4();
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought70.getInstance(ok, ok, ok, ok);
        }
    dk = dk - dk;
    bk = bk && bk;
</cutPoint50>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint51>
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 334.7273721366086;
    bk = bk || bk;
    bk = dk < dk;
    on += dk;
    dk = dk + dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb2 = false;
</cutPoint51>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint52>
    boolean lb0 = true;
    boolean lb1 = false;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    Thought lo3 = Thought27.getInstance();
    bk = bk && bk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    double ld4 = 644.1381343428118;
    boolean lb5 = false;
    for(int j=0; j<10; j++){
        double ld6 = 653.3389783373966;
</cutPoint52>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint53>
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
    double ld0 = 788.1873211531823;
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint53>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint54>
    bk = !bk;
    ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    double ld0 = 840.0652792877892;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb1 = true;
    ok.m2();
    dk *= -1;
</cutPoint54>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint55>
    dk *= -1;
    boolean lb0 = true;
    Thought lo1 = Thought22.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = false;
    bk = dk < dk;
    dk = dk - dk;
    bk = bk || bk;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 804.3012030350985;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    if (bk) {
        dk = dk + dk;
        bk = dk < dk;
        bk = !bk;
        for(int j=0; j<10; j++){
            dk *= -1;
            boolean lb4 = true;
            dk = dk + dk;
            on -= dk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = !bk;
            ok.m1(bk, bk, bk, bk);
            ok.m2();
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk > dk;
</cutPoint55>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint56>
    boolean lb0 = false;
    dk *= -1;
    boolean lb1 = false;
    bk = bk && bk;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    dk = dk - dk;
    dk *= -1;
    double ld3 = 985.1379344548415;
</cutPoint56>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint57>
    if (bk) {
        dk = dk - dk;
        if (bk) {
            dk = dk - dk;
            bk = dk < dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
            ok = ok.m4(dk, dk, dk, dk);
            bk = !bk;
            Thought lo0 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            dk *= -1;
            bk = !bk;
            ok = ok.m4(bk, bk, bk, bk);
            dk = ok.m3();
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint57>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint58>
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    Thought lo2 = Thought19.getInstance(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
    bk = bk || bk;
</cutPoint58>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint59>
    bk = !bk;
    boolean lb0 = false;
    dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    dk = dk + dk;
    dk = dk + dk;
    Thought lo1 = Thought16.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = true;
    double ld3 = 736.5357072430247;
    bk = dk < dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    boolean lb4 = false;
    dk = dk - dk;
    bk = dk < dk;
    double ld5 = 901.2046221465622;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb6 = true;
</cutPoint59>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint60>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk < dk;
    boolean lb1 = false;
    if (bk) {
        bk = ok.m2();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        } else {
</cutPoint60>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint61>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb0 = false;
    double ld1 = 44.74252224663425;
    bk = bk && bk;
    on -= dk;
    dk *= -1;
    for(int j=0; j<10; j++){
        dk *= -1;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        if (bk) {
            ok = ok.m4(bk, bk, bk, bk);
            ok = ok.m4();
            ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok);
            bk = !bk;
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            double ld2 = 427.16841686176303;
            for(int j=0; j<10; j++){
                bk = dk > dk;
                bk = ok.m2(dk, dk, dk, dk);
                bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
                dk = dk + dk;
                Thought lo3 = Thought99.getInstance(bk, bk, bk, bk);
                ok = ok.m4();
</cutPoint61>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint62>
    dk *= -1;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    bk = !bk;
    bk = bk || bk;
    Thought lo0 = Thought63.getInstance(bk, bk, bk, bk);
    bk = !bk;
    ok.m3();
    boolean lb1 = false;
    on += dk;
    on -= dk;
        Thought lo2 = Thought82.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint62>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint63>
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought91.getInstance(dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint63>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint64>
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    Thought lo0 = Thought25.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo1 = Thought95.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint64>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint65>
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
        ok = ok.m4();
    dk = dk + dk;
    bk = dk > dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = true;
    dk = dk + dk;
    boolean lb1 = true;
    bk = dk < dk;
    double ld2 = 449.51489409122445;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb3 = true;
        dk *= -1;
        dk = dk + dk;
        bk = dk > dk;
        for(int j=0; j<10; j++){
            dk *= -1;
            bk = ok.m2(dk, dk, dk, dk);
            dk *= -1;
</cutPoint65>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint66>
    bk = dk > dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought14.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    Thought lo2 = Thought33.getInstance();
    Thought lo3 = Thought39.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld4 = 886.2965040059282;
    ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = true;
    bk = bk && bk;
    bk = !bk;
    Thought lo6 = Thought12.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
</cutPoint66>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint67>
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    bk = bk || bk;
    ok.m2(bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
        ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    on += dk;
    bk = dk > dk;
    dk *= -1;
        bk = dk > dk;
    Thought lo1 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint67>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint68>
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb0 = false;
    boolean lb1 = true;
    bk = bk || bk;
        dk *= -1;
    Thought lo2 = Thought4.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m3();
</cutPoint68>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint69>
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = bk && bk;
    double ld1 = 551.4655777134908;
    bk = dk > dk;
    boolean lb2 = false;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    dk *= -1;
    dk *= -1;
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb4 = true;
    dk = dk - dk;
    dk = dk - dk;
</cutPoint69>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought2 extends Thought{
private static ArrayList<Thought2> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 482.0287491807105;
private double fd1 = 162.28839357495843;
private Thought fo0 = null;
private Thought fo1 = null;
Thought2 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought2 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought2 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought2 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought2 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought2 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought2 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought2 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought2 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought2 instance = new Thought2 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought2 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought2 instance = new Thought2 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought2 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought2 instance = new Thought2 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought2 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought2 instance = new Thought2 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought2 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought2 instance = new Thought2 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought2 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought2 instance = new Thought2 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought2 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought2 instance = new Thought2 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought2 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought2 instance = new Thought2 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint70>
    bk = bk && bk;
    dk *= -1;
    bk = bk || bk;
    dk = dk - dk;
        dk = ok.m3(bk, bk, bk, bk);
    ok.m1();
    boolean lb0 = true;
    double ld1 = 435.99888585737426;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    boolean lb2 = false;
        boolean lb3 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 801.5156849068376;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = true;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb6 = true;
</cutPoint70>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint71>
    ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought16.getInstance();
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo1 = Thought19.getInstance(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    double ld4 = 495.01613575878935;
    bk = bk && bk;
    dk = dk - dk;
</cutPoint71>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint72>
    bk = dk < dk;
    on -= dk;
    bk = dk > dk;
    boolean lb0 = false;
    boolean lb1 = false;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    bk = dk > dk;
    dk *= -1;
    on -= dk;
    bk = dk < dk;
    double ld2 = 631.7494364746079;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint72>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint73>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    boolean lb0 = true;
    Thought lo1 = Thought80.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = false;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb3 = false;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    bk = dk > dk;
</cutPoint73>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint74>
    boolean lb0 = true;
    Thought lo1 = Thought27.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    double ld2 = 617.1987756656667;
    for(int j=0; j<10; j++){
        double ld3 = 312.92349291609247;
        }
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    on -= dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb4 = false;
    bk = dk < dk;
    boolean lb5 = true;
</cutPoint74>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint75>
    bk = bk && bk;
    ok = ok.m4();
    on -= dk;
    boolean lb0 = false;
    boolean lb1 = true;
    bk = !bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought58.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 740.5625067185435;
    dk = dk + dk;
    bk = dk < dk;
    double ld4 = 457.0560999045706;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint75>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint76>
    double ld0 = 352.68265148655826;
    bk = dk < dk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    double ld1 = 477.1367009458011;
    boolean lb2 = true;
    Thought lo3 = Thought92.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3();
    double ld4 = 947.095542541121;
    boolean lb5 = true;
    Thought lo6 = Thought56.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb7 = false;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint76>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint77>
    bk = bk || bk;
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    double ld0 = 474.22326773988044;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    for(int j=0; j<10; j++){
        for(int j=0; j<10; j++){
            dk *= -1;
            ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            dk *= -1;
            double ld1 = 495.02490485986135;
            boolean lb2 = false;
            bk = ok.m2(dk, dk, dk, dk);
            dk = dk - dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            dk = ok.m3(bk, bk, bk, bk);
            ok.m2();
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint77>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint78>
    double ld0 = 229.73770741030376;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk < dk;
    double ld1 = 516.6021390801518;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    boolean lb2 = false;
    bk = dk > dk;
</cutPoint78>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint79>
    bk = bk || bk;
    ok = ok.m4();
    bk = dk < dk;
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
    Thought lo1 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
</cutPoint79>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint80>
    double ld0 = 644.0481312810347;
    ok = ok.m4();
    boolean lb1 = false;
    bk = bk && bk;
    bk = dk < dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 612.1755337586244;
    dk *= -1;
    dk *= -1;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk > dk;
    double ld3 = 562.9995239154867;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk - dk;
    boolean lb4 = true;
    dk = dk + dk;
    bk = !bk;
    Thought lo5 = Thought78.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb6 = false;
    bk = bk || bk;
    on += dk;
    boolean lb7 = false;
</cutPoint80>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint81>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    Thought lo0 = Thought51.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    double ld1 = 372.9665189242264;
    bk = bk && bk;
    bk = bk && bk;
    on -= dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
</cutPoint81>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint82>
    dk = dk - dk;
    bk = !bk;
    on -= dk;
    Thought lo0 = Thought85.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 857.2310996093106;
    on -= dk;
    dk *= -1;
    boolean lb2 = false;
    boolean lb3 = true;
    dk *= -1;
    bk = dk > dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    on += dk;
    double ld4 = 167.17092172424574;
        boolean lb5 = false;
    bk = dk > dk;
</cutPoint82>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint83>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo0 = Thought99.getInstance();
    bk = bk && bk;
    dk *= -1;
    dk *= -1;
    bk = dk > dk;
    bk = dk > dk;
</cutPoint83>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint84>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought10.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
        Thought lo1 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo2 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    dk = dk + dk;
    Thought lo4 = Thought76.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    double ld5 = 528.8226897484602;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        on += dk;
        boolean lb6 = true;
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok);
        double ld7 = 962.5498276830225;
        bk = bk || bk;
        dk = dk - dk;
        dk = dk + dk;
        bk = !bk;
</cutPoint84>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint85>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok.m2(dk, dk, dk, dk);
    on -= dk;
    double ld0 = 404.090025858437;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought82.getInstance(bk, bk, bk, bk);
    boolean lb2 = true;
    bk = dk < dk;
    ok = ok.m4();
    double ld3 = 938.5921701233254;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk - dk;
    double ld4 = 697.6725418551408;
</cutPoint85>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint86>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = dk + dk;
        bk = bk || bk;
        dk *= -1;
        boolean lb0 = true;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(dk, dk, dk, dk);
        boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        dk = ok.m3();
        dk = dk + dk;
        bk = bk || bk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        boolean lb2 = false;
        ok.m2(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld3 = 169.59952141189666;
        bk = bk || bk;
</cutPoint86>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint87>
    ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    boolean lb0 = false;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    Thought lo1 = Thought58.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    on -= dk;
    Thought lo3 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = false;
    boolean lb5 = true;
    bk = !bk;
    bk = dk < dk;
</cutPoint87>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint88>
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        bk = bk || bk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo1 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        Thought lo2 = Thought74.getInstance(dk, dk, dk, dk);
        Thought lo3 = Thought25.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        }
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    double ld4 = 134.00614176895598;
        bk = dk > dk;
</cutPoint88>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint89>
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    boolean lb0 = false;
    bk = bk && bk;
    ok.m2();
    Thought lo1 = Thought85.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    double ld2 = 289.04563683956223;
    bk = bk && bk;
    Thought lo3 = Thought25.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb4 = true;
    bk = ok.m2();
    dk = dk - dk;
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    bk = !bk;
</cutPoint89>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint90>
    double ld0 = 390.58036169996916;
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    bk = dk > dk;
    on += dk;
    bk = dk < dk;
    double ld1 = 691.6214475598179;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    double ld2 = 644.5154224380764;
    boolean lb3 = false;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb4 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = false;
    bk = dk < dk;
    dk = dk - dk;
    bk = bk || bk;
</cutPoint90>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint91>
    dk *= -1;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = true;
    Thought lo2 = Thought79.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 520.7701422291674;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld4 = 304.45653949118474;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = !bk;
    Thought lo5 = Thought57.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    double ld6 = 195.06075022951265;
    double ld7 = 575.0419329488723;
    dk *= -1;
    dk = dk - dk;
    bk = !bk;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    bk = !bk;
</cutPoint91>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint92>
    dk = dk + dk;
    ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought82.getInstance(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought39.getInstance();
    dk = dk + dk;
    double ld2 = 329.23670374484317;
    dk *= -1;
    bk = dk < dk;
    boolean lb3 = false;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        on -= dk;
        bk = dk < dk;
        dk *= -1;
        dk *= -1;
        boolean lb4 = true;
        bk = !bk;
</cutPoint92>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint93>
    boolean lb0 = true;
    bk = !bk;
    bk = bk && bk;
        Thought lo1 = Thought5.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk *= -1;
    boolean lb2 = true;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo3 = Thought56.getInstance(dk, dk, dk, dk);
    double ld4 = 420.1611267509771;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo5 = Thought32.getInstance();
    Thought lo6 = Thought23.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb7 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    on -= dk;
</cutPoint93>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint94>
    bk = dk < dk;
    boolean lb0 = true;
    dk = dk - dk;
    bk = dk < dk;
    on += dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 363.02215782998053;
    bk = !bk;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    boolean lb3 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo4 = Thought88.getInstance();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint94>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint95>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
        on += dk;
    dk = dk + dk;
    bk = !bk;
    boolean lb0 = false;
    bk = bk && bk;
    boolean lb1 = false;
    on += dk;
    boolean lb2 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
        boolean lb3 = true;
</cutPoint95>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint96>
    bk = !bk;
    bk = dk < dk;
    dk = ok.m3();
    Thought lo0 = Thought15.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    on += dk;
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk);
    double ld4 = 869.3857771568578;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok.m1(bk, bk, bk, bk);
    boolean lb5 = true;
    dk = dk + dk;
    Thought lo6 = Thought18.getInstance();
    dk = dk - dk;
</cutPoint96>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint97>
    Thought lo0 = Thought50.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought93.getInstance(ok, ok, ok, ok);
    boolean lb2 = false;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    boolean lb3 = true;
    </cutPoint97>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint98>
        dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought50.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    Thought lo1 = Thought12.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    double ld2 = 188.06246504331557;
    on -= dk;
    boolean lb3 = true;
    on += dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        bk = bk || bk;
        bk = bk || bk;
        on += dk;
        Thought lo4 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(dk, dk, dk, dk);
        on -= dk;
        double ld5 = 277.7100859344169;
        for(int j=0; j<10; j++){
            dk = dk + dk;
            if (bk) {
                on += dk;
                dk *= -1;
</cutPoint98>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint99>
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4();
        dk *= -1;
        dk = dk + dk;
        Thought lo0 = Thought24.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        bk = ok.m2(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        ok = ok.m4();
        boolean lb1 = false;
        double ld2 = 591.1497408977839;
        double ld3 = 95.2536008033729;
</cutPoint99>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint100>
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    on += dk;
    double ld1 = 269.8951452201406;
    bk = dk > dk;
    bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
        dk *= -1;
    bk = bk || bk;
</cutPoint100>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint101>
        on += dk;
    bk = dk < dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4();
    dk = dk - dk;
    double ld0 = 549.8402913121944;
    bk = bk || bk;
    Thought lo1 = Thought80.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk + dk;
</cutPoint101>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint102>
    double ld0 = 836.5969196923267;
    on -= dk;
    on += dk;
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought32.getInstance(dk, dk, dk, dk);
        bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint102>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint103>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    Thought lo0 = Thought63.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = dk < dk;
    double ld1 = 285.7027797509321;
    boolean lb2 = false;
    dk *= -1;
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld3 = 743.5700974019854;
</cutPoint103>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint104>
    double ld0 = 202.6360598188638;
    Thought lo1 = Thought38.getInstance(bk, bk, bk, bk);
    Thought lo2 = Thought60.getInstance();
    bk = bk || bk;
    dk *= -1;
    boolean lb3 = false;
    bk = bk && bk;
    bk = !bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
        boolean lb4 = false;
    on -= dk;
    bk = bk && bk;
    dk = dk - dk;
    Thought lo5 = Thought34.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 967.3441968491437;
    Thought lo7 = Thought57.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb8 = false;
    Thought lo9 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb10 = false;
</cutPoint104>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought3 extends Thought{
private static ArrayList<Thought3> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 436.12680974000995;
private double fd1 = 367.5713754212194;
private Thought fo0 = null;
private Thought fo1 = null;
Thought3 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought3 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought3 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought3 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought3 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought3 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought3 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought3 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought3 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought3 instance = new Thought3 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought3 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought3 instance = new Thought3 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought3 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought3 instance = new Thought3 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought3 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought3 instance = new Thought3 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought3 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought3 instance = new Thought3 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought3 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought3 instance = new Thought3 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought3 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought3 instance = new Thought3 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought3 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought3 instance = new Thought3 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint105>
    Thought lo0 = Thought96.getInstance(bk, bk, bk, bk);
    ok.m1();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    bk = bk && bk;
    dk = dk - dk;
    boolean lb1 = false;
    double ld2 = 936.7850246697914;
    double ld3 = 803.6567100199894;
    boolean lb4 = true;
    bk = !bk;
    double ld5 = 658.3400014687011;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo6 = Thought6.getInstance(bk, bk, bk, bk);
    ok.m3();
    bk = dk < dk;
    bk = dk < dk;
    bk = !bk;
    bk = bk || bk;
    if (bk) {
        Thought lo7 = Thought3.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
</cutPoint105>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint106>
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 123.41501948213285;
    dk = dk + dk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought21.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo2 = Thought74.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
    double ld3 = 778.3651190766502;
</cutPoint106>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint107>
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    bk = dk < dk;
    on += dk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    boolean lb0 = true;
    ok.m1(ok, ok, ok, ok);
    Thought lo1 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
</cutPoint107>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint108>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 922.9863432129584;
    bk = bk || bk;
    bk = bk || bk;
    bk = ok.m2();
    dk = dk - dk;
    Thought lo1 = Thought63.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 930.0621524068221;
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought24.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        ok.m1(dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = true;
        dk = dk + dk;
</cutPoint108>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint109>
    Thought lo0 = Thought83.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    dk = dk + dk;
    bk = bk || bk;
    boolean lb1 = false;
    boolean lb2 = false;
    bk = ok.m2();
    double ld3 = 411.4391785889033;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    boolean lb4 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    bk = bk || bk;
    Thought lo5 = Thought44.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint109>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint110>
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo0 = Thought57.getInstance();
    dk = dk + dk;
    on += dk;
    on += dk;
    dk = dk + dk;
    Thought lo1 = Thought86.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo2 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    bk = bk || bk;
    Thought lo3 = Thought84.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo4 = Thought53.getInstance();
    double ld5 = 451.4768179281501;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo6 = Thought94.getInstance(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld7 = 225.04429419486988;
    bk = bk && bk;
    dk *= -1;
    dk = dk - dk;
    if (bk) {
</cutPoint110>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint111>
    on -= dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
        for(int j=0; j<10; j++){
        bk = bk && bk;
        }
    boolean lb0 = false;
        bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    Thought lo1 = Thought13.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk > dk;
        ok.m2(ok, ok, ok, ok);
        on += dk;
        bk = dk > dk;
        Thought lo2 = Thought59.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint111>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint112>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    dk = dk + dk;
    double ld0 = 650.1597354789225;
    ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought23.getInstance(bk, bk, bk, bk);
    double ld2 = 398.2617752816263;
    on -= dk;
    double ld3 = 786.5488392916741;
    dk = ok.m3();
    Thought lo4 = Thought59.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo5 = Thought8.getInstance(dk, dk, dk, dk);
</cutPoint112>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint113>
    on += dk;
    dk = dk + dk;
    bk = !bk;
    boolean lb0 = false;
    bk = !bk;
    dk *= -1;
    dk *= -1;
    Thought lo1 = Thought4.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo2 = Thought58.getInstance();
    bk = dk < dk;
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    double ld3 = 342.181045645014;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought72.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    boolean lb5 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint113>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint114>
    bk = !bk;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = !bk;
        ok = ok.m4(bk, bk, bk, bk);
        ok.m3();
        bk = bk || bk;
</cutPoint114>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint115>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    dk = dk + dk;
    double ld1 = 203.04547436835583;
    bk = bk || bk;
    on += dk;
    boolean lb2 = true;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    dk *= -1;
        bk = bk || bk;
    double ld4 = 70.6339537379979;
    boolean lb5 = true;
    double ld6 = 904.3814333163767;
    double ld7 = 393.55296696776975;
    bk = !bk;
    dk *= -1;
</cutPoint115>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint116>
    on -= dk;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = false;
    boolean lb2 = true;
    on += dk;
    bk = bk || bk;
    Thought lo3 = Thought42.getInstance();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought66.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought94.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    double ld6 = 482.05109125521324;
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    bk = !bk;
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
    Thought lo7 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk > dk;
</cutPoint116>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint117>
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    dk = dk + dk;
    bk = !bk;
    bk = bk || bk;
    boolean lb1 = false;
    Thought lo2 = Thought68.getInstance();
    dk *= -1;
    bk = bk || bk;
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought57.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
</cutPoint117>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint118>
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    boolean lb1 = true;
    dk = dk - dk;
    boolean lb2 = true;
    bk = ok.m2();
    dk = dk + dk;
    double ld3 = 96.97237297697959;
    Thought lo4 = Thought5.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    double ld5 = 721.0860622338934;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint118>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint119>
    boolean lb0 = true;
    on += dk;
    on -= dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    double ld1 = 800.9843069293981;
    bk = bk && bk;
    boolean lb2 = false;
    double ld3 = 693.9004572569538;
    bk = !bk;
    Thought lo4 = Thought99.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
        double ld5 = 361.1631747178424;
    dk *= -1;
    ok.m1();
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo6 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint119>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint120>
    boolean lb0 = false;
    boolean lb1 = false;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    on -= dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb2 = false;
    bk = !bk;
    Thought lo3 = Thought69.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
</cutPoint120>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint121>
    Thought lo0 = Thought4.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    bk = bk && bk;
    Thought lo1 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok.m2(bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    dk = dk - dk;
    Thought lo2 = Thought2.getInstance();
    bk = dk < dk;
    dk = dk + dk;
    boolean lb3 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint121>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint122>
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb1 = true;
    if (bk) {
        ok = ok.m4();
        dk = dk + dk;
        bk = dk < dk;
        dk = dk + dk;
        boolean lb2 = false;
</cutPoint122>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint123>
    dk = dk - dk;
    bk = dk > dk;
    boolean lb0 = true;
    boolean lb1 = false;
    bk = bk || bk;
    bk = dk < dk;
    bk = !bk;
    on += dk;
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought37.getInstance(ok, ok, ok, ok);
    double ld3 = 453.5152543185947;
    dk *= -1;
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought92.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = false;
    dk = dk + dk;
    Thought lo6 = Thought90.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
</cutPoint123>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint124>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 839.293684196638;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 900.1280073747364;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 263.84972084709364;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = false;
    Thought lo4 = Thought58.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    Thought lo5 = Thought3.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint124>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint125>
    dk *= -1;
    ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 487.8747913637488;
    bk = bk || bk;
    dk = dk + dk;
</cutPoint125>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint126>
    bk = dk < dk;
    on += dk;
    on += dk;
    boolean lb0 = false;
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    bk = bk && bk;
    double ld1 = 112.9724879328382;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb2 = false;
    double ld3 = 954.5706832684459;
    boolean lb4 = true;
</cutPoint126>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint127>
    boolean lb0 = false;
    dk = dk - dk;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = true;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought66.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint127>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint128>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        boolean lb0 = false;
        dk *= -1;
        bk = !bk;
        dk = ok.m3(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = false;
        bk = bk && bk;
        boolean lb2 = false;
        double ld3 = 805.5523007284779;
        bk = ok.m2(bk, bk, bk, bk);
        on -= dk;
        dk = dk - dk;
        ok.m1();
        dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        Thought lo4 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        on -= dk;
        boolean lb5 = false;
</cutPoint128>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint129>
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought47.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    dk *= -1;
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld2 = 690.6661055967608;
</cutPoint129>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint130>
    Thought lo0 = Thought55.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    boolean lb1 = false;
    bk = bk && bk;
    boolean lb2 = true;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    bk = dk > dk;
</cutPoint130>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint131>
    boolean lb0 = false;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2();
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    on += dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
        boolean lb3 = false;
    bk = dk > dk;
    dk = dk - dk;
    dk *= -1;
    bk = dk > dk;
    dk *= -1;
    dk = dk - dk;
    boolean lb4 = true;
    for(int j=0; j<10; j++){
</cutPoint131>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint132>
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    bk = !bk;
    bk = bk || bk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
</cutPoint132>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint133>
    dk *= -1;
    Thought lo0 = Thought0.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk + dk;
    on -= dk;
    boolean lb2 = true;
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint133>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint134>
    Thought lo0 = Thought24.getInstance();
    on -= dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    on += dk;
    double ld1 = 20.968786319409666;
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    Thought lo2 = Thought74.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    boolean lb3 = false;
    Thought lo4 = Thought21.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint134>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint135>
    ok = ok.m4(dk, dk, dk, dk);
    double ld0 = 991.8268025022529;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    dk = dk + dk;
</cutPoint135>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint136>
    bk = bk || bk;
    Thought lo0 = Thought65.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    boolean lb1 = false;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        double ld2 = 245.38935604259007;
        bk = dk > dk;
        boolean lb3 = true;
        boolean lb4 = true;
        ok = ok.m4();
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk || bk;
        double ld5 = 284.2049144536529;
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo6 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint136>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint137>
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    bk = dk < dk;
    bk = bk || bk;
    boolean lb0 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    bk = bk && bk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 872.5079306983614;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = true;
</cutPoint137>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint138>
    Thought lo0 = Thought49.getInstance();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 104.19494717748871;
        ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld2 = 908.675501180106;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint138>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint139>
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 130.23411296060885;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo3 = Thought71.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint139>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought4 extends Thought{
private static ArrayList<Thought4> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 641.0786204432219;
private double fd1 = 404.4639692712453;
private Thought fo0 = null;
private Thought fo1 = null;
Thought4 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought4 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought4 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought4 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought4 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought4 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought4 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought4 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought4 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought4 instance = new Thought4 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought4 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought4 instance = new Thought4 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought4 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought4 instance = new Thought4 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought4 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought4 instance = new Thought4 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought4 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought4 instance = new Thought4 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought4 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought4 instance = new Thought4 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought4 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought4 instance = new Thought4 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought4 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought4 instance = new Thought4 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint140>
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    bk = dk < dk;
    bk = !bk;
    dk = dk - dk;
    boolean lb1 = false;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo3 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    bk = ok.m2();
</cutPoint140>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint141>
    boolean lb0 = false;
    boolean lb1 = true;
    double ld2 = 638.7702488759669;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        double ld3 = 412.6273432848575;
        bk = bk || bk;
        bk = !bk;
        on -= dk;
        bk = dk < dk;
        boolean lb4 = false;
        bk = bk || bk;
        double ld5 = 821.283278011699;
        dk = ok.m3(ok, ok, ok, ok);
        if (bk) {
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk > dk;
            dk = dk + dk;
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint141>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint142>
    bk = !bk;
    double ld0 = 25.075550239524578;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    dk = dk - dk;
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    bk = dk < dk;
    double ld1 = 266.19193806239383;
    bk = bk && bk;
    bk = dk > dk;
    on += dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok.m3(bk, bk, bk, bk);
    bk = !bk;
</cutPoint142>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint143>
    dk = dk - dk;
    bk = dk > dk;
    dk = dk - dk;
    double ld0 = 502.69208884747536;
    dk = dk + dk;
    Thought lo1 = Thought97.getInstance();
    boolean lb2 = false;
    boolean lb3 = true;
    Thought lo4 = Thought47.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = dk - dk;
        bk = bk || bk;
        double ld5 = 402.78554643207;
        bk = bk || bk;
        bk = ok.m2(dk, dk, dk, dk);
</cutPoint143>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint144>
    double ld0 = 876.8616361088415;
    on -= dk;
    bk = dk < dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo1 = Thought54.getInstance();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 792.1400651707721;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        double ld3 = 24.872056307356587;
        bk = bk || bk;
        boolean lb4 = true;
        dk *= -1;
</cutPoint144>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint145>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    Thought lo0 = Thought53.getInstance();
    if (bk) {
        dk = dk + dk;
        bk = !bk;
        bk = dk < dk;
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = !bk;
        bk = dk < dk;
        dk = dk - dk;
</cutPoint145>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint146>
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 43.54623116384656;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    double ld3 = 200.56228495506886;
    bk = ok.m2(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = !bk;
        double ld4 = 342.7735116401057;
</cutPoint146>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint147>
    bk = dk < dk;
    dk *= -1;
    dk *= -1;
    bk = bk || bk;
    bk = bk && bk;
    on -= dk;
    dk = dk + dk;
    Thought lo0 = Thought39.getInstance();
    boolean lb1 = true;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb2 = false;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint147>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint148>
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 913.6008688082136;
    bk = bk || bk;
    bk = dk > dk;
    dk *= -1;
    dk = dk - dk;
    dk *= -1;
    Thought lo1 = Thought1.getInstance();
    dk = dk - dk;
    on += dk;
    dk = dk - dk;
    Thought lo2 = Thought26.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint148>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint149>
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    double ld0 = 923.2316221164085;
    boolean lb1 = true;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    on -= dk;
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint149>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint150>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 107.69494055813166;
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought43.getInstance();
    Thought lo2 = Thought19.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    on += dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint150>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint151>
    dk *= -1;
    bk = dk > dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 639.9967689837493;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint151>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint152>
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk + dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    bk = dk > dk;
    double ld0 = 633.1474671183404;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint152>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint153>
    bk = dk > dk;
    bk = bk || bk;
    bk = dk < dk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        for(int j=0; j<10; j++){
            ok.m3(bk, bk, bk, bk);
            ok = ok.m4();
            bk = bk && bk;
            bk = bk || bk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk - dk;
            ok = ok.m4(ok, ok, ok, ok);
            dk = dk - dk;
            dk = dk + dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk || bk;
            ok = ok.m4(dk, dk, dk, dk);
            dk *= -1;
</cutPoint153>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint154>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    Thought lo0 = Thought78.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought28.getInstance();
    bk = bk && bk;
        bk = bk || bk;
    Thought lo2 = Thought96.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld3 = 157.94579309993142;
    Thought lo4 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb5 = true;
    Thought lo6 = Thought30.getInstance(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb7 = false;
    boolean lb8 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint154>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint155>
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    if (bk) {
        dk = dk + dk;
        dk = dk - dk;
        dk = ok.m3(bk, bk, bk, bk);
        double ld0 = 509.3039678532505;
        ok = ok.m4();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = !bk;
        bk = !bk;
        ok.m3(ok, ok, ok, ok);
        } else if (bk) {
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint155>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint156>
    dk = dk + dk;
    Thought lo0 = Thought20.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    on += dk;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo1 = Thought69.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    Thought lo2 = Thought71.getInstance();
    boolean lb3 = false;
    boolean lb4 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    Thought lo5 = Thought79.getInstance(ok, ok, ok, ok);
    Thought lo6 = Thought8.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    ok.m3(bk, bk, bk, bk);
    ok.m3();
        bk = bk && bk;
</cutPoint156>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint157>
        boolean lb0 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint157>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint158>
        dk = dk - dk;
    dk = dk - dk;
    on -= dk;
    Thought lo0 = Thought73.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    bk = dk > dk;
    boolean lb1 = true;
</cutPoint158>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint159>
    boolean lb0 = false;
    boolean lb1 = false;
    boolean lb2 = false;
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
</cutPoint159>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint160>
    Thought lo0 = Thought96.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    double ld1 = 613.2736379319617;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought67.getInstance(bk, bk, bk, bk);
    boolean lb3 = false;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb4 = false;
    dk = dk - dk;
</cutPoint160>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint161>
        on -= dk;
    bk = dk < dk;
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint161>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint162>
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
        }
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    double ld0 = 696.3100834553596;
    Thought lo1 = Thought54.getInstance();
    double ld2 = 773.1764494338977;
    Thought lo3 = Thought38.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought30.getInstance(ok, ok, ok, ok);
</cutPoint162>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint163>
    dk *= -1;
    Thought lo0 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    dk = dk + dk;
    boolean lb1 = true;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb2 = false;
    boolean lb3 = false;
        dk *= -1;
    double ld4 = 616.7679829379364;
    bk = bk && bk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint163>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint164>
    Thought lo0 = Thought87.getInstance(bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    boolean lb1 = false;
    dk = ok.m3();
    boolean lb2 = true;
    dk = dk + dk;
    boolean lb3 = false;
    bk = dk < dk;
    on -= dk;
</cutPoint164>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint165>
        boolean lb0 = false;
    boolean lb1 = true;
    bk = dk < dk;
    if (bk) {
        dk *= -1;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought48.getInstance(ok, ok, ok, ok);
        bk = !bk;
        } else if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought56.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
</cutPoint165>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint166>
    double ld0 = 802.3755608655159;
    dk = dk + dk;
    on += dk;
    Thought lo1 = Thought90.getInstance(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    bk = bk || bk;
    boolean lb3 = true;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    boolean lb4 = false;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint166>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint167>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    on -= dk;
    Thought lo0 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    bk = bk && bk;
    double ld2 = 860.0312662919322;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
</cutPoint167>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint168>
    bk = bk || bk;
    dk = dk - dk;
    on -= dk;
    double ld0 = 161.49509864708605;
    double ld1 = 106.97937080628272;
    dk = dk + dk;
    dk = dk + dk;
    Thought lo2 = Thought19.getInstance();
    boolean lb3 = false;
    bk = bk || bk;
    on -= dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    Thought lo4 = Thought74.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    Thought lo5 = Thought94.getInstance(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    boolean lb6 = true;
</cutPoint168>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint169>
    double ld0 = 765.4125564652182;
    bk = ok.m2();
    bk = dk < dk;
        dk = dk - dk;
    bk = !bk;
    on -= dk;
    bk = bk || bk;
    bk = bk && bk;
    bk = dk < dk;
    bk = bk || bk;
    boolean lb1 = true;
    bk = bk && bk;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        bk = !bk;
        bk = !bk;
        boolean lb2 = false;
        dk = dk - dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        boolean lb3 = true;
        boolean lb4 = true;
        dk = dk + dk;
</cutPoint169>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint170>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 978.5504762546814;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld1 = 913.8689547678999;
    bk = dk > dk;
    bk = bk && bk;
    bk = !bk;
    Thought lo2 = Thought68.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    double ld3 = 62.714205864543516;
    boolean lb4 = true;
    double ld5 = 794.2098595006051;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld6 = 680.352431819459;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    double ld7 = 855.8359802680274;
    dk *= -1;
</cutPoint170>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint171>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo0 = Thought63.getInstance(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = dk > dk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2();
    boolean lb2 = true;
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint171>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint172>
    bk = dk < dk;
    boolean lb0 = true;
        bk = bk && bk;
    bk = !bk;
    double ld1 = 527.1205225385584;
    bk = dk > dk;
    double ld2 = 20.781502071727356;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok);
    double ld4 = 856.0480038285958;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    double ld5 = 759.6936730633955;
    boolean lb6 = false;
</cutPoint172>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint173>
    double ld0 = 72.22411925921911;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    double ld1 = 722.8498419219765;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    boolean lb2 = false;
    on -= dk;
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
    bk = dk > dk;
    dk *= -1;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint173>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint174>
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
        boolean lb0 = false;
    bk = !bk;
    bk = bk || bk;
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
</cutPoint174>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought5 extends Thought{
private static ArrayList<Thought5> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 3.5888178740432717;
private double fd1 = 603.4120785668943;
private Thought fo0 = null;
private Thought fo1 = null;
Thought5 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought5 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought5 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought5 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought5 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought5 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought5 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought5 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought5 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought5 instance = new Thought5 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought5 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought5 instance = new Thought5 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought5 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought5 instance = new Thought5 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought5 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought5 instance = new Thought5 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought5 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought5 instance = new Thought5 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought5 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought5 instance = new Thought5 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought5 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought5 instance = new Thought5 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought5 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought5 instance = new Thought5 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint175>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo0 = Thought23.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 956.7457275183004;
    ok.m2(bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    bk = bk || bk;
    boolean lb2 = false;
    for(int j=0; j<10; j++){
        ok = ok.m4();
        boolean lb3 = false;
        double ld4 = 430.0875567196348;
        double ld5 = 212.54236926546417;
        boolean lb6 = false;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb7 = true;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint175>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint176>
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    bk = bk && bk;
    double ld1 = 509.82398610814954;
    bk = dk < dk;
    bk = bk || bk;
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb2 = true;
    dk *= -1;
</cutPoint176>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint177>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
        double ld0 = 836.967296374358;
    Thought lo1 = Thought97.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo2 = Thought4.getInstance(dk, dk, dk, dk);
    on += dk;
    dk = dk - dk;
</cutPoint177>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint178>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    bk = bk || bk;
    on -= dk;
    dk = dk - dk;
    dk *= -1;
    boolean lb0 = false;
    dk = dk - dk;
    Thought lo1 = Thought79.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk + dk;
    Thought lo3 = Thought49.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint178>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint179>
    double ld0 = 402.9247520450692;
    dk = dk - dk;
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 340.8427747376705;
    dk *= -1;
    ok = ok.m4();
        dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    double ld2 = 525.8617701585285;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought59.getInstance(dk, dk, dk, dk);
</cutPoint179>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint180>
    bk = !bk;
        boolean lb0 = true;
    bk = bk && bk;
    dk = dk - dk;
    double ld1 = 0.02759564238756884;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    if (bk) {
        Thought lo2 = Thought74.getInstance(bk, bk, bk, bk);
        double ld3 = 861.5907326824184;
        bk = ok.m2();
        double ld4 = 401.46351175658316;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = !bk;
</cutPoint180>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint181>
    bk = ok.m2(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        }
    bk = bk || bk;
    dk = dk - dk;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        double ld0 = 985.5245227608699;
        if (bk) {
            double ld1 = 410.40796819620857;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb2 = true;
            dk *= -1;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            if (bk) {
                ok = ok.m4(dk, dk, dk, dk);
                bk = bk || bk;
                ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
                bk = bk || bk;
                Thought lo3 = Thought86.getInstance(bk, bk, bk, bk);
                Thought lo4 = Thought78.getInstance();
                bk = dk < dk;
                bk = bk || bk;
                } else {
                ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
                dk = dk + dk;
</cutPoint181>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint182>
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk - dk;
    ok.m3();
    bk = bk || bk;
    boolean lb2 = false;
    bk = bk || bk;
</cutPoint182>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint183>
    boolean lb0 = true;
        dk = dk + dk;
    dk = dk - dk;
    Thought lo1 = Thought2.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
    on += dk;
    Thought lo2 = Thought49.getInstance(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 525.2547008218872;
    bk = ok.m2(dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo4 = Thought32.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    bk = bk && bk;
        dk = dk - dk;
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint183>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint184>
    dk *= -1;
    boolean lb0 = false;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    on += dk;
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    Thought lo2 = Thought32.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    dk = dk + dk;
    bk = dk > dk;
    Thought lo3 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    for(int j=0; j<10; j++){
        dk = dk + dk;
</cutPoint184>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint185>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
        ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint185>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint186>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 6.214500663890727;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo2 = Thought23.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint186>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint187>
    bk = dk > dk;
    dk *= -1;
    bk = bk && bk;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought45.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint187>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint188>
    double ld0 = 490.71650988774337;
    on -= dk;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4();
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    bk = dk > dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    double ld1 = 920.4234443551048;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    bk = dk > dk;
    if (bk) {
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint188>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint189>
    boolean lb0 = false;
    for(int j=0; j<10; j++){
        bk = ok.m2(dk, dk, dk, dk);
        Thought lo1 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        dk = ok.m3(bk, bk, bk, bk);
        dk = dk - dk;
        dk = ok.m3();
        if (bk) {
            on += dk;
            bk = bk || bk;
</cutPoint189>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint190>
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok);
        dk = dk - dk;
    bk = !bk;
    boolean lb1 = true;
    boolean lb2 = false;
    Thought lo3 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = true;
    for(int j=0; j<10; j++){
</cutPoint190>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint191>
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    double ld0 = 86.95730025802457;
    boolean lb1 = false;
    boolean lb2 = false;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    bk = dk > dk;
    double ld4 = 824.4566369495799;
    boolean lb5 = true;
    bk = bk || bk;
    boolean lb6 = false;
    bk = dk > dk;
    dk = dk + dk;
</cutPoint191>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint192>
    dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
        bk = dk > dk;
    bk = ok.m2();
    dk *= -1;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
        boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint192>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint193>
    bk = bk && bk;
    bk = dk > dk;
    bk = bk || bk;
    Thought lo0 = Thought14.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 703.9042864442104;
    bk = bk && bk;
    boolean lb2 = true;
    Thought lo3 = Thought95.getInstance(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    double ld4 = 646.1554672532169;
    on -= dk;
    boolean lb5 = true;
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    if (bk) {
</cutPoint193>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint194>
    ok = ok.m4();
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = true;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    boolean lb1 = false;
    double ld2 = 270.8556042110788;
    dk = dk - dk;
    double ld3 = 759.4732774414516;
    boolean lb4 = false;
    Thought lo5 = Thought71.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld6 = 356.237328774873;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint194>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint195>
    dk = dk + dk;
    double ld0 = 523.6181188312572;
    boolean lb1 = false;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    boolean lb3 = false;
    boolean lb4 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    on += dk;
    Thought lo5 = Thought28.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo6 = Thought94.getInstance(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    Thought lo7 = Thought81.getInstance();
    double ld8 = 162.30314644808553;
    on -= dk;
    Thought lo9 = Thought87.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
</cutPoint195>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint196>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    dk *= -1;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint196>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint197>
    boolean lb0 = true;
    double ld1 = 314.78164143531524;
    bk = bk || bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb2 = false;
</cutPoint197>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint198>
    bk = bk && bk;
    Thought lo0 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    double ld2 = 948.7470843758022;
    Thought lo3 = Thought9.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = true;
    bk = bk && bk;
</cutPoint198>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint199>
    double ld0 = 584.9421619520722;
    dk = dk - dk;
    boolean lb1 = false;
    on += dk;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        ok.m2(dk, dk, dk, dk);
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        bk = dk < dk;
        bk = bk || bk;
        dk *= -1;
        boolean lb2 = true;
        dk = ok.m3(bk, bk, bk, bk);
        ok = ok.m4();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        boolean lb3 = false;
        bk = dk < dk;
        double ld4 = 72.06902834535761;
        bk = bk && bk;
        on -= dk;
        on -= dk;
        dk = dk + dk;
        Thought lo5 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo6 = Thought80.getInstance(dk, dk, dk, dk);
        bk = bk || bk;
</cutPoint199>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint200>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought90.getInstance(bk, bk, bk, bk);
    dk *= -1;
    Thought lo1 = Thought1.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = true;
    double ld3 = 849.4880027733276;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        bk = dk < dk;
        bk = bk || bk;
        Thought lo4 = Thought29.getInstance(bk, bk, bk, bk);
        bk = dk < dk;
        dk *= -1;
        on += dk;
        bk = !bk;
        boolean lb5 = true;
        bk = dk > dk;
        dk = dk - dk;
        double ld6 = 781.3363295587434;
        double ld7 = 571.9466354884833;
</cutPoint200>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint201>
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    bk = bk || bk;
    dk = dk - dk;
    dk *= -1;
    dk = dk + dk;
    boolean lb0 = false;
    dk *= -1;
</cutPoint201>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint202>
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    on -= dk;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    on -= dk;
    bk = bk && bk;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought0.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    </cutPoint202>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint203>
    double ld0 = 789.4025459118259;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo1 = Thought9.getInstance(bk, bk, bk, bk);
    on += dk;
    bk = ok.m2();
    boolean lb2 = true;
    dk = dk + dk;
    on += dk;
    bk = bk || bk;
    bk = dk > dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
</cutPoint203>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint204>
    on += dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    Thought lo1 = Thought18.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    boolean lb2 = true;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought28.getInstance(bk, bk, bk, bk);
    boolean lb4 = false;
</cutPoint204>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint205>
    bk = dk > dk;
    on += dk;
    bk = bk && bk;
    bk = dk < dk;
    boolean lb0 = true;
    bk = dk < dk;
    boolean lb1 = true;
    ok = ok.m4();
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
</cutPoint205>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint206>
    Thought lo0 = Thought50.getInstance(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    boolean lb1 = false;
    dk *= -1;
        dk *= -1;
    Thought lo2 = Thought43.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    if (bk) {
        bk = dk < dk;
        ok = ok.m4();
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought87.getInstance(ok, ok, ok, ok);
</cutPoint206>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint207>
    bk = bk || bk;
    bk = dk > dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
        boolean lb1 = true;
    ok.m1();
    on -= dk;
    boolean lb2 = false;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    bk = dk < dk;
</cutPoint207>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint208>
    boolean lb0 = false;
    dk *= -1;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb1 = true;
    bk = !bk;
    bk = dk > dk;
    boolean lb2 = true;
    on -= dk;
    boolean lb3 = true;
    on += dk;
    Thought lo4 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = false;
    bk = dk > dk;
</cutPoint208>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint209>
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2();
    Thought lo0 = Thought52.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    bk = bk || bk;
    bk = dk < dk;
    Thought lo1 = Thought71.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok.m1(bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk - dk;
    Thought lo3 = Thought13.getInstance();
    bk = dk > dk;
    dk = dk + dk;
    Thought lo4 = Thought87.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
    ok.m1(ok, ok, ok, ok);
    Thought lo5 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb6 = false;
</cutPoint209>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought6 extends Thought{
private static ArrayList<Thought6> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 694.5406303176377;
private double fd1 = 426.30254474289;
private Thought fo0 = null;
private Thought fo1 = null;
Thought6 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought6 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought6 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought6 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought6 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought6 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought6 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought6 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought6 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought6 instance = new Thought6 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought6 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought6 instance = new Thought6 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought6 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought6 instance = new Thought6 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought6 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought6 instance = new Thought6 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought6 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought6 instance = new Thought6 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought6 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought6 instance = new Thought6 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought6 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought6 instance = new Thought6 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought6 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought6 instance = new Thought6 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint210>
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok.m2(dk, dk, dk, dk);
        dk = dk + dk;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        double ld0 = 161.66414710639967;
        bk = !bk;
        ok = ok.m4(bk, bk, bk, bk);
        ok.m2();
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 797.1376952296717;
        bk = bk && bk;
        for(int j=0; j<10; j++){
            dk = ok.m3(ok, ok, ok, ok);
            bk = !bk;
            boolean lb2 = true;
            dk *= -1;
            double ld3 = 923.2439102427936;
            bk = dk > dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk < dk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            Thought lo4 = Thought72.getInstance(dk, dk, dk, dk);
            bk = bk && bk;
</cutPoint210>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint211>
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    bk = dk > dk;
    boolean lb0 = true;
    on -= dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought50.getInstance(bk, bk, bk, bk);
    bk = ok.m2();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint211>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint212>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 660.7289315985222;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk + dk;
    Thought lo2 = Thought12.getInstance();
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint212>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint213>
    Thought lo0 = Thought76.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    Thought lo1 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = !bk;
    boolean lb2 = true;
    ok.m3();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
</cutPoint213>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint214>
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    if (bk) {
        bk = dk > dk;
        dk *= -1;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        boolean lb0 = false;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk && bk;
        Thought lo1 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        boolean lb2 = true;
        bk = !bk;
        dk = ok.m3(bk, bk, bk, bk);
        boolean lb3 = true;
        ok.m1();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint214>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint215>
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk + dk;
    double ld0 = 390.3196493287564;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 670.0386506251746;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    boolean lb2 = false;
    dk *= -1;
    ok = ok.m4();
    bk = dk > dk;
    for(int j=0; j<10; j++){
        Thought lo3 = Thought75.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld4 = 485.27024084415046;
        on += dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint215>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint216>
    dk = dk - dk;
    boolean lb0 = false;
    bk = dk < dk;
        dk = dk - dk;
    on -= dk;
    bk = dk < dk;
    double ld1 = 10.065284865211055;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    if (bk) {
        boolean lb2 = true;
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
        bk = dk > dk;
        dk = dk - dk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        boolean lb3 = false;
        dk = ok.m3(ok, ok, ok, ok);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint216>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint217>
    bk = dk < dk;
    boolean lb0 = true;
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    double ld2 = 709.7335254770547;
    bk = bk && bk;
    boolean lb3 = true;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb4 = true;
    bk = bk || bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld5 = 449.7882232190155;
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    boolean lb6 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo7 = Thought1.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = !bk;
</cutPoint217>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint218>
    dk = dk + dk;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk < dk;
    dk = dk + dk;
    boolean lb1 = true;
    bk = dk > dk;
    boolean lb2 = false;
    on += dk;
    on -= dk;
    dk = dk - dk;
    bk = bk && bk;
    bk = dk < dk;
    boolean lb3 = true;
    bk = dk > dk;
    bk = dk < dk;
    Thought lo4 = Thought59.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought46.getInstance(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    Thought lo6 = Thought6.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
</cutPoint218>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint219>
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    Thought lo0 = Thought27.getInstance();
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint219>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint220>
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk + dk;
    bk = dk < dk;
        Thought lo0 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo1 = Thought39.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
</cutPoint220>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint221>
    bk = dk > dk;
    ok.m2(bk, bk, bk, bk);
    double ld0 = 150.58860538925865;
        dk = ok.m3();
    bk = bk && bk;
    bk = bk || bk;
    bk = dk < dk;
    boolean lb1 = true;
    Thought lo2 = Thought36.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo3 = Thought71.getInstance(ok, ok, ok, ok);
</cutPoint221>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint222>
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint222>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint223>
    ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought97.getInstance();
    for(int j=0; j<10; j++){
        bk = !bk;
        boolean lb1 = false;
        boolean lb2 = false;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = false;
        dk = ok.m3(ok, ok, ok, ok);
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb4 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        dk = dk - dk;
        for(int j=0; j<10; j++){
            Thought lo5 = Thought0.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint223>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint224>
    bk = !bk;
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    ok = ok.m4();
    bk = bk && bk;
    dk *= -1;
    if (bk) {
        bk = bk && bk;
        } else {
        boolean lb0 = true;
        dk *= -1;
        on -= dk;
        for(int j=0; j<10; j++){
            bk = !bk;
            dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            double ld1 = 762.3699758204829;
            ok.m3(ok, ok, ok, ok);
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint224>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint225>
    bk = !bk;
    bk = dk < dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok.m2(dk, dk, dk, dk);
    boolean lb0 = true;
    bk = !bk;
    bk = bk || bk;
    bk = bk && bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    on -= dk;
    double ld1 = 942.5724708317499;
    if (bk) {
        ok.m3();
        Thought lo2 = Thought27.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        ok.m1(ok, ok, ok, ok);
        on += dk;
        for(int j=0; j<10; j++){
            dk = dk + dk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint225>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint226>
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
        ok = ok.m4();
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 865.9967044545182;
    double ld3 = 153.51372265367522;
</cutPoint226>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint227>
    bk = !bk;
    double ld0 = 540.9261779566713;
    dk = dk - dk;
    Thought lo1 = Thought97.getInstance(dk, dk, dk, dk);
    if (bk) {
        for(int j=0; j<10; j++){
            boolean lb2 = true;
            bk = bk && bk;
            bk = bk || bk;
            dk = dk + dk;
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint227>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint228>
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo0 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(dk, dk, dk, dk);
    bk = !bk;
    dk = dk + dk;
    Thought lo1 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
</cutPoint228>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint229>
    bk = bk && bk;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    if (bk) {
        double ld1 = 120.40228998383373;
        bk = bk || bk;
        on += dk;
        bk = bk || bk;
        dk = dk - dk;
        dk = dk + dk;
</cutPoint229>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint230>
    bk = bk && bk;
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    boolean lb2 = true;
    double ld3 = 412.3316491047611;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    dk = dk - dk;
    Thought lo4 = Thought14.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld5 = 883.3255347014893;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint230>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint231>
    ok = ok.m4();
    bk = dk < dk;
    bk = bk || bk;
    on -= dk;
    bk = dk > dk;
    on -= dk;
    bk = !bk;
    Thought lo0 = Thought79.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    dk = dk + dk;
    Thought lo1 = Thought46.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    for(int j=0; j<10; j++){
</cutPoint231>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint232>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought26.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = true;
        bk = bk || bk;
    double ld3 = 538.9496505012964;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
</cutPoint232>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint233>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    Thought lo0 = Thought67.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo1 = Thought32.getInstance(ok, ok, ok, ok);
    boolean lb2 = false;
    dk = dk - dk;
    dk = dk - dk;
    on += dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    dk *= -1;
    double ld3 = 405.79717025251654;
    bk = !bk;
    bk = dk < dk;
    Thought lo4 = Thought1.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint233>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint234>
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    Thought lo1 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 802.4537644822947;
    dk = dk + dk;
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    Thought lo4 = Thought34.getInstance(bk, bk, bk, bk);
</cutPoint234>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint235>
    dk = ok.m3();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb0 = true;
    dk = dk + dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint235>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint236>
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 509.8911571647256;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        bk = !bk;
        Thought lo1 = Thought92.getInstance(dk, dk, dk, dk);
        dk *= -1;
        dk *= -1;
        Thought lo2 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint236>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint237>
    ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    on += dk;
    dk = ok.m3();
    dk = dk + dk;
    on -= dk;
    dk = dk + dk;
    dk = dk + dk;
    Thought lo0 = Thought55.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought21.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    double ld3 = 371.609227349572;
    bk = !bk;
    double ld4 = 783.9825742683255;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint237>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint238>
    bk = dk < dk;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb0 = false;
    ok.m2(bk, bk, bk, bk);
    Thought lo1 = Thought43.getInstance();
    boolean lb2 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        Thought lo3 = Thought31.getInstance(ok, ok, ok, ok);
</cutPoint238>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint239>
    boolean lb0 = true;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    Thought lo1 = Thought20.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought88.getInstance();
</cutPoint239>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint240>
    dk *= -1;
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
    dk = dk - dk;
    bk = dk < dk;
    double ld1 = 772.8131270534668;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought59.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    boolean lb3 = true;
</cutPoint240>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint241>
    dk *= -1;
    double ld0 = 354.94184601737567;
    Thought lo1 = Thought65.getInstance(dk, dk, dk, dk);
    double ld2 = 903.7921373211931;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        Thought lo3 = Thought86.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = true;
        dk *= -1;
        dk = ok.m3(bk, bk, bk, bk);
        on -= dk;
        ok.m1();
</cutPoint241>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint242>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought26.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    on += dk;
    bk = !bk;
    bk = !bk;
    boolean lb2 = false;
    boolean lb3 = false;
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk && bk;
    bk = bk && bk;
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo4 = Thought33.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    Thought lo5 = Thought41.getInstance(ok, ok, ok, ok);
    bk = !bk;
    bk = dk < dk;
</cutPoint242>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint243>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
        dk = dk + dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought29.getInstance(bk, bk, bk, bk);
    double ld2 = 74.84788090487777;
    Thought lo3 = Thought36.getInstance();
    dk *= -1;
        bk = dk > dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = dk - dk;
</cutPoint243>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint244>
    Thought lo0 = Thought15.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo1 = Thought96.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 964.042781066107;
    Thought lo3 = Thought97.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint244>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought7 extends Thought{
private static ArrayList<Thought7> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 460.40092629868604;
private double fd1 = 530.5173742535741;
private Thought fo0 = null;
private Thought fo1 = null;
Thought7 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought7 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought7 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought7 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought7 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought7 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought7 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought7 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought7 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought7 instance = new Thought7 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought7 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought7 instance = new Thought7 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought7 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought7 instance = new Thought7 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought7 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought7 instance = new Thought7 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought7 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought7 instance = new Thought7 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought7 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought7 instance = new Thought7 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought7 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought7 instance = new Thought7 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought7 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought7 instance = new Thought7 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint245>
    bk = bk && bk;
    bk = bk && bk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought95.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint245>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint246>
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4();
    for(int j=0; j<10; j++){
        double ld0 = 704.5237425795893;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk > dk;
        bk = bk && bk;
        on -= dk;
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought56.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo2 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        dk = dk + dk;
        bk = bk && bk;
        bk = dk > dk;
        bk = ok.m2(bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint246>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint247>
    double ld0 = 99.19455704088124;
    bk = bk || bk;
    dk *= -1;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    boolean lb1 = true;
    bk = dk > dk;
    Thought lo2 = Thought3.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    Thought lo3 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    boolean lb4 = false;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo5 = Thought56.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
        bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    on -= dk;
</cutPoint247>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint248>
    bk = bk || bk;
    double ld0 = 908.2405979686816;
    if (bk) {
        bk = dk > dk;
        dk *= -1;
        on += dk;
        dk *= -1;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
</cutPoint248>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint249>
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    double ld0 = 136.13232486499794;
    dk *= -1;
    ok = ok.m4();
    double ld1 = 510.40904163317424;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = false;
    bk = bk && bk;
    if (bk) {
</cutPoint249>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint250>
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    for(int j=0; j<10; j++){
        double ld0 = 431.35645165697895;
        }
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 542.6366326846647;
    bk = !bk;
    dk = dk + dk;
    Thought lo2 = Thought21.getInstance(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    boolean lb3 = false;
</cutPoint250>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint251>
    on += dk;
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    dk = dk + dk;
    bk = !bk;
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
    boolean lb0 = false;
</cutPoint251>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint252>
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb0 = false;
    bk = bk || bk;
    on -= dk;
    bk = bk || bk;
    bk = dk < dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = dk < dk;
</cutPoint252>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint253>
    dk = ok.m3();
    if (bk) {
        bk = !bk;
        boolean lb0 = false;
        boolean lb1 = true;
        boolean lb2 = false;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = false;
        double ld4 = 242.9412345923207;
        bk = !bk;
        bk = dk > dk;
        bk = !bk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo5 = Thought90.getInstance(dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        bk = ok.m2(bk, bk, bk, bk);
        dk = dk - dk;
        boolean lb6 = true;
        ok = ok.m4();
        double ld7 = 419.94377772573034;
</cutPoint253>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint254>
    dk = dk - dk;
    Thought lo0 = Thought51.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    double ld1 = 948.6796848410975;
    Thought lo2 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo4 = Thought97.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
    ok.m2(bk, bk, bk, bk);
    bk = ok.m2();
    dk *= -1;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    boolean lb5 = false;
    if (bk) {
</cutPoint254>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint255>
    Thought lo0 = Thought76.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    bk = dk < dk;
    Thought lo2 = Thought84.getInstance();
</cutPoint255>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint256>
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = dk > dk;
        boolean lb0 = true;
        boolean lb1 = true;
        boolean lb2 = false;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        if (bk) {
            dk = dk - dk;
            dk = dk - dk;
            Thought lo3 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            double ld4 = 32.372978311409916;
            bk = bk && bk;
            dk *= -1;
</cutPoint256>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint257>
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    double ld0 = 579.7684333376812;
    bk = ok.m2();
    dk = dk - dk;
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    on += dk;
    bk = bk && bk;
    Thought lo1 = Thought6.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok);
</cutPoint257>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint258>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = !bk;
    dk = dk - dk;
    boolean lb0 = false;
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb2 = true;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    Thought lo4 = Thought68.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk *= -1;
    for(int j=0; j<10; j++){
        ok.m2();
        dk *= -1;
</cutPoint258>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint259>
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 657.664427398199;
    double ld1 = 56.16935615750578;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    double ld3 = 268.9419205047288;
    dk *= -1;
    bk = !bk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought88.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk + dk;
    bk = bk && bk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint259>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint260>
    ok.m2(dk, dk, dk, dk);
    on += dk;
    on -= dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3();
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = false;
    ok.m3();
    dk *= -1;
    double ld1 = 574.4444389863988;
    for(int j=0; j<10; j++){
</cutPoint260>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint261>
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    bk = bk || bk;
    boolean lb0 = false;
    double ld1 = 403.9149600283263;
    bk = bk && bk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld2 = 988.7045574725606;
        bk = !bk;
        on -= dk;
        Thought lo3 = Thought72.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        bk = dk > dk;
        bk = dk < dk;
        boolean lb4 = true;
        Thought lo5 = Thought61.getInstance(dk, dk, dk, dk);
        bk = !bk;
        Thought lo6 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint261>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint262>
    bk = bk || bk;
    bk = bk && bk;
    dk *= -1;
    on -= dk;
    Thought lo0 = Thought11.getInstance(bk, bk, bk, bk);
    ok.m2();
    Thought lo1 = Thought33.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought19.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb3 = true;
    ok = ok.m4();
    boolean lb4 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought36.getInstance(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint262>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint263>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    bk = dk < dk;
    dk *= -1;
    on += dk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
    Thought lo1 = Thought6.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4();
        on -= dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
</cutPoint263>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint264>
    dk = dk - dk;
    boolean lb0 = false;
    Thought lo1 = Thought63.getInstance(dk, dk, dk, dk);
    boolean lb2 = true;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    bk = bk || bk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought27.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        dk = ok.m3(bk, bk, bk, bk);
        dk = dk - dk;
        bk = !bk;
        ok.m3();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo4 = Thought78.getInstance(ok, ok, ok, ok);
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint264>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint265>
        boolean lb0 = true;
    boolean lb1 = true;
    bk = dk > dk;
    double ld2 = 247.4163971885604;
    Thought lo3 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint265>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint266>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 687.1168187960241;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 636.4068676810921;
    bk = bk && bk;
    on -= dk;
    Thought lo3 = Thought12.getInstance(dk, dk, dk, dk);
    boolean lb4 = false;
</cutPoint266>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint267>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    dk *= -1;
    double ld0 = 960.4880877247598;
    boolean lb1 = true;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
    ok.m1(ok, ok, ok, ok);
    boolean lb2 = true;
    dk = dk - dk;
    if (bk) {
        bk = bk && bk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        if (bk) {
</cutPoint267>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint268>
    boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    Thought lo2 = Thought99.getInstance(bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought47.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought87.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    double ld5 = 222.86658945927053;
</cutPoint268>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint269>
    on -= dk;
    Thought lo0 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb1 = true;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = true;
    bk = dk < dk;
    Thought lo3 = Thought56.getInstance();
    double ld4 = 839.7408420639979;
    boolean lb5 = true;
    dk = dk - dk;
    double ld6 = 778.1063039098348;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
</cutPoint269>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint270>
    double ld0 = 306.89611726519666;
    boolean lb1 = true;
    dk = dk + dk;
    double ld2 = 573.22381990151;
    bk = !bk;
    dk *= -1;
    Thought lo3 = Thought49.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = false;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb6 = true;
    dk *= -1;
</cutPoint270>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint271>
    double ld0 = 976.6549890878074;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    Thought lo1 = Thought96.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo2 = Thought83.getInstance();
    bk = bk || bk;
    bk = !bk;
    double ld3 = 623.0110526761057;
    boolean lb4 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok);
    Thought lo5 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb6 = false;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
</cutPoint271>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint272>
    dk *= -1;
    Thought lo0 = Thought61.getInstance(bk, bk, bk, bk);
    if (bk) {
        dk = dk + dk;
        dk *= -1;
        boolean lb1 = true;
        dk = dk + dk;
        ok.m2();
        dk = dk + dk;
        on += dk;
        dk *= -1;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint272>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint273>
    boolean lb0 = true;
    bk = !bk;
    Thought lo1 = Thought54.getInstance(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 771.9788861581291;
        ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    ok.m2(bk, bk, bk, bk);
    ok.m2();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought2.getInstance(ok, ok, ok, ok);
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    dk *= -1;
    bk = dk > dk;
    boolean lb5 = false;
    boolean lb6 = false;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint273>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint274>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 332.5290154607307;
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
    Thought lo1 = Thought0.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    double ld3 = 996.8839607902424;
    bk = bk || bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint274>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint275>
    on += dk;
    dk *= -1;
    bk = dk < dk;
    bk = dk > dk;
    bk = dk > dk;
    Thought lo0 = Thought14.getInstance();
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought12.getInstance(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint275>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint276>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    bk = !bk;
    on += dk;
    ok.m2(ok, ok, ok, ok);
    boolean lb1 = false;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint276>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint277>
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb0 = true;
    Thought lo1 = Thought61.getInstance(dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    on -= dk;
    dk = dk - dk;
    on += dk;
    boolean lb2 = false;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    Thought lo3 = Thought65.getInstance();
        dk = dk + dk;
</cutPoint277>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint278>
        on -= dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = true;
    boolean lb1 = false;
    dk *= -1;
    bk = !bk;
    dk = dk + dk;
    double ld2 = 529.263418369641;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
</cutPoint278>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint279>
    dk *= -1;
    boolean lb0 = false;
    Thought lo1 = Thought11.getInstance(dk, dk, dk, dk);
    Thought lo2 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought47.getInstance(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint279>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought8 extends Thought{
private static ArrayList<Thought8> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 754.2346221237326;
private double fd1 = 409.7671511528949;
private Thought fo0 = null;
private Thought fo1 = null;
Thought8 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought8 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought8 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought8 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought8 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought8 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought8 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought8 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought8 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought8 instance = new Thought8 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought8 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought8 instance = new Thought8 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought8 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought8 instance = new Thought8 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought8 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought8 instance = new Thought8 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought8 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought8 instance = new Thought8 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought8 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought8 instance = new Thought8 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought8 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought8 instance = new Thought8 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought8 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought8 instance = new Thought8 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint280>
    dk = dk + dk;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo1 = Thought19.getInstance();
    boolean lb2 = false;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    double ld4 = 541.3596887282397;
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    bk = !bk;
    boolean lb5 = false;
</cutPoint280>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint281>
        bk = dk < dk;
    if (bk) {
        bk = dk > dk;
        dk *= -1;
        double ld0 = 200.50522393229411;
        bk = dk > dk;
        Thought lo1 = Thought58.getInstance(bk, bk, bk, bk);
        ok = ok.m4();
        dk = dk + dk;
        bk = dk < dk;
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        double ld2 = 594.1264789546032;
        ok = ok.m4(ok, ok, ok, ok);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        bk = !bk;
        double ld3 = 255.37571383211713;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        double ld4 = 731.8111049970404;
        for(int j=0; j<10; j++){
            bk = bk || bk;
            dk *= -1;
            bk = bk && bk;
            boolean lb5 = false;
</cutPoint281>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint282>
    boolean lb0 = true;
    dk = dk - dk;
    bk = !bk;
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    ok.m3();
    bk = bk || bk;
    dk *= -1;
    on -= dk;
    bk = !bk;
    boolean lb3 = true;
    double ld4 = 92.33903018346672;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
        bk = dk < dk;
    on -= dk;
    boolean lb5 = false;
    bk = dk < dk;
</cutPoint282>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint283>
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk *= -1;
    bk = bk && bk;
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4();
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint283>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint284>
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = !bk;
    dk = dk - dk;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought19.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        dk = dk - dk;
</cutPoint284>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint285>
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    double ld0 = 282.0399388648702;
    dk = dk + dk;
    bk = bk || bk;
    dk = dk + dk;
    on -= dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    on -= dk;
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 746.1002736243214;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint285>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint286>
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought25.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 343.861338460352;
    dk = dk - dk;
    bk = dk < dk;
    bk = bk || bk;
    double ld2 = 95.11962929317366;
    double ld3 = 878.5363873653026;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
        double ld4 = 807.1186666418979;
        for(int j=0; j<10; j++){
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb5 = true;
</cutPoint286>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint287>
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb2 = false;
    double ld3 = 952.5027093827498;
</cutPoint287>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint288>
    bk = dk < dk;
    bk = !bk;
    bk = dk > dk;
    ok.m3();
        bk = dk > dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = bk || bk;
        dk = dk - dk;
    dk = dk - dk;
    Thought lo0 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
        dk = ok.m3();
</cutPoint288>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint289>
    on += dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok);
    double ld0 = 299.3668204668199;
    bk = bk && bk;
    on -= dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought80.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    double ld2 = 318.7824477150668;
    bk = bk || bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint289>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint290>
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    on += dk;
    double ld0 = 166.8012636556527;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 914.5932823020105;
        Thought lo2 = Thought42.getInstance();
    on += dk;
    bk = dk > dk;
    bk = dk < dk;
    dk *= -1;
    double ld3 = 806.1108277312998;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint290>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint291>
    bk = ok.m2(ok, ok, ok, ok);
        on -= dk;
    Thought lo0 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk *= -1;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on += dk;
    boolean lb3 = false;
    dk *= -1;
    ok.m2(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    on -= dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
        }
    Thought lo4 = Thought84.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    boolean lb6 = true;
    dk *= -1;
    dk = dk - dk;
    on -= dk;
    Thought lo7 = Thought1.getInstance(ok, ok, ok, ok);
    double ld8 = 634.9554277265185;
</cutPoint291>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint292>
    boolean lb0 = false;
    dk *= -1;
    bk = bk && bk;
    bk = !bk;
    bk = dk > dk;
    on += dk;
    if (bk) {
        dk = dk + dk;
        for(int j=0; j<10; j++){
            for(int j=0; j<10; j++){
</cutPoint292>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint293>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    ok.m1(bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2();
</cutPoint293>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint294>
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought22.getInstance(dk, dk, dk, dk);
    boolean lb1 = false;
    dk *= -1;
    double ld2 = 241.69811933656266;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    double ld3 = 569.2466297351342;
    ok = ok.m4();
    boolean lb4 = true;
    bk = bk && bk;
    dk = dk - dk;
    bk = bk && bk;
    boolean lb5 = true;
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo6 = Thought15.getInstance(ok, ok, ok, ok);
</cutPoint294>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint295>
    bk = bk && bk;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 796.5124022242043;
    boolean lb3 = false;
    double ld4 = 794.5989457913436;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb5 = false;
    double ld6 = 99.0883908255334;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
</cutPoint295>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint296>
    bk = bk || bk;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        boolean lb0 = true;
        dk *= -1;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = false;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb2 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought90.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint296>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint297>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought9.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    double ld1 = 392.10071623525215;
    dk *= -1;
    bk = bk || bk;
    dk *= -1;
    double ld2 = 507.68107407706543;
    double ld3 = 377.3204497692849;
    on += dk;
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4();
    boolean lb4 = false;
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
</cutPoint297>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint298>
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
</cutPoint298>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint299>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld0 = 558.9138629141879;
    boolean lb1 = true;
    boolean lb2 = false;
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    bk = ok.m2();
    on += dk;
</cutPoint299>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint300>
    boolean lb0 = true;
    boolean lb1 = true;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought3.getInstance(dk, dk, dk, dk);
    Thought lo3 = Thought78.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    dk = ok.m3();
    boolean lb5 = false;
    double ld6 = 614.2160782377935;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo7 = Thought38.getInstance(ok, ok, ok, ok);
    Thought lo8 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb9 = true;
    for(int j=0; j<10; j++){
        bk = bk || bk;
        dk = dk - dk;
</cutPoint300>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint301>
    dk = dk - dk;
    for(int j=0; j<10; j++){
        ok.m1(dk, dk, dk, dk);
        bk = bk && bk;
        boolean lb0 = false;
        Thought lo1 = Thought80.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo2 = Thought37.getInstance(bk, bk, bk, bk);
        bk = !bk;
        boolean lb3 = false;
        double ld4 = 880.5672737210582;
        ok = ok.m4();
        bk = bk && bk;
        dk = dk + dk;
        bk = dk < dk;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb5 = false;
        dk = dk - dk;
        double ld6 = 843.9152367395976;
        dk = dk + dk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
</cutPoint301>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint302>
    bk = bk || bk;
    on += dk;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = bk || bk;
    Thought lo1 = Thought57.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok.m2();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint302>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint303>
    Thought lo0 = Thought97.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = bk || bk;
    bk = dk > dk;
    Thought lo2 = Thought61.getInstance(dk, dk, dk, dk);
    double ld3 = 569.4091728629174;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    dk = ok.m3(bk, bk, bk, bk);
        bk = bk || bk;
    dk = ok.m3();
    bk = dk < dk;
    double ld5 = 561.2914658897145;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok.m1(ok, ok, ok, ok);
    boolean lb6 = true;
    bk = bk && bk;
    double ld7 = 481.2331473322929;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
</cutPoint303>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint304>
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    Thought lo0 = Thought82.getInstance();
    double ld1 = 41.82464522602857;
    dk *= -1;
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    for(int j=0; j<10; j++){
        Thought lo2 = Thought99.getInstance(ok, ok, ok, ok);
        if (bk) {
            dk *= -1;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            Thought lo3 = Thought46.getInstance(dk, dk, dk, dk);
</cutPoint304>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint305>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 848.0971504377609;
    bk = bk || bk;
</cutPoint305>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint306>
    bk = !bk;
    Thought lo0 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld1 = 302.70455138189374;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo2 = Thought12.getInstance(dk, dk, dk, dk);
    boolean lb3 = false;
    dk = dk - dk;
    bk = !bk;
    dk *= -1;
    bk = dk > dk;
    bk = bk && bk;
    bk = !bk;
    bk = !bk;
    bk = !bk;
    on -= dk;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    bk = dk > dk;
    bk = dk > dk;
    dk = dk - dk;
    Thought lo6 = Thought46.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld7 = 279.28518506101733;
</cutPoint306>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint307>
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk < dk;
    on -= dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        dk = ok.m3(bk, bk, bk, bk);
        double ld0 = 617.4992806318376;
        ok.m2();
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        bk = bk && bk;
        bk = bk || bk;
        boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint307>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint308>
    dk *= -1;
    boolean lb0 = true;
    bk = bk || bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        dk = ok.m3(dk, dk, dk, dk);
        bk = bk && bk;
        bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        boolean lb1 = true;
</cutPoint308>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint309>
    dk = dk - dk;
    dk = dk - dk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
        bk = bk && bk;
    boolean lb0 = false;
    ok = ok.m4();
    on += dk;
    bk = !bk;
    boolean lb1 = false;
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
</cutPoint309>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint310>
    dk = dk - dk;
    if (bk) {
        double ld0 = 711.0190728146281;
        bk = bk || bk;
        dk = dk - dk;
        dk = dk + dk;
        bk = !bk;
        bk = bk || bk;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought38.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk);
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        ok = ok.m4(bk, bk, bk, bk);
        if (bk) {
            Thought lo2 = Thought25.getInstance();
            dk = dk - dk;
            bk = bk || bk;
            Thought lo3 = Thought74.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = !bk;
            ok.m1(ok, ok, ok, ok);
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint310>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint311>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    double ld0 = 185.0969230745956;
    dk = dk - dk;
    dk = dk + dk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    bk = dk > dk;
    boolean lb2 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        Thought lo3 = Thought2.getInstance(bk, bk, bk, bk);
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        double ld4 = 377.11035631064493;
        dk = ok.m3(ok, ok, ok, ok);
        bk = bk || bk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        bk = ok.m2(dk, dk, dk, dk);
        }
    bk = bk && bk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint311>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint312>
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
        Thought lo0 = Thought29.getInstance();
    double ld1 = 618.8616569550203;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    double ld2 = 515.5990242956235;
    bk = !bk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought43.getInstance(bk, bk, bk, bk);
    boolean lb4 = false;
    dk = dk - dk;
    bk = bk || bk;
    ok.m1();
    on += dk;
    bk = dk < dk;
</cutPoint312>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint313>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought27.getInstance(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    boolean lb1 = false;
    on -= dk;
    bk = bk && bk;
    dk *= -1;
</cutPoint313>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint314>
    double ld0 = 17.138849496240788;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb1 = true;
    ok.m1(bk, bk, bk, bk);
            bk = !bk;
    boolean lb2 = false;
    bk = dk < dk;
    bk = bk && bk;
    bk = dk < dk;
        bk = bk || bk;
    ok = ok.m4();
</cutPoint314>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought9 extends Thought{
private static ArrayList<Thought9> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 56.046256519493454;
private double fd1 = 763.4473235948576;
private Thought fo0 = null;
private Thought fo1 = null;
Thought9 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought9 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought9 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought9 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought9 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought9 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought9 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought9 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought9 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought9 instance = new Thought9 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought9 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought9 instance = new Thought9 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought9 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought9 instance = new Thought9 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought9 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought9 instance = new Thought9 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought9 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought9 instance = new Thought9 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought9 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought9 instance = new Thought9 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought9 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought9 instance = new Thought9 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought9 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought9 instance = new Thought9 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint315>
    double ld0 = 309.67393754480787;
    if (bk) {
        Thought lo1 = Thought3.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        Thought lo2 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        bk = bk && bk;
        dk = dk - dk;
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb3 = false;
        ok.m2(bk, bk, bk, bk);
        bk = dk < dk;
        bk = dk > dk;
</cutPoint315>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint316>
    bk = bk && bk;
    bk = ok.m2();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 755.4130850144387;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo2 = Thought58.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk *= -1;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    bk = ok.m2();
    dk *= -1;
    on += dk;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
        on -= dk;
    bk = bk || bk;
</cutPoint316>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint317>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 578.3142281825317;
    boolean lb2 = true;
    double ld3 = 212.52026654264122;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 128.40859544102577;
    double ld5 = 620.6883084220661;
    boolean lb6 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo7 = Thought28.getInstance(dk, dk, dk, dk);
    boolean lb8 = false;
    boolean lb9 = false;
</cutPoint317>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint318>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb0 = false;
    bk = bk && bk;
    ok.m1(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
    boolean lb1 = false;
    dk *= -1;
    dk = ok.m3();
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
    bk = bk || bk;
    double ld2 = 351.538218289674;
    double ld3 = 498.1334894462817;
    ok.m1(bk, bk, bk, bk);
</cutPoint318>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint319>
    ok.m2();
    dk *= -1;
    bk = bk || bk;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought48.getInstance(dk, dk, dk, dk);
    boolean lb2 = true;
</cutPoint319>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint320>
    double ld0 = 131.95205402062612;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought94.getInstance(bk, bk, bk, bk);
        bk = !bk;
    bk = bk || bk;
    bk = bk && bk;
    dk *= -1;
    Thought lo2 = Thought6.getInstance();
    dk = dk - dk;
    dk = dk - dk;
</cutPoint320>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint321>
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    double ld0 = 140.5639484393142;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint321>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint322>
    for(int j=0; j<10; j++){
        dk = dk + dk;
        bk = dk < dk;
        dk = ok.m3(bk, bk, bk, bk);
        Thought lo0 = Thought91.getInstance();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 869.6549862530513;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        boolean lb2 = false;
        Thought lo3 = Thought2.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        ok.m2(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
</cutPoint322>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint323>
    Thought lo0 = Thought31.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    Thought lo1 = Thought96.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought63.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb3 = false;
    double ld4 = 465.58828799954046;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    on += dk;
    ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint323>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint324>
    Thought lo0 = Thought73.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    ok.m1(ok, ok, ok, ok);
</cutPoint324>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint325>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    boolean lb0 = true;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = bk && bk;
    if (bk) {
        boolean lb1 = false;
        double ld2 = 47.42560731327939;
        bk = !bk;
        boolean lb3 = false;
        boolean lb4 = false;
        } else {
        dk *= -1;
                ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(bk, bk, bk, bk);
        dk = dk + dk;
        bk = dk < dk;
</cutPoint325>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint326>
    Thought lo0 = Thought16.getInstance();
    if (bk) {
        boolean lb1 = false;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld2 = 225.78116326028325;
        boolean lb3 = true;
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        } else {
        bk = dk > dk;
        double ld4 = 203.3333580378688;
        bk = dk > dk;
        dk *= -1;
        on += dk;
        bk = dk < dk;
        Thought lo5 = Thought10.getInstance(dk, dk, dk, dk);
        if (bk) {
            bk = bk || bk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = bk || bk;
            bk = ok.m2(bk, bk, bk, bk);
            ok = ok.m4();
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint326>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint327>
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
        boolean lb1 = false;
        bk = bk || bk;
        dk *= -1;
        bk = ok.m2(dk, dk, dk, dk);
</cutPoint327>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint328>
    Thought lo0 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    on -= dk;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        double ld2 = 531.3120987803082;
        Thought lo3 = Thought99.getInstance(dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = false;
        dk = ok.m3(bk, bk, bk, bk);
        Thought lo5 = Thought7.getInstance();
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo6 = Thought38.getInstance(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint328>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint329>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
        dk = dk - dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 194.16788304581922;
    bk = bk && bk;
    dk = dk - dk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = !bk;
        dk = dk - dk;
        bk = dk < dk;
        boolean lb1 = false;
        Thought lo2 = Thought61.getInstance(bk, bk, bk, bk);
        bk = dk < dk;
</cutPoint329>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint330>
    bk = dk > dk;
    ok.m3();
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk > dk;
        Thought lo0 = Thought1.getInstance(ok, ok, ok, ok);
        dk = dk - dk;
        on -= dk;
</cutPoint330>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint331>
    bk = bk || bk;
    dk = dk + dk;
    bk = !bk;
    dk *= -1;
    on -= dk;
    Thought lo0 = Thought18.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    on -= dk;
</cutPoint331>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint332>
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    bk = bk || bk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb0 = true;
    bk = bk || bk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        } else {
        bk = !bk;
        boolean lb1 = true;
        bk = !bk;
        bk = !bk;
        bk = dk < dk;
        boolean lb2 = true;
        boolean lb3 = true;
</cutPoint332>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint333>
    double ld0 = 377.65476588415214;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
    double ld1 = 242.14656937223822;
    boolean lb2 = false;
    dk = dk + dk;
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo4 = Thought30.getInstance();
</cutPoint333>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint334>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
    bk = !bk;
    double ld0 = 828.276164553873;
    double ld1 = 963.358282472718;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    dk *= -1;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb3 = true;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld4 = 301.01860039275545;
</cutPoint334>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint335>
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    on -= dk;
    Thought lo0 = Thought74.getInstance();
        bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo1 = Thought58.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 766.4169479673809;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 85.85522821368518;
    boolean lb5 = true;
    double ld6 = 828.3248182695745;
    boolean lb7 = false;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint335>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint336>
    bk = bk && bk;
    bk = dk < dk;
    boolean lb0 = false;
    bk = bk && bk;
    Thought lo1 = Thought90.getInstance(ok, ok, ok, ok);
    on -= dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    boolean lb3 = false;
    bk = !bk;
    bk = !bk;
    double ld4 = 54.56997220325288;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    if (bk) {
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint336>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint337>
    bk = bk || bk;
    bk = !bk;
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    on += dk;
    bk = !bk;
    bk = ok.m2();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    double ld0 = 724.7250736284743;
    dk *= -1;
    double ld1 = 286.0950884567322;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought20.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk - dk;
    if (bk) {
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
</cutPoint337>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint338>
    dk = dk - dk;
    on += dk;
    boolean lb0 = true;
    bk = bk || bk;
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 229.56045754047645;
    ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
        boolean lb2 = false;
</cutPoint338>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint339>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
        dk = dk + dk;
    bk = dk > dk;
    bk = bk && bk;
    double ld0 = 817.5426932526292;
    on += dk;
    on += dk;
    if (bk) {
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint339>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint340>
    bk = dk < dk;
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    on -= dk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    if (bk) {
        on += dk;
</cutPoint340>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint341>
    ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2();
    double ld0 = 1000.8385100678815;
    boolean lb1 = false;
    bk = dk < dk;
    boolean lb2 = true;
    on += dk;
    double ld3 = 56.58727256934579;
    boolean lb4 = false;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint341>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint342>
    dk = dk + dk;
    Thought lo0 = Thought92.getInstance(ok, ok, ok, ok);
    on -= dk;
    on += dk;
    bk = dk < dk;
    dk = dk - dk;
    double ld1 = 398.942953030987;
        bk = !bk;
    bk = bk && bk;
        bk = bk || bk;
    bk = bk && bk;
    Thought lo2 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb3 = false;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 351.1674206356851;
    bk = ok.m2(bk, bk, bk, bk);
    double ld5 = 184.84287368104984;
    dk = dk - dk;
    double ld6 = 605.857489845814;
</cutPoint342>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint343>
    bk = ok.m2();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 739.1563110160157;
        double ld1 = 793.0002029995782;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    double ld2 = 523.0982649450768;
    dk *= -1;
        bk = bk || bk;
    ok.m1();
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    boolean lb3 = false;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint343>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint344>
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought28.getInstance(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m2(dk, dk, dk, dk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 715.3892148921086;
    bk = bk && bk;
    dk = dk + dk;
    ok.m1(bk, bk, bk, bk);
</cutPoint344>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint345>
    boolean lb0 = true;
    bk = bk || bk;
    ok = ok.m4();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought99.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    bk = bk && bk;
    bk = dk > dk;
    dk = dk + dk;
    dk = dk - dk;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    on += dk;
    Thought lo3 = Thought66.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought49.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
</cutPoint345>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint346>
    bk = dk > dk;
    bk = bk || bk;
    on += dk;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = true;
    dk = ok.m3();
    bk = dk > dk;
    double ld1 = 637.0735683852339;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        ok.m2(ok, ok, ok, ok);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        dk = dk + dk;
        dk = ok.m3(bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint346>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint347>
    bk = dk > dk;    ok = ok.m4();    Thought lo0 = Thought55.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);    dk = dk - dk;    double ld1 = 142.34897428619902;    dk *= -1;    boolean lb2 = false;    dk *= -1;    dk = dk + dk;    ok.m3(ok, ok, ok, ok);    bk = bk || bk;    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);    on -= dk;    bk = dk < dk;    dk *= -1;        on -= dk;    dk *= -1;    bk = dk > dk;    bk = !bk;</cutPoint347>Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint348>
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    boolean lb1 = true;
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    bk = dk < dk;
    double ld2 = 409.0252686524392;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought87.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
</cutPoint348>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint349>
    on += dk;
    Thought lo0 = Thought27.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    ok.m2();
    bk = !bk;
    on -= dk;
    dk *= -1;
    Thought lo1 = Thought82.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
</cutPoint349>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought10 extends Thought{
private static ArrayList<Thought10> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 14.076520115759648;
private double fd1 = 17.564820579239353;
private Thought fo0 = null;
private Thought fo1 = null;
Thought10 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought10 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought10 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought10 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought10 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought10 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought10 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought10 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought10 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought10 instance = new Thought10 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought10 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought10 instance = new Thought10 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought10 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought10 instance = new Thought10 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought10 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought10 instance = new Thought10 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought10 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought10 instance = new Thought10 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought10 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought10 instance = new Thought10 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought10 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought10 instance = new Thought10 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought10 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought10 instance = new Thought10 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint350>
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 681.3422240504931;
    bk = dk < dk;
    bk = bk && bk;
    double ld1 = 108.62573629977604;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought34.getInstance(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    boolean lb3 = false;
    bk = bk && bk;
    dk = dk + dk;
    boolean lb4 = true;
    bk = dk < dk;
    Thought lo5 = Thought99.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint350>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint351>
    bk = dk < dk;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    Thought lo0 = Thought0.getInstance(ok, ok, ok, ok);
    boolean lb1 = true;
    double ld2 = 346.30838711307786;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = dk < dk;
    bk = dk < dk;
    dk = dk - dk;
    on -= dk;
    dk = dk - dk;
    ok.m3();
    boolean lb3 = true;
    bk = dk < dk;
</cutPoint351>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint352>
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    Thought lo0 = Thought35.getInstance(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 272.8781282057045;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk < dk;
        dk = dk - dk;
        bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        bk = !bk;
        bk = !bk;
        boolean lb2 = true;
        dk = dk - dk;
</cutPoint352>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint353>
    bk = !bk;
    Thought lo0 = Thought5.getInstance(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought55.getInstance();
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb2 = true;
    Thought lo3 = Thought58.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    if (bk) {
        bk = bk && bk;
        bk = !bk;
        boolean lb5 = false;
</cutPoint353>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint354>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk - dk;
    if (bk) {
        dk *= -1;
        on -= dk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        ok = ok.m4();
        dk = ok.m3(dk, dk, dk, dk);
        bk = bk && bk;
        dk *= -1;
        bk = !bk;
        dk = ok.m3(bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo0 = Thought53.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint354>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint355>
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    bk = !bk;
    bk = bk && bk;
    double ld0 = 795.7718294747502;
    boolean lb1 = true;
    boolean lb2 = false;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint355>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint356>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        Thought lo0 = Thought27.getInstance();
        if (bk) {
            double ld1 = 664.5007555921459;
            boolean lb2 = false;
            bk = ok.m2(dk, dk, dk, dk);
            dk *= -1;
            double ld3 = 591.8268460149892;
            bk = dk > dk;
            ok = ok.m4(bk, bk, bk, bk);
            bk = dk < dk;
            boolean lb4 = true;
            Thought lo5 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            boolean lb6 = false;
            boolean lb7 = false;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = !bk;
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            ok.m3(ok, ok, ok, ok);
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint356>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint357>
    bk = bk && bk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    Thought lo0 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    bk = !bk;
    boolean lb1 = false;
    dk = dk + dk;
    bk = bk && bk;
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk);
        boolean lb2 = true;
    boolean lb3 = false;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint357>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint358>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld0 = 134.27209028566224;
    Thought lo1 = Thought52.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint358>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint359>
    dk = dk - dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
    bk = bk && bk;
    boolean lb1 = true;
    double ld2 = 490.5931617886839;
    boolean lb3 = true;
    dk = dk - dk;
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    Thought lo4 = Thought4.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought21.getInstance();
    bk = bk && bk;
    Thought lo6 = Thought19.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb7 = false;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint359>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint360>
    dk *= -1;
    dk = dk - dk;
    boolean lb0 = true;
    Thought lo1 = Thought13.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo2 = Thought55.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
        bk = dk < dk;
    bk = ok.m2();
</cutPoint360>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint361>
    boolean lb0 = false;
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
        boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 860.8820374404614;
    on += dk;
    bk = bk || bk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
    boolean lb3 = false;
    dk = dk - dk;
    bk = ok.m2();
    bk = dk < dk;
    bk = bk || bk;
    bk = dk < dk;
    on -= dk;
    if (bk) {
        } else if (bk) {
</cutPoint361>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint362>
    bk = dk > dk;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 988.1045572827067;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    Thought lo2 = Thought21.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb3 = false;
</cutPoint362>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint363>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok.m2();
    bk = !bk;
    Thought lo0 = Thought8.getInstance(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        boolean lb1 = false;
        for(int j=0; j<10; j++){
            bk = bk && bk;
            dk = dk - dk;
            dk = dk - dk;
            bk = dk > dk;
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
            double ld2 = 982.5575304423523;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok);
            bk = !bk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            Thought lo3 = Thought40.getInstance();
            dk *= -1;
            double ld4 = 203.7742030034256;
            dk = dk - dk;
            dk = dk + dk;
            }
        Thought lo5 = Thought10.getInstance(dk, dk, dk, dk);
</cutPoint363>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint364>
    double ld0 = 486.2425180176743;
    boolean lb1 = true;
    bk = dk < dk;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        dk = ok.m3(bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        }
    dk = dk + dk;
    double ld2 = 867.1721112545604;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo3 = Thought74.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    on -= dk;
    bk = bk && bk;
    double ld4 = 391.9009476229809;
    dk = dk + dk;
        dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    Thought lo5 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb6 = false;
    dk = dk - dk;
    bk = bk && bk;
    dk = dk - dk;
</cutPoint364>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint365>
    Thought lo0 = Thought92.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    dk = dk - dk;
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought87.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    dk = dk - dk;
    bk = dk > dk;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld2 = 703.1656979610506;
</cutPoint365>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint366>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 759.008737176788;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 77.30245495422858;
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk - dk;
    Thought lo3 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    bk = bk || bk;
    bk = dk < dk;
    double ld4 = 967.6974812341052;
    bk = !bk;
    dk *= -1;
</cutPoint366>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint367>
    double ld0 = 526.9598986353318;
    if (bk) {
        dk *= -1;
        boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        on -= dk;
        bk = ok.m2(ok, ok, ok, ok);
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
</cutPoint367>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint368>
    boolean lb0 = false;
    Thought lo1 = Thought73.getInstance();
    double ld2 = 43.034152577916444;
    ok = ok.m4(dk, dk, dk, dk);
    double ld3 = 83.20515650379953;
    bk = ok.m2(bk, bk, bk, bk);
    on += dk;
    Thought lo4 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = false;
    bk = bk && bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        double ld6 = 644.368743939156;
        boolean lb7 = true;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint368>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint369>
    for(int j=0; j<10; j++){
        ok = ok.m4();
        }
    Thought lo0 = Thought96.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = false;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo3 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    dk *= -1;
    ok.m1();
</cutPoint369>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint370>
    Thought lo0 = Thought95.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 908.1910391539731;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought69.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    on += dk;
    bk = dk < dk;
    on += dk;
</cutPoint370>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint371>
    if (bk) {
        bk = dk > dk;
        double ld0 = 961.8267911315387;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        on += dk;
        double ld1 = 423.8091302582545;
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb2 = true;
        bk = !bk;
        Thought lo3 = Thought94.getInstance(ok, ok, ok, ok);
        dk = dk + dk;
        bk = bk && bk;
        bk = !bk;
        bk = bk && bk;
        bk = dk > dk;
        dk = dk - dk;
        boolean lb4 = false;
        bk = bk || bk;
        dk = dk - dk;
        bk = bk && bk;
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        double ld5 = 3.6295651810959133;
        bk = dk > dk;
        ok = ok.m4();
</cutPoint371>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint372>
    dk = dk - dk;
    bk = bk || bk;
    if (bk) {
        bk = !bk;
        boolean lb0 = true;
        dk = dk - dk;
        bk = dk < dk;
        dk *= -1;
        bk = bk || bk;
        Thought lo1 = Thought89.getInstance(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = true;
        double ld3 = 445.4825323412897;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        bk = bk || bk;
        ok.m2(ok, ok, ok, ok);
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        boolean lb4 = true;
        dk = dk - dk;
        double ld5 = 506.73254820915207;
        bk = dk < dk;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        double ld6 = 402.82223572792304;
</cutPoint372>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint373>
    ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
</cutPoint373>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint374>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    Thought lo0 = Thought89.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb1 = true;
    ok.m3(bk, bk, bk, bk);
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought52.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    boolean lb4 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint374>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint375>
    dk *= -1;
    ok = ok.m4();
    bk = !bk;
    dk = dk - dk;
        on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint375>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint376>
    dk *= -1;
        dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought21.getInstance();
    boolean lb1 = true;
    bk = bk && bk;
    double ld2 = 773.0366357842042;
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 279.4547504207005;
    dk = dk - dk;
</cutPoint376>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint377>
    bk = dk > dk;
    boolean lb0 = false;
    double ld1 = 106.53785527245064;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4();
    Thought lo3 = Thought62.getInstance(dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    bk = dk < dk;
</cutPoint377>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint378>
    bk = ok.m2(bk, bk, bk, bk);        bk = bk || bk;    bk = bk && bk;    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);    bk = dk > dk;    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);    boolean lb2 = false;    ok = ok.m4(dk, dk, dk, dk);    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);    ok = ok.m4(bk, bk, bk, bk);    on -= dk;</cutPoint378>Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint379>
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4();
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    boolean lb0 = false;
    Thought lo1 = Thought12.getInstance();
</cutPoint379>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint380>
    if (bk) {
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        bk = bk && bk;
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok);
        } else {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb0 = true;
        Thought lo1 = Thought71.getInstance(dk, dk, dk, dk);
        dk = dk - dk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        for(int j=0; j<10; j++){
            ok.m1(bk, bk, bk, bk);
            bk = bk && bk;
</cutPoint380>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint381>
    boolean lb0 = false;
    bk = ok.m2();
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    boolean lb1 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
        boolean lb2 = false;
    boolean lb3 = true;
    for(int j=0; j<10; j++){
        on += dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
</cutPoint381>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint382>
    Thought lo0 = Thought4.getInstance();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    double ld1 = 801.9781794366655;
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 863.7106167886856;
    bk = bk || bk;
</cutPoint382>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint383>
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought86.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    double ld1 = 370.3738333228829;
    boolean lb2 = false;
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo3 = Thought89.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo4 = Thought7.getInstance(ok, ok, ok, ok);
    bk = !bk;
</cutPoint383>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint384>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    boolean lb0 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    bk = dk > dk;
    bk = bk || bk;
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought5.getInstance(bk, bk, bk, bk);
</cutPoint384>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought11 extends Thought{
private static ArrayList<Thought11> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 292.36324003865434;
private double fd1 = 22.864526670640743;
private Thought fo0 = null;
private Thought fo1 = null;
Thought11 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought11 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought11 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought11 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought11 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought11 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought11 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought11 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought11 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought11 instance = new Thought11 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought11 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought11 instance = new Thought11 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought11 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought11 instance = new Thought11 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought11 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought11 instance = new Thought11 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought11 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought11 instance = new Thought11 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought11 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought11 instance = new Thought11 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought11 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought11 instance = new Thought11 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought11 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought11 instance = new Thought11 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint385>
    Thought lo0 = Thought10.getInstance();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk < dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(dk, dk, dk, dk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        boolean lb1 = false;
        for(int j=0; j<10; j++){
            bk = !bk;
</cutPoint385>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint386>
    Thought lo0 = Thought42.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    on -= dk;
    bk = bk || bk;
    bk = dk < dk;
    dk *= -1;
    dk = dk - dk;
    double ld1 = 868.0495672281689;
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
        on += dk;
    dk *= -1;
</cutPoint386>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint387>
    bk = dk > dk;
    bk = !bk;
    boolean lb0 = false;
    bk = dk > dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = !bk;
    bk = bk || bk;
    dk = dk + dk;
    bk = bk && bk;
    Thought lo1 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought29.getInstance(dk, dk, dk, dk);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = bk && bk;
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk - dk;
    dk = dk - dk;
    Thought lo4 = Thought10.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = dk + dk;
</cutPoint387>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint388>
    dk = dk + dk;
    bk = dk > dk;
    bk = dk < dk;
    Thought lo0 = Thought65.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld1 = 217.00561207552693;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 231.44747280640442;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld4 = 330.6992465512596;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    boolean lb5 = true;
    dk = dk - dk;
</cutPoint388>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint389>
    bk = bk && bk;
    ok = ok.m4();
    bk = bk || bk;
    Thought lo0 = Thought87.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
        for(int j=0; j<10; j++){
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
        on -= dk;
        boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        double ld2 = 534.7360256904473;
        bk = dk > dk;
        double ld3 = 402.73962527334675;
</cutPoint389>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint390>
    on += dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    double ld0 = 693.1228165322914;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk < dk;
    Thought lo2 = Thought99.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    boolean lb3 = true;
    bk = !bk;
    double ld4 = 873.1298331346035;
    bk = !bk;
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint390>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint391>
    boolean lb0 = false;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb1 = true;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = false;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought41.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo4 = Thought69.getInstance(bk, bk, bk, bk);
</cutPoint391>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint392>
    bk = bk && bk;
    ok = ok.m4();
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought80.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo1 = Thought34.getInstance(dk, dk, dk, dk);
    on += dk;
    dk = dk - dk;
    Thought lo2 = Thought99.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        double ld3 = 964.4788304302606;
        dk = dk - dk;
        double ld4 = 636.9513400422309;
        bk = dk < dk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = ok.m2();
        bk = !bk;
        bk = dk < dk;
        boolean lb5 = false;
</cutPoint392>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint393>
    boolean lb0 = true;
    dk = dk - dk;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 114.63988688010053;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    Thought lo3 = Thought51.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
    double ld4 = 466.7006218511375;
    on -= dk;
    bk = bk && bk;
    bk = bk && bk;
    Thought lo5 = Thought24.getInstance(bk, bk, bk, bk);
    boolean lb6 = true;
    double ld7 = 383.5687039800356;
    dk = dk - dk;
</cutPoint393>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint394>
    bk = ok.m2();
    dk *= -1;
    dk = dk - dk;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
        Thought lo0 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = dk + dk;
    dk = dk - dk;
</cutPoint394>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint395>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
    bk = bk || bk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok.m1(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    bk = dk > dk;
</cutPoint395>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint396>
    boolean lb0 = true;
    boolean lb1 = false;
    boolean lb2 = false;
    bk = !bk;
    dk = dk - dk;
    bk = ok.m2();
    boolean lb3 = true;
    double ld4 = 168.82837243418354;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb5 = false;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok);
    dk = dk - dk;
    on += dk;
    boolean lb6 = false;
    bk = dk > dk;
    bk = bk || bk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint396>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint397>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    Thought lo0 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        dk *= -1;
        bk = dk > dk;
        dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk || bk;
        double ld1 = 301.1895795862981;
        bk = dk < dk;
        dk = dk - dk;
        ok = ok.m4();
        dk *= -1;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = dk < dk;
        double ld2 = 368.71090315437544;
        boolean lb3 = false;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
</cutPoint397>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint398>
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    bk = bk || bk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
        on -= dk;
    boolean lb1 = true;
    on -= dk;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
</cutPoint398>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint399>
    boolean lb0 = false;
    on += dk;
    bk = !bk;
    on -= dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = bk && bk;
    dk = dk + dk;
    if (bk) {
        ok.m1(bk, bk, bk, bk);
        Thought lo1 = Thought16.getInstance();
        bk = dk < dk;
        dk *= -1;
        } else if (bk) {
        double ld2 = 150.77510937332192;
        on -= dk;
</cutPoint399>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint400>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb0 = false;
    if (bk) {
        bk = bk || bk;
        dk = dk - dk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought12.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb2 = false;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb3 = false;
        on += dk;
        ok.m1(bk, bk, bk, bk);
        bk = dk > dk;
        double ld4 = 673.2458343864456;
        bk = bk || bk;
        ok = ok.m4();
        on += dk;
        dk = dk + dk;
        boolean lb5 = true;
</cutPoint400>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint401>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    bk = dk > dk;
    Thought lo0 = Thought99.getInstance(ok, ok, ok, ok);
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
    bk = !bk;
    dk *= -1;
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 328.6693736344207;
    bk = bk || bk;
    ok = ok.m4();
    dk = dk - dk;
    boolean lb2 = false;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint401>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint402>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk - dk;
    bk = dk > dk;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    bk = bk || bk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb1 = false;
    boolean lb2 = false;
    bk = bk || bk;
    bk = bk && bk;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    if (bk) {
        boolean lb3 = false;
        dk = ok.m3();
</cutPoint402>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint403>
    bk = dk > dk;
    double ld0 = 279.9578273544106;
    bk = dk > dk;
    boolean lb1 = false;
    Thought lo2 = Thought43.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb3 = false;
    bk = dk > dk;
    double ld4 = 86.40410209551972;
    dk = dk - dk;
        bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 901.5275964166281;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint403>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint404>
    Thought lo0 = Thought43.getInstance();
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo2 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 316.72502273691276;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    double ld4 = 534.4389727618759;
    dk *= -1;
    ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo5 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb6 = false;
    dk = dk - dk;
    bk = ok.m2();
    boolean lb7 = true;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
</cutPoint404>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint405>
    double ld0 = 202.45173163017355;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo1 = Thought96.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk || bk;
    Thought lo2 = Thought85.getInstance(bk, bk, bk, bk);
    Thought lo3 = Thought22.getInstance();
    dk *= -1;
    Thought lo4 = Thought49.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld5 = 877.3287172871106;
    boolean lb6 = true;
    </cutPoint405>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint406>
    Thought lo0 = Thought9.getInstance(ok, ok, ok, ok);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 228.56922893668113;
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    bk = dk < dk;
    bk = !bk;
    ok.m3(bk, bk, bk, bk);
    boolean lb4 = false;
    dk *= -1;
    dk = dk + dk;
    bk = dk < dk;
</cutPoint406>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint407>
    dk = dk + dk;
    bk = ok.m2();
    bk = dk > dk;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought14.getInstance(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint407>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint408>
    boolean lb0 = true;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought18.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    on -= dk;
    dk = dk - dk;
        ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    dk = dk + dk;
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    bk = !bk;
</cutPoint408>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint409>
    bk = dk > dk;
    on -= dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought36.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        dk = dk - dk;
        dk *= -1;
        dk = ok.m3(bk, bk, bk, bk);
        ok = ok.m4();
        bk = bk || bk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        bk = !bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint409>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint410>
    bk = !bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    boolean lb1 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo2 = Thought42.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m2(ok, ok, ok, ok);
    if (bk) {
        bk = bk || bk;
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld3 = 274.92823264937573;
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = true;
        ok = ok.m4(bk, bk, bk, bk);
        } else if (bk) {
        ok = ok.m4();
</cutPoint410>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint411>
    dk = dk - dk;
    Thought lo0 = Thought91.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb1 = true;
    Thought lo2 = Thought23.getInstance(ok, ok, ok, ok);
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    bk = dk > dk;
    Thought lo3 = Thought47.getInstance(bk, bk, bk, bk);
    boolean lb4 = false;
    Thought lo5 = Thought7.getInstance();
    dk = dk - dk;
</cutPoint411>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint412>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
        bk = !bk;
            dk = dk + dk;
    bk = dk > dk;
    boolean lb0 = true;
    on += dk;
    dk *= -1;
    dk = dk - dk;
</cutPoint412>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint413>
    boolean lb0 = false;
    boolean lb1 = false;
    dk = dk + dk;
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    dk = dk + dk;
    double ld2 = 162.09665834246925;
    bk = dk < dk;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    on += dk;
    dk = dk + dk;
    dk = dk + dk;
    bk = bk && bk;
    bk = dk > dk;
    bk = dk < dk;
    on += dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 575.9446210587614;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        for(int j=0; j<10; j++){
            dk = ok.m3(dk, dk, dk, dk);
            bk = !bk;
</cutPoint413>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint414>
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    Thought lo0 = Thought62.getInstance(bk, bk, bk, bk);
        bk = bk || bk;
    if (bk) {
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        on += dk;
</cutPoint414>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint415>
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    Thought lo0 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk - dk;
    bk = bk || bk;
    on += dk;
    on -= dk;
    dk = dk + dk;
    boolean lb2 = false;
    dk *= -1;
    ok.m1(bk, bk, bk, bk);
</cutPoint415>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint416>
    dk = dk + dk;
        boolean lb0 = false;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo1 = Thought45.getInstance(ok, ok, ok, ok);
    boolean lb2 = true;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = !bk;
    double ld4 = 871.9512386764842;
        bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
</cutPoint416>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint417>
    on -= dk;
    boolean lb0 = true;
    dk *= -1;
    ok.m2(bk, bk, bk, bk);
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
</cutPoint417>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint418>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    dk *= -1;
    dk *= -1;
    double ld0 = 516.4945810649713;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = true;
    dk = dk - dk;
    boolean lb2 = false;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint418>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint419>
    bk = dk > dk;
    bk = !bk;
    Thought lo0 = Thought47.getInstance(bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4();
    double ld2 = 340.1577120426178;
    double ld3 = 756.2573360940439;
    bk = bk && bk;
    dk = dk - dk;
    bk = dk < dk;
    Thought lo4 = Thought51.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint419>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought12 extends Thought{
private static ArrayList<Thought12> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 133.46609547697102;
private double fd1 = 471.9149566789576;
private Thought fo0 = null;
private Thought fo1 = null;
Thought12 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought12 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought12 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought12 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought12 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought12 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought12 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought12 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought12 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought12 instance = new Thought12 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought12 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought12 instance = new Thought12 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought12 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought12 instance = new Thought12 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought12 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought12 instance = new Thought12 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought12 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought12 instance = new Thought12 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought12 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought12 instance = new Thought12 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought12 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought12 instance = new Thought12 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought12 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought12 instance = new Thought12 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint420>
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
        boolean lb0 = true;
    double ld1 = 465.2901959920848;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk *= -1;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo3 = Thought42.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint420>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint421>
    dk = ok.m3(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    on -= dk;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
    on -= dk;
    for(int j=0; j<10; j++){
        boolean lb0 = false;
        bk = !bk;
        dk = dk + dk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = dk < dk;
        boolean lb1 = false;
        ok.m2();
        on -= dk;
        bk = bk || bk;
</cutPoint421>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint422>
    bk = dk > dk;
    double ld0 = 823.2440465254771;
    dk = dk - dk;
    bk = bk || bk;
    Thought lo1 = Thought21.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb2 = false;
    double ld3 = 217.4177351454615;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint422>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint423>
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    dk *= -1;
    on += dk;
    boolean lb0 = false;
    bk = dk > dk;
    dk = dk - dk;
    boolean lb1 = false;
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint423>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint424>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    Thought lo0 = Thought10.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint424>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint425>
    boolean lb0 = false;
    boolean lb1 = false;
    Thought lo2 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought34.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    boolean lb4 = true;
    Thought lo5 = Thought35.getInstance(dk, dk, dk, dk);
    Thought lo6 = Thought16.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint425>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint426>
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2();
    bk = bk || bk;
    bk = bk || bk;
    bk = dk < dk;
    on += dk;
    dk = dk - dk;
    bk = bk || bk;
        bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint426>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint427>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    double ld0 = 981.0342663350269;
    bk = bk || bk;
    bk = bk || bk;
    dk = dk - dk;
    dk = dk - dk;
    Thought lo1 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    bk = bk || bk;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint427>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint428>
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    bk = dk > dk;
    on -= dk;
    bk = dk > dk;
    bk = bk && bk;
    Thought lo0 = Thought80.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint428>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint429>
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld0 = 281.37521635813357;
    boolean lb1 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    Thought lo2 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint429>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint430>
        bk = bk && bk;
    Thought lo0 = Thought10.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    double ld1 = 655.1280302176627;
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
</cutPoint430>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint431>
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought47.getInstance();
    bk = dk < dk;
    dk = dk + dk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint431>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint432>
    dk = dk + dk;
    double ld0 = 870.6609813097804;
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 241.42161535414593;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    bk = dk > dk;
    on -= dk;
    ok.m3();
    bk = dk > dk;
    dk *= -1;
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
    bk = bk && bk;
    Thought lo3 = Thought80.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint432>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint433>
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    boolean lb1 = true;
    ok = ok.m4();
    Thought lo2 = Thought60.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    if (bk) {
        Thought lo3 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        bk = bk || bk;
        Thought lo4 = Thought2.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        boolean lb5 = true;
        ok = ok.m4(dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        Thought lo6 = Thought64.getInstance(bk, bk, bk, bk);
        double ld7 = 579.6718591544393;
        } else {
        dk *= -1;
</cutPoint433>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint434>
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    Thought lo0 = Thought24.getInstance();
    on += dk;
    bk = dk < dk;
    Thought lo1 = Thought41.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint434>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint435>
    bk = bk || bk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb0 = true;
    double ld1 = 101.10290273731546;
    dk *= -1;
    double ld2 = 859.0926907756465;
    dk = dk + dk;
    if (bk) {
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk || bk;
            bk = dk > dk;
            bk = !bk;
            dk *= -1;
            Thought lo3 = Thought87.getInstance(dk, dk, dk, dk);
            bk = bk && bk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = bk || bk;
            bk = dk > dk;
            dk = ok.m3(bk, bk, bk, bk);
            boolean lb4 = true;
            ok = ok.m4();
            ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb5 = false;
            bk = bk || bk;
            on -= dk;
</cutPoint435>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint436>
    double ld0 = 619.288339916226;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb1 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
        dk *= -1;
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    bk = bk || bk;
    bk = dk < dk;
    bk = dk > dk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    on -= dk;
</cutPoint436>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint437>
    ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        double ld0 = 449.4625322092643;
        bk = dk < dk;
        bk = dk < dk;
        double ld1 = 674.2457113367693;
        boolean lb2 = false;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld3 = 114.69094553193936;
        bk = dk > dk;
        Thought lo4 = Thought29.getInstance(bk, bk, bk, bk);
        boolean lb5 = true;
        bk = ok.m2();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
</cutPoint437>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint438>
    bk = dk < dk;
    bk = dk < dk;
    dk = dk - dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    ok = ok.m4();
    bk = bk && bk;
    bk = dk > dk;
    bk = dk > dk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    bk = !bk;
</cutPoint438>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint439>
    on += dk;
    Thought lo0 = Thought3.getInstance(dk, dk, dk, dk);
    Thought lo1 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    dk = dk - dk;
    bk = !bk;
    boolean lb2 = false;
    bk = bk && bk;
    bk = !bk;
    Thought lo3 = Thought63.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    on -= dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
    Thought lo4 = Thought97.getInstance(ok, ok, ok, ok);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint439>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint440>
    ok = ok.m4(dk, dk, dk, dk);
        bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok.m1();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo0 = Thought74.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
</cutPoint440>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint441>
    bk = bk && bk;
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = true;
    on -= dk;
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint441>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint442>
    Thought lo0 = Thought89.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb1 = true;
    bk = !bk;
    boolean lb2 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo3 = Thought8.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    boolean lb4 = false;
    Thought lo5 = Thought47.getInstance(dk, dk, dk, dk);
    Thought lo6 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo7 = Thought79.getInstance(bk, bk, bk, bk);
    Thought lo8 = Thought80.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
    double ld9 = 666.806396824899;
    bk = dk < dk;
    bk = bk || bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
</cutPoint442>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint443>
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    on += dk;
    dk = ok.m3();
    boolean lb0 = false;
    bk = bk || bk;
    on += dk;
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint443>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint444>
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok);
    on -= dk;
    Thought lo0 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    double ld1 = 130.80697912842544;
    bk = bk || bk;
    Thought lo2 = Thought69.getInstance(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    boolean lb3 = false;
    bk = !bk;
    bk = dk < dk;
    dk = dk + dk;
    boolean lb4 = false;
    dk *= -1;
</cutPoint444>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint445>
    dk *= -1;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    ok.m2(ok, ok, ok, ok);
    Thought lo0 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk);
    boolean lb1 = true;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint445>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint446>
    bk = dk > dk;
    dk *= -1;
    ok.m3();
    for(int j=0; j<10; j++){
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo0 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        bk = dk < dk;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk);
        on -= dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk + dk;
        double ld1 = 585.4446942546338;
        dk = ok.m3();
        if (bk) {
            dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            on -= dk;
            double ld2 = 878.7819607596507;
            dk *= -1;
            bk = ok.m2(ok, ok, ok, ok);
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = !bk;
            bk = dk < dk;
</cutPoint446>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint447>
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    boolean lb0 = false;
    boolean lb1 = false;
    double ld2 = 828.5774730360804;
    boolean lb3 = false;
    dk *= -1;
    bk = bk && bk;
    bk = dk > dk;
    ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    ok.m2();
    Thought lo4 = Thought33.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb5 = false;
    ok.m1(dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb6 = false;
    boolean lb7 = false;
    Thought lo8 = Thought99.getInstance();
    dk *= -1;
</cutPoint447>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint448>
    bk = dk < dk;
    bk = bk || bk;
    Thought lo0 = Thought21.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
        double ld1 = 16.65078699362396;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    boolean lb3 = false;
    Thought lo4 = Thought38.getInstance(bk, bk, bk, bk);
    ok.m1();
    double ld5 = 509.71004693370236;
    double ld6 = 831.2510253933115;
    bk = dk < dk;
    dk *= -1;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld7 = 853.6685282347718;
    double ld8 = 523.8240313922714;
    dk = dk + dk;
    Thought lo9 = Thought63.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint448>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint449>
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    Thought lo0 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        dk = dk - dk;
</cutPoint449>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint450>
    Thought lo0 = Thought15.getInstance(dk, dk, dk, dk);
    bk = !bk;
    double ld1 = 766.8804566777915;
    dk = dk + dk;
    Thought lo2 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    double ld3 = 309.97739858207467;
    on -= dk;
    boolean lb4 = true;
    boolean lb5 = false;
    ok = ok.m4();
    bk = dk > dk;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb6 = true;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb7 = true;
        on += dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint450>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint451>
    Thought lo0 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = !bk;
    bk = bk || bk;
    dk *= -1;
    double ld1 = 679.1714085144619;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld2 = 791.0530427707845;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    double ld3 = 703.2931761282231;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo4 = Thought92.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint451>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint452>
    bk = dk < dk;
    dk = dk - dk;
    boolean lb0 = true;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    double ld1 = 996.7229174275312;
    bk = bk && bk;
    on -= dk;
    bk = ok.m2();
    Thought lo2 = Thought39.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    Thought lo4 = Thought2.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb5 = true;
    bk = !bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
</cutPoint452>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint453>
    bk = dk > dk;
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = false;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    boolean lb2 = false;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint453>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint454>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 225.92643801564984;
    dk *= -1;
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk < dk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk && bk;
    Thought lo1 = Thought73.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought9.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 696.0901773449671;
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint454>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought13 extends Thought{
private static ArrayList<Thought13> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 415.1083698229683;
private double fd1 = 612.9928211042345;
private Thought fo0 = null;
private Thought fo1 = null;
Thought13 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought13 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought13 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought13 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought13 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought13 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought13 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought13 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought13 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought13 instance = new Thought13 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought13 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought13 instance = new Thought13 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought13 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought13 instance = new Thought13 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought13 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought13 instance = new Thought13 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought13 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought13 instance = new Thought13 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought13 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought13 instance = new Thought13 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought13 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought13 instance = new Thought13 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought13 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought13 instance = new Thought13 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint455>
    bk = !bk;
    Thought lo0 = Thought15.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    bk = !bk;
    double ld2 = 350.25670573914425;
    boolean lb3 = false;
    dk = dk - dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo4 = Thought0.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint455>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint456>
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
    boolean lb0 = false;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    bk = bk && bk;
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = !bk;
        dk = dk + dk;
        ok.m2();
        bk = bk || bk;
        bk = bk || bk;
        dk = dk + dk;
        bk = bk || bk;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint456>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint457>
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    double ld1 = 878.8402336931096;
    bk = dk < dk;
    on -= dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok.m2();
    bk = !bk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 817.5206881188748;
    bk = bk || bk;
    dk = dk - dk;
        dk = dk + dk;
</cutPoint457>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint458>
    dk = dk - dk;
    on -= dk;
    Thought lo0 = Thought3.getInstance(ok, ok, ok, ok);
    double ld1 = 929.9262533964461;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo2 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 843.9778867706474;
    bk = bk || bk;
</cutPoint458>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint459>
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo0 = Thought21.getInstance();
    Thought lo1 = Thought35.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 777.9094794187042;
    for(int j=0; j<10; j++){
        dk *= -1;
        double ld3 = 492.94686661628714;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        on += dk;
        boolean lb4 = true;
        double ld5 = 467.3198872043493;
        bk = dk > dk;
        boolean lb6 = false;
        dk *= -1;
        bk = bk && bk;
        on -= dk;
        dk = ok.m3(dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
</cutPoint459>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint460>
    on -= dk;
    double ld0 = 554.7394537915377;
    double ld1 = 908.6482734517147;
    boolean lb2 = true;
    Thought lo3 = Thought82.getInstance(bk, bk, bk, bk);
    Thought lo4 = Thought69.getInstance();
    Thought lo5 = Thought73.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    for(int j=0; j<10; j++){
        boolean lb6 = false;
        double ld7 = 434.8782973223699;
        bk = ok.m2(ok, ok, ok, ok);
        double ld8 = 19.38251264775216;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb9 = true;
        }
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo10 = Thought68.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk *= -1;
    double ld11 = 64.87586105394121;
</cutPoint460>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint461>
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    on -= dk;
    Thought lo0 = Thought68.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    on += dk;
    boolean lb1 = true;
        boolean lb2 = false;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    boolean lb3 = true;
    </cutPoint461>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint462>
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok.m1();
    on -= dk;
    bk = dk < dk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    double ld0 = 708.0639216903676;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    Thought lo1 = Thought91.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk *= -1;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    boolean lb3 = false;
    bk = bk || bk;
</cutPoint462>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint463>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    boolean lb0 = true;
    dk = dk - dk;
    bk = dk > dk;
    on += dk;
    double ld1 = 222.97665849650414;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo2 = Thought64.getInstance(bk, bk, bk, bk);
</cutPoint463>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint464>
    on += dk;
    on -= dk;
    boolean lb0 = true;
    dk *= -1;
    ok.m1();
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld2 = 590.3816741476431;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld3 = 204.92355736683805;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb4 = true;
</cutPoint464>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint465>
    bk = ok.m2(bk, bk, bk, bk);
    double ld0 = 479.08992344571425;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 214.48927286772968;
    dk *= -1;
    dk = dk + dk;
    bk = bk || bk;
    bk = dk > dk;
    Thought lo2 = Thought23.getInstance(ok, ok, ok, ok);
    dk *= -1;
    boolean lb3 = false;
    bk = dk < dk;
    if (bk) {
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        bk = ok.m2(dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = true;
        double ld5 = 533.1790086168231;
        bk = dk > dk;
        double ld6 = 800.8597148450217;
</cutPoint465>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint466>
        bk = ok.m2(bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = false;
    boolean lb2 = true;
    double ld3 = 969.2461132432653;
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    if (bk) {
</cutPoint466>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint467>
    Thought lo0 = Thought32.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 154.00121057461163;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = bk || bk;
    Thought lo2 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo3 = Thought90.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    double ld4 = 342.6820406281702;
    bk = !bk;
    bk = dk > dk;
</cutPoint467>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint468>
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    dk *= -1;
    double ld0 = 624.2306735215553;
        ok = ok.m4(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 405.2182807013302;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint468>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint469>
    boolean lb0 = false;
    dk = dk + dk;
    Thought lo1 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        Thought lo2 = Thought78.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        bk = bk && bk;
        bk = bk && bk;
        double ld3 = 977.171926327728;
        }
    bk = bk && bk;
    dk *= -1;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought36.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    bk = bk && bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint469>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint470>
    dk *= -1;
    on -= dk;
    Thought lo0 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    bk = dk > dk;
    boolean lb1 = false;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
    boolean lb2 = false;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint470>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint471>
    boolean lb0 = true;
    ok.m1(bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    dk = dk - dk;
    if (bk) {
        ok.m3();
        Thought lo1 = Thought44.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        bk = ok.m2(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint471>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint472>
    double ld0 = 489.64461498007717;
    dk *= -1;
    double ld1 = 853.1575192260999;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    dk = dk - dk;
    boolean lb2 = true;
    bk = dk < dk;
    Thought lo3 = Thought16.getInstance(bk, bk, bk, bk);
    ok.m3();
</cutPoint472>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint473>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb0 = true;
    Thought lo1 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        bk = bk || bk;
        bk = ok.m2(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        dk = dk - dk;
        dk = ok.m3();
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        }
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint473>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint474>
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    on -= dk;
    boolean lb1 = false;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo2 = Thought65.getInstance(dk, dk, dk, dk);
        bk = bk || bk;
        double ld3 = 426.993701009626;
        if (bk) {
            dk *= -1;
            bk = bk && bk;
            Thought lo4 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            dk = dk + dk;
            bk = ok.m2(bk, bk, bk, bk);
            dk = dk + dk;
</cutPoint474>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint475>
    dk = dk + dk;
    dk = dk + dk;
    Thought lo0 = Thought1.getInstance();
    boolean lb1 = true;
    double ld2 = 22.47480850025623;
    boolean lb3 = true;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    double ld4 = 119.2525635972352;
    for(int j=0; j<10; j++){
        on += dk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        }
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo5 = Thought60.getInstance(dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    bk = dk < dk;
    bk = bk || bk;
    bk = !bk;
    on += dk;
</cutPoint475>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint476>
    bk = dk > dk;
    for(int j=0; j<10; j++){
        bk = dk < dk;
        dk = dk + dk;
        Thought lo0 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo1 = Thought84.getInstance(bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk + dk;
        ok = ok.m4();
        dk *= -1;
        bk = bk || bk;
        double ld2 = 854.1042984663874;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok);
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = false;
</cutPoint476>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint477>
    Thought lo0 = Thought98.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 134.60875188086985;
    ok.m3(dk, dk, dk, dk);
        dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    on += dk;
    ok = ok.m4();
    dk *= -1;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 795.4297353858303;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought31.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld4 = 763.5836585341129;
</cutPoint477>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint478>
    Thought lo0 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    boolean lb1 = false;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok.m2(ok, ok, ok, ok);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m2(dk, dk, dk, dk);
        bk = dk > dk;
        bk = dk < dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld2 = 765.259693988802;
        dk *= -1;
        dk = dk + dk;
        dk = dk - dk;
        bk = bk && bk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = ok.m2();
        on -= dk;
</cutPoint478>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint479>
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 409.13026414004844;
    bk = !bk;
    double ld1 = 181.02751735407716;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    double ld2 = 741.3349284783617;
    bk = dk > dk;
    bk = bk && bk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        }
    </cutPoint479>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint480>
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    bk = bk || bk;
    Thought lo0 = Thought64.getInstance(bk, bk, bk, bk);
        boolean lb1 = false;
    double ld2 = 628.9358059045826;
    dk *= -1;
</cutPoint480>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint481>
    boolean lb0 = true;
    bk = bk || bk;
    boolean lb1 = false;
    on += dk;
    on -= dk;
    bk = bk && bk;
    dk *= -1;
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok);
</cutPoint481>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint482>
    double ld0 = 532.7962351302062;
    double ld1 = 539.489071129896;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought55.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo3 = Thought42.getInstance(bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    bk = bk && bk;
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    dk *= -1;
</cutPoint482>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint483>
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought29.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = dk > dk;
    dk *= -1;
    ok.m3(dk, dk, dk, dk);
</cutPoint483>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint484>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk > dk;
    double ld0 = 765.4293497512166;
    bk = dk < dk;
    boolean lb1 = true;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo2 = Thought52.getInstance();
    bk = !bk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought2.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    double ld4 = 531.4985992200048;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld5 = 481.7609565991296;
    ok = ok.m4();
</cutPoint484>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint485>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    dk = dk - dk;
    bk = !bk;
    bk = bk || bk;
        dk *= -1;
    on += dk;
    dk = dk + dk;
    boolean lb1 = true;
</cutPoint485>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint486>
    dk *= -1;
    bk = bk || bk;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb0 = true;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld1 = 797.4646363603781;
    bk = bk || bk;
</cutPoint486>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint487>
        bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    bk = !bk;
    bk = !bk;
    dk *= -1;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk > dk;
</cutPoint487>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint488>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    on -= dk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk || bk;
    bk = bk || bk;
    double ld1 = 403.415098618491;
    bk = bk && bk;
    bk = bk && bk;
    ok.m2(dk, dk, dk, dk);
    on -= dk;
    boolean lb2 = true;
    Thought lo3 = Thought65.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
    Thought lo5 = Thought1.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb6 = false;
</cutPoint488>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint489>
    bk = dk < dk;
    dk *= -1;
    Thought lo0 = Thought87.getInstance(ok, ok, ok, ok);
    on -= dk;
    boolean lb1 = true;
    boolean lb2 = false;
    bk = bk || bk;
    bk = !bk;
    bk = bk && bk;
    double ld3 = 926.1223692958295;
</cutPoint489>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} 
}
}
<endClass/>
class Thought14 extends Thought{
private static ArrayList<Thought14> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 777.7944135602828;
private double fd1 = 197.78290716654104;
private Thought fo0 = null;
private Thought fo1 = null;
Thought14 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought14 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought14 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought14 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought14 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought14 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought14 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought14 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought14 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought14 instance = new Thought14 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought14 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought14 instance = new Thought14 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought14 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought14 instance = new Thought14 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought14 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought14 instance = new Thought14 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought14 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought14 instance = new Thought14 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought14 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought14 instance = new Thought14 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought14 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought14 instance = new Thought14 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought14 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought14 instance = new Thought14 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint490>
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    double ld0 = 639.5826948061031;
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint490>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint491>
    double ld0 = 892.6067795312915;
    dk = dk - dk;
    double ld1 = 289.5637731987279;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb2 = true;
    bk = bk && bk;
    ok.m2();
    dk = dk - dk;
    double ld3 = 761.0172842648097;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    boolean lb4 = false;
    bk = bk || bk;
    boolean lb5 = true;
    if (bk) {
        if (bk) {
            } else {
            bk = !bk;
                        ok = ok.m4(ok, ok, ok, ok);
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk && bk;
            bk = bk || bk;
            dk *= -1;
</cutPoint491>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint492>
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = false;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint492>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint493>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought76.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 396.8769859997212;
    bk = bk && bk;
    bk = !bk;
    Thought lo3 = Thought61.getInstance(bk, bk, bk, bk);
    on -= dk;
    ok.m3();
</cutPoint493>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint494>
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought33.getInstance(bk, bk, bk, bk);
    ok.m1();
    if (bk) {
        double ld2 = 638.5046723792764;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = true;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint494>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint495>
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    if (bk) {
        ok.m2();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint495>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint496>
    bk = bk || bk;
    Thought lo0 = Thought38.getInstance(ok, ok, ok, ok);
    double ld1 = 165.6217051346717;
    double ld2 = 200.80816430571065;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    bk = bk && bk;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    double ld4 = 715.6013089808287;
    boolean lb5 = false;
    boolean lb6 = true;
</cutPoint496>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint497>
    bk = bk || bk;
    bk = bk && bk;
    dk = dk - dk;
    boolean lb0 = true;
    double ld1 = 81.22836311438554;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    double ld2 = 903.6467407160468;
    dk = dk - dk;
    if (bk) {
        ok = ok.m4();
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        bk = dk > dk;
        bk = dk > dk;
        Thought lo3 = Thought27.getInstance(ok, ok, ok, ok);
        bk = !bk;
        Thought lo4 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb5 = true;
        boolean lb6 = false;
        boolean lb7 = false;
        boolean lb8 = true;
        bk = !bk;
</cutPoint497>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint498>
    bk = !bk;
    double ld0 = 737.8108312874892;
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    double ld1 = 894.8190544846501;
    double ld2 = 318.80247774744646;
    dk = ok.m3();
    on += dk;
    dk *= -1;
    bk = dk < dk;
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    double ld3 = 50.84362670214154;
</cutPoint498>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint499>
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 734.8512533854914;
    boolean lb1 = false;
    on -= dk;
    dk *= -1;
    bk = ok.m2();
    double ld2 = 292.5104982015469;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
</cutPoint499>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint500>
    dk = ok.m3();
    Thought lo0 = Thought13.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok.m2(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        }
    Thought lo1 = Thought74.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    dk = dk + dk;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought96.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint500>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint501>
    on += dk;
    dk = dk + dk;
    bk = bk || bk;
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        dk *= -1;
        bk = bk || bk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = true;
        Thought lo2 = Thought13.getInstance(bk, bk, bk, bk);
        dk *= -1;
        bk = !bk;
        bk = ok.m2();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        dk *= -1;
</cutPoint501>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint502>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = false;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = false;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = false;
    dk *= -1;
    ok = ok.m4();
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    bk = bk && bk;
    bk = !bk;
    dk *= -1;
</cutPoint502>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint503>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    on += dk;
    double ld0 = 826.8288565088035;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = bk || bk;
        dk = dk - dk;
        bk = dk > dk;
        Thought lo2 = Thought15.getInstance(ok, ok, ok, ok);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld3 = 26.85298886426091;
        dk = dk + dk;
        Thought lo4 = Thought34.getInstance(bk, bk, bk, bk);
        ok = ok.m4();
        on -= dk;
        boolean lb5 = false;
</cutPoint503>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint504>
    boolean lb0 = true;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 61.51172877657802;
    ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = ok.m2(dk, dk, dk, dk);
        bk = dk > dk;
        if (bk) {
            dk = dk + dk;
            bk = bk || bk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint504>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint505>
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    dk = dk + dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = true;
    boolean lb1 = false;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint505>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint506>
    bk = bk && bk;
    bk = bk || bk;
    boolean lb0 = true;
    on += dk;
    boolean lb1 = true;
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo2 = Thought84.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
    boolean lb3 = true;
    dk = dk + dk;
    Thought lo4 = Thought2.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    bk = !bk;
</cutPoint506>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint507>
    dk = dk + dk;
    double ld0 = 666.3871888344582;
    Thought lo1 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = dk + dk;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
        boolean lb2 = true;
</cutPoint507>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint508>
    bk = dk > dk;
    Thought lo0 = Thought40.getInstance(bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    bk = bk || bk;
    Thought lo1 = Thought93.getInstance();
    dk *= -1;
    boolean lb2 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb3 = false;
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    Thought lo5 = Thought15.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint508>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint509>
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    dk = ok.m3();
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 92.49468377005724;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought86.getInstance(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    boolean lb2 = false;
    Thought lo3 = Thought75.getInstance();
    bk = bk && bk;
    dk *= -1;
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo4 = Thought6.getInstance(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint509>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint510>
    double ld0 = 332.28715514961283;
    bk = !bk;
    dk = dk + dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    Thought lo1 = Thought23.getInstance(bk, bk, bk, bk);
    Thought lo2 = Thought96.getInstance();
    bk = !bk;
    Thought lo3 = Thought49.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint510>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint511>
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 268.9893754237186;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb2 = false;
    Thought lo3 = Thought62.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    bk = ok.m2(bk, bk, bk, bk);
    double ld5 = 187.81959010607102;
    ok = ok.m4();
    dk *= -1;
    bk = dk > dk;
    bk = !bk;
    dk = dk - dk;
    dk = dk - dk;
    boolean lb6 = false;
    </cutPoint511>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint512>
    Thought lo0 = Thought74.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    on += dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    on -= dk;
    Thought lo3 = Thought45.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo4 = Thought80.getInstance(dk, dk, dk, dk);
    boolean lb5 = true;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb6 = true;
    boolean lb7 = false;
    ok.m3(bk, bk, bk, bk);
    Thought lo8 = Thought94.getInstance();
        if (bk) {
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint512>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint513>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
    on += dk;
    double ld1 = 62.59599417307402;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo2 = Thought45.getInstance();
    double ld3 = 973.376243196133;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk - dk;
    bk = bk && bk;
    bk = dk < dk;
    boolean lb4 = true;
    bk = bk || bk;
    boolean lb5 = false;
    double ld6 = 192.141948661657;
    bk = !bk;
    dk = dk + dk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
</cutPoint513>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint514>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    Thought lo0 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    bk = bk || bk;
    boolean lb2 = true;
    double ld3 = 545.5892435795207;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb4 = false;
    bk = ok.m2();
    double ld5 = 204.50989378779857;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
</cutPoint514>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint515>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo1 = Thought91.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    double ld2 = 624.7913798384135;
    ok = ok.m4();
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        Thought lo3 = Thought33.getInstance(dk, dk, dk, dk);
        dk *= -1;
        bk = !bk;
        Thought lo4 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb5 = true;
        bk = !bk;
        ok = ok.m4(bk, bk, bk, bk);
        dk = ok.m3();
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = !bk;
        dk *= -1;
        boolean lb6 = true;
        bk = bk || bk;
</cutPoint515>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint516>
    bk = !bk;    boolean lb0 = true;    dk *= -1;    dk = ok.m3(ok, ok, ok, ok);    bk = bk || bk;    bk = ok.m2();    bk = ok.m2(dk, dk, dk, dk);    boolean lb4 = false;    ok.m1(bk, bk, bk, bk);    boolean lb5 = false;    on -= dk;    bk = dk > dk;    Thought lo6 = Thought56.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);    bk = !bk;</cutPoint516>Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint517>
    boolean lb0 = true;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        double ld1 = 511.27093611795465;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        }
    boolean lb2 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint517>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint518>
    ok.m2();
    Thought lo0 = Thought13.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
        bk = dk < dk;
    if (bk) {
        bk = dk < dk;
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk - dk;
        Thought lo1 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        Thought lo2 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        boolean lb3 = false;
        dk = dk - dk;
        Thought lo4 = Thought28.getInstance();
        double ld5 = 31.84479408163908;
        for(int j=0; j<10; j++){
            bk = bk || bk;
</cutPoint518>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint519>
    Thought lo0 = Thought41.getInstance(dk, dk, dk, dk);
    double ld1 = 73.70065445846836;
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    boolean lb2 = true;
    on -= dk;
    dk = dk + dk;
    bk = bk && bk;
</cutPoint519>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint520>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought49.getInstance();
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = true;
    bk = dk > dk;
    double ld2 = 600.5606240479326;
    ok.m3(bk, bk, bk, bk);
    boolean lb3 = false;
    dk *= -1;
    bk = bk && bk;
    bk = dk > dk;
</cutPoint520>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint521>
    dk = dk - dk;
    double ld0 = 304.7128448857072;
    bk = bk && bk;
    bk = dk < dk;
    dk = dk - dk;
    boolean lb1 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    boolean lb2 = true;
    dk = dk + dk;
    double ld3 = 926.1478116312795;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = false;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 300.6249525834202;
    bk = dk < dk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb6 = false;
    ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint521>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint522>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    double ld0 = 927.1586144588802;
    dk = dk - dk;
    bk = dk > dk;
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint522>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint523>
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk > dk;
    bk = ok.m2();
</cutPoint523>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint524>
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    bk = bk || bk;
        on -= dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk && bk;
    double ld0 = 911.6720703316848;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    </cutPoint524>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought15 extends Thought{
private static ArrayList<Thought15> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 497.04783325518105;
private double fd1 = 362.6927665850862;
private Thought fo0 = null;
private Thought fo1 = null;
Thought15 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought15 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought15 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought15 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought15 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought15 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought15 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought15 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought15 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought15 instance = new Thought15 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought15 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought15 instance = new Thought15 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought15 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought15 instance = new Thought15 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought15 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought15 instance = new Thought15 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought15 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought15 instance = new Thought15 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought15 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought15 instance = new Thought15 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought15 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought15 instance = new Thought15 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought15 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought15 instance = new Thought15 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint525>
    double ld0 = 443.1241085588185;
    dk *= -1;
    Thought lo1 = Thought28.getInstance();
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo3 = Thought82.getInstance(bk, bk, bk, bk);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk && bk;
    bk = bk && bk;
</cutPoint525>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint526>
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
    Thought lo0 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        Thought lo1 = Thought42.getInstance(ok, ok, ok, ok);
        if (bk) {
            dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb2 = true;
            dk = ok.m3();
            ok = ok.m4(dk, dk, dk, dk);
            bk = !bk;
            boolean lb3 = false;
            boolean lb4 = true;
</cutPoint526>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint527>
    boolean lb0 = false;
    boolean lb1 = false;
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought66.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok);
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
        bk = dk > dk;
    bk = !bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint527>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint528>
    bk = bk && bk;
    dk = dk + dk;
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    double ld0 = 495.90668019463334;
    on -= dk;
    double ld1 = 5.9972584979234576;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    bk = dk < dk;
    on += dk;
    Thought lo2 = Thought47.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    bk = dk > dk;
</cutPoint528>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint529>
    dk = ok.m3();
    bk = !bk;
    dk *= -1;
    boolean lb0 = true;
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 385.03639177040975;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = false;
    bk = dk > dk;
    boolean lb4 = true;
    bk = bk || bk;
    bk = bk && bk;
    on += dk;
    Thought lo5 = Thought64.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint529>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint530>
    Thought lo0 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    double ld1 = 294.6123247309987;
        dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = bk && bk;
        }
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo3 = Thought76.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint530>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint531>
    double ld0 = 650.5675922045081;
    boolean lb1 = false;
    Thought lo2 = Thought39.getInstance();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 688.9404546999401;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought78.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld5 = 720.7790095886633;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = !bk;
    boolean lb6 = true;
    bk = dk > dk;
    Thought lo7 = Thought68.getInstance(dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
</cutPoint531>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint532>
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
    boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
</cutPoint532>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint533>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
        bk = bk && bk;
    dk *= -1;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb0 = true;
    bk = dk < dk;
    bk = dk < dk;
</cutPoint533>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint534>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    on -= dk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought5.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        double ld1 = 685.1686821338084;
        ok = ok.m4();
        bk = bk || bk;
        bk = dk < dk;
        dk = dk + dk;
        dk = dk + dk;
</cutPoint534>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint535>
    double ld0 = 649.8936410738271;
    dk = dk + dk;
    Thought lo1 = Thought96.getInstance(dk, dk, dk, dk);
    bk = !bk;
    for(int j=0; j<10; j++){
        bk = dk < dk;
        dk = dk + dk;
        bk = ok.m2(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        Thought lo2 = Thought86.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok);
        Thought lo3 = Thought75.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1();
        ok = ok.m4(dk, dk, dk, dk);
        ok.m2(bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        double ld4 = 646.0666193520593;
        Thought lo5 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb6 = true;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint535>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint536>
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    boolean lb0 = true;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    dk = dk + dk;
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk + dk;
    bk = dk > dk;
    double ld1 = 763.41688258742;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint536>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint537>
    bk = dk > dk;
    dk *= -1;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    if (bk) {
        on += dk;
        if (bk) {
            double ld0 = 102.78246535830412;
            on += dk;
            for(int j=0; j<10; j++){
                ok = ok.m4(bk, bk, bk, bk);
                on += dk;
                bk = dk > dk;
                if (bk) {
                    on -= dk;
                    dk = dk - dk;
                    dk *= -1;
                    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
                    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
                    double ld1 = 720.4865332882227;
</cutPoint537>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint538>
    double ld0 = 397.76074708459953;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    if (bk) {
        Thought lo1 = Thought32.getInstance(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = dk < dk;
        bk = dk > dk;
        ok.m2();
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb2 = true;
        bk = dk > dk;
        dk = ok.m3(bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            if (bk) {
</cutPoint538>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint539>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought18.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    bk = bk || bk;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb1 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 456.23147789998774;
    dk = dk - dk;
    dk = dk - dk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint539>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint540>
    bk = !bk;
    boolean lb0 = false;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 251.96968198845823;
    dk = dk - dk;
    boolean lb3 = true;
    Thought lo4 = Thought62.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    dk *= -1;
    on += dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3();
    bk = !bk;
    dk = dk - dk;
    double ld5 = 60.13473878589909;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo6 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint540>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint541>
    ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo0 = Thought81.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought95.getInstance(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb2 = true;
    bk = dk > dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb3 = false;
    Thought lo4 = Thought70.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint541>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint542>
    dk = ok.m3();
    if (bk) {
        ok.m3(dk, dk, dk, dk);
        double ld0 = 967.7977547945408;
        } else if (bk) {
        double ld1 = 466.2042389727389;
        bk = bk && bk;
        dk = ok.m3(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        Thought lo2 = Thought94.getInstance(ok, ok, ok, ok);
        on -= dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        bk = dk > dk;
        dk *= -1;
        boolean lb3 = true;
        bk = !bk;
</cutPoint542>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint543>
    ok = ok.m4();
    Thought lo0 = Thought36.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb1 = false;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    boolean lb3 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    on -= dk;
    bk = bk && bk;
    bk = bk && bk;
    boolean lb4 = false;
    dk = dk + dk;
    on += dk;
    bk = !bk;
    bk = bk || bk;
    boolean lb5 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld6 = 172.71918048296695;
</cutPoint543>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint544>
    double ld0 = 132.7929526065904;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought55.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
    bk = bk && bk;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
        bk = bk && bk;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint544>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint545>
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            double ld0 = 773.7218536540206;
    bk = ok.m2();
    Thought lo1 = Thought97.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
</cutPoint545>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint546>
    dk *= -1;
    on += dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk);
    double ld0 = 39.10757733953427;
</cutPoint546>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint547>
    double ld0 = 312.7391363690667;
    on += dk;
    bk = bk && bk;
    bk = bk || bk;
    dk = dk + dk;
    bk = dk < dk;
    if (bk) {
        bk = bk || bk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk || bk;
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint547>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint548>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 876.0603672151362;
    boolean lb1 = false;
    on += dk;
</cutPoint548>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint549>
    Thought lo0 = Thought96.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo1 = Thought85.getInstance(bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    if (bk) {
        dk *= -1;
        on -= dk;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        ok.m3(dk, dk, dk, dk);
        bk = !bk;
        Thought lo2 = Thought81.getInstance(bk, bk, bk, bk);
        bk = dk < dk;
        Thought lo3 = Thought18.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        Thought lo4 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb5 = true;
        dk *= -1;
</cutPoint549>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint550>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
</cutPoint550>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint551>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk && bk;
    dk = ok.m3();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    ok.m1(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo2 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo3 = Thought50.getInstance(ok, ok, ok, ok);
        bk = bk || bk;
        Thought lo4 = Thought41.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb5 = false;
</cutPoint551>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint552>
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4();
    bk = !bk;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 785.5857260894762;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb3 = true;
    on -= dk;
    bk = !bk;
    bk = bk && bk;
    bk = dk < dk;
    dk = dk - dk;
    Thought lo4 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    bk = dk > dk;
    boolean lb5 = true;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb6 = true;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint552>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint553>
    bk = !bk;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 405.1025215010871;
    boolean lb1 = true;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4();
    dk = dk - dk;
    bk = bk && bk;
</cutPoint553>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint554>
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = dk < dk;
    boolean lb1 = true;
    bk = !bk;
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    Thought lo2 = Thought87.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint554>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint555>
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought0.getInstance(bk, bk, bk, bk);
    boolean lb2 = true;
    bk = dk < dk;
    dk *= -1;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint555>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint556>
    bk = dk > dk;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        dk *= -1;
        Thought lo1 = Thought34.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld2 = 945.263668179259;
        dk = dk - dk;
        ok = ok.m4();
        Thought lo3 = Thought75.getInstance(dk, dk, dk, dk);
        bk = bk && bk;
        }
    bk = dk > dk;
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb4 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
</cutPoint556>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint557>
    on += dk;
    double ld0 = 587.1247927597137;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    boolean lb2 = false;
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk - dk;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    boolean lb3 = true;
    dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = !bk;
    Thought lo4 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint557>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint558>
    dk = dk - dk;
        boolean lb0 = true;
    double ld1 = 542.670353513662;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought1.getInstance(ok, ok, ok, ok);
    on -= dk;
    bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint558>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint559>
    bk = ok.m2();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    on -= dk;
    double ld0 = 929.1172533109971;
    dk *= -1;
    dk = dk + dk;
</cutPoint559>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought16 extends Thought{
private static ArrayList<Thought16> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 285.79917218925345;
private double fd1 = 970.3097253433072;
private Thought fo0 = null;
private Thought fo1 = null;
Thought16 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought16 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought16 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought16 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought16 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought16 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought16 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought16 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought16 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought16 instance = new Thought16 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought16 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought16 instance = new Thought16 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought16 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought16 instance = new Thought16 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought16 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought16 instance = new Thought16 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought16 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought16 instance = new Thought16 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought16 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought16 instance = new Thought16 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought16 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought16 instance = new Thought16 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought16 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought16 instance = new Thought16 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint560>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    Thought lo0 = Thought40.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo1 = Thought74.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    bk = bk || bk;
</cutPoint560>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint561>
    bk = dk > dk;
    boolean lb0 = false;
    dk = dk + dk;
    dk = ok.m3();
    bk = !bk;
    dk *= -1;
    bk = bk || bk;
    bk = !bk;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 587.8059210359615;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint561>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint562>
    dk *= -1;
    bk = bk && bk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb1 = true;
    dk = dk + dk;
    Thought lo2 = Thought46.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
        boolean lb3 = true;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo4 = Thought74.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo5 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on += dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo6 = Thought98.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint562>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint563>
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo0 = Thought63.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    dk *= -1;
    dk = dk - dk;
    bk = bk || bk;
        boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
</cutPoint563>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint564>
    ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought13.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 134.66643961166892;
    boolean lb2 = false;
    Thought lo3 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    on -= dk;
    boolean lb4 = false;
    on -= dk;
    dk *= -1;
    boolean lb5 = true;
        dk = ok.m3(dk, dk, dk, dk);
    double ld6 = 960.0905836503814;
    bk = bk || bk;
    bk = dk > dk;
    dk = dk - dk;
    Thought lo7 = Thought92.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
</cutPoint564>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint565>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb0 = true;
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 625.400425510051;
    Thought lo3 = Thought23.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = ok.m2();
</cutPoint565>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint566>
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    double ld0 = 150.66965212619817;
    dk = dk + dk;
    Thought lo1 = Thought27.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    double ld4 = 663.8204710709446;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo5 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint566>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint567>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
        ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb1 = true;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo2 = Thought58.getInstance();
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 497.9234820933701;
    dk *= -1;
    dk *= -1;
</cutPoint567>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint568>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 711.1052536122131;
    bk = dk < dk;
    dk = dk - dk;
    double ld1 = 682.0033093154838;
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk < dk;
        dk = ok.m3();
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
        dk = ok.m3(bk, bk, bk, bk);
        double ld2 = 126.06554989015665;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        bk = bk && bk;
        dk = dk - dk;
        bk = !bk;
        bk = bk && bk;
        boolean lb3 = true;
        bk = bk || bk;
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint568>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint569>
    bk = !bk;
    double ld0 = 808.6837022579081;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought92.getInstance();
    dk = dk + dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint569>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint570>
    dk *= -1;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    dk = dk - dk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought33.getInstance();
    dk = dk + dk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    ok.m2(bk, bk, bk, bk);
</cutPoint570>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint571>
        bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    on += dk;
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
</cutPoint571>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint572>
    bk = dk > dk;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    Thought lo0 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    bk = dk < dk;
    bk = bk || bk;
    bk = dk > dk;
    dk = dk + dk;
    boolean lb2 = true;
</cutPoint572>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint573>
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
        ok.m2();
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint573>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint574>
    boolean lb0 = true;
    boolean lb1 = false;
    ok.m2(bk, bk, bk, bk);
    dk *= -1;
    boolean lb2 = true;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    double ld3 = 423.6763295410338;
    boolean lb4 = true;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        bk = !bk;
        dk = dk - dk;
        dk *= -1;
        dk = dk - dk;
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        bk = bk || bk;
        bk = dk < dk;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok);
        double ld5 = 36.08001553288954;
        bk = !bk;
</cutPoint574>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint575>
    Thought lo0 = Thought77.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought75.getInstance();
    bk = dk > dk;
    boolean lb2 = false;
    double ld3 = 521.5569440987073;
    bk = dk < dk;
    Thought lo4 = Thought64.getInstance(dk, dk, dk, dk);
    double ld5 = 454.820503469125;
    ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld6 = 664.5190159688023;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    bk = !bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld7 = 95.95103280851913;
    bk = dk > dk;
    double ld8 = 402.93439727969525;
    double ld9 = 477.2307742193022;
    bk = bk || bk;
    Thought lo10 = Thought38.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint575>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint576>
    bk = bk || bk;
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb0 = false;
    boolean lb1 = false;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
        double ld3 = 335.2100949020601;
    dk *= -1;
    boolean lb4 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint576>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint577>
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    Thought lo0 = Thought47.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    dk = dk + dk;
    Thought lo1 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 202.55413138880223;
    dk *= -1;
    Thought lo3 = Thought56.getInstance();
    Thought lo4 = Thought31.getInstance(dk, dk, dk, dk);
</cutPoint577>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint578>
    boolean lb0 = true;
    bk = ok.m2(bk, bk, bk, bk);
    double ld1 = 824.7749612992145;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought43.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb3 = true;
    bk = dk < dk;
    boolean lb4 = false;
    ok = ok.m4(bk, bk, bk, bk);
    double ld5 = 980.9852940261651;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    for(int j=0; j<10; j++){
</cutPoint578>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint579>
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 435.53253673324076;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 86.15088090080755;
    on -= dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk = dk - dk;
        boolean lb2 = false;
        bk = dk > dk;
        Thought lo3 = Thought28.getInstance();
        dk = dk + dk;
        }
    bk = !bk;
</cutPoint579>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint580>
    dk = dk + dk;
    on += dk;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
    bk = !bk;
    bk = dk < dk;
    bk = dk > dk;
        bk = !bk;
    dk *= -1;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    boolean lb0 = true;
    dk = dk + dk;
</cutPoint580>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint581>
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 386.84963617437126;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        on -= dk;
        Thought lo1 = Thought89.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld2 = 588.8714690243178;
        dk *= -1;
        bk = dk > dk;
        on += dk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        }
    bk = bk && bk;
    bk = dk < dk;
    boolean lb3 = false;
    Thought lo4 = Thought25.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint581>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint582>
    bk = dk < dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought36.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought59.getInstance(ok, ok, ok, ok);
    dk *= -1;
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    boolean lb3 = true;
</cutPoint582>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint583>
    bk = bk || bk;
    double ld0 = 559.0618079068773;
    boolean lb1 = false;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = dk > dk;
        dk = ok.m3(bk, bk, bk, bk);
        Thought lo2 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        dk = dk - dk;
        double ld3 = 364.5607240338455;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint583>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint584>
    boolean lb0 = true;
    Thought lo1 = Thought72.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    boolean lb3 = false;
    ok = ok.m4();
    bk = dk < dk;
    boolean lb4 = false;
    dk = ok.m3(dk, dk, dk, dk);
        dk = dk + dk;
    bk = bk && bk;
</cutPoint584>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint585>
    double ld0 = 606.3382157432918;
    double ld1 = 924.2371776258872;
    boolean lb2 = true;
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk && bk;
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint585>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint586>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = !bk;
    bk = bk || bk;
    Thought lo1 = Thought95.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo2 = Thought28.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    double ld3 = 933.2732497339017;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb4 = false;
    boolean lb5 = false;
    bk = bk && bk;
    bk = bk && bk;
</cutPoint586>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint587>
    boolean lb0 = true;
    boolean lb1 = true;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo2 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought74.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint587>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint588>
    dk = dk - dk;
    on -= dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk > dk;
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        Thought lo0 = Thought53.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk = dk + dk;
        Thought lo1 = Thought4.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = !bk;
</cutPoint588>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint589>
    bk = bk || bk;
    dk = dk - dk;
    bk = !bk;
    Thought lo0 = Thought37.getInstance();
    bk = bk && bk;
    bk = dk < dk;
    Thought lo1 = Thought14.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    double ld2 = 387.64633998381373;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint589>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint590>
    for(int j=0; j<10; j++){
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk = ok.m3();
        ok.m2(dk, dk, dk, dk);
        dk *= -1;
        bk = ok.m2(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        Thought lo0 = Thought78.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint590>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint591>
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    double ld0 = 208.1391266286137;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        ok.m1();
        Thought lo1 = Thought68.getInstance(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = !bk;
        Thought lo2 = Thought25.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        double ld3 = 361.9792101665497;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint591>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint592>
    on += dk;
    boolean lb0 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    boolean lb1 = false;
    Thought lo2 = Thought38.getInstance(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb3 = false;
    Thought lo4 = Thought40.getInstance();
    bk = !bk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint592>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint593>
    bk = !bk;
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
        bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 57.222553268884674;
    dk = dk - dk;
    dk *= -1;
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
</cutPoint593>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint594>
    dk = dk - dk;
    bk = !bk;
    boolean lb0 = true;
    dk = dk - dk;
    Thought lo1 = Thought87.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb2 = true;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo3 = Thought5.getInstance();
    boolean lb4 = false;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
</cutPoint594>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought17 extends Thought{
private static ArrayList<Thought17> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 487.28228510039736;
private double fd1 = 316.1887690484678;
private Thought fo0 = null;
private Thought fo1 = null;
Thought17 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought17 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought17 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought17 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought17 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought17 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought17 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought17 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought17 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought17 instance = new Thought17 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought17 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought17 instance = new Thought17 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought17 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought17 instance = new Thought17 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought17 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought17 instance = new Thought17 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought17 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought17 instance = new Thought17 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought17 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought17 instance = new Thought17 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought17 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought17 instance = new Thought17 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought17 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought17 instance = new Thought17 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint595>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    boolean lb1 = true;
    ok.m1(dk, dk, dk, dk);
    double ld2 = 851.354555185545;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo3 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    bk = bk || bk;
    double ld4 = 771.738569324892;
    on -= dk;
    ok.m1();
    for(int j=0; j<10; j++){
        Thought lo5 = Thought52.getInstance(dk, dk, dk, dk);
        dk = dk + dk;
</cutPoint595>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint596>
    dk *= -1;
    bk = dk < dk;
    double ld0 = 770.7566415490011;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = dk < dk;
    boolean lb2 = true;
    boolean lb3 = false;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint596>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint597>
    bk = bk || bk;
    Thought lo0 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo1 = Thought93.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on += dk;
    bk = dk > dk;
    double ld2 = 167.90985864467666;
    bk = ok.m2();
    boolean lb3 = true;
    on -= dk;
    bk = !bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint597>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint598>
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    double ld0 = 278.53665370804396;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    bk = dk < dk;
    if (bk) {
        boolean lb2 = false;
        dk = dk - dk;
        double ld3 = 224.09566647957215;
        bk = dk < dk;
        boolean lb4 = false;
        bk = bk || bk;
        bk = dk < dk;
        boolean lb5 = false;
        bk = !bk;
        bk = bk && bk;
        Thought lo6 = Thought47.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
</cutPoint598>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint599>
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    dk *= -1;
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint599>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint600>
    bk = bk && bk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 289.7414637023078;
    bk = bk && bk;
    Thought lo1 = Thought89.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld2 = 14.150232692568231;
    dk *= -1;
    dk = ok.m3();
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    bk = bk && bk;
    Thought lo3 = Thought77.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb4 = false;
    bk = bk && bk;
    dk *= -1;
    double ld5 = 202.7727270638395;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on += dk;
</cutPoint600>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint601>
    dk = dk - dk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok);
    boolean lb0 = true;
    Thought lo1 = Thought95.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    boolean lb2 = true;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought23.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m1();
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk < dk;
</cutPoint601>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint602>
    Thought lo0 = Thought17.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb3 = true;
    double ld4 = 511.42509131142816;
    dk *= -1;
    boolean lb5 = true;
    bk = bk || bk;
    on += dk;
    on -= dk;
    Thought lo6 = Thought62.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint602>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint603>
    boolean lb0 = true;
    boolean lb1 = false;
    bk = dk > dk;
    on += dk;
    boolean lb2 = true;
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb3 = true;
        dk = dk + dk;
        bk = bk || bk;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        dk *= -1;
        dk = dk + dk;
        Thought lo4 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
</cutPoint603>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint604>
    bk = bk || bk;
    dk = dk - dk;
    boolean lb0 = true;
    boolean lb1 = false;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = dk < dk;
    Thought lo4 = Thought29.getInstance();
        boolean lb5 = false;
    dk *= -1;
</cutPoint604>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint605>
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    on += dk;
    Thought lo0 = Thought39.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    double ld2 = 640.9173203544614;
    double ld3 = 402.014175134757;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    Thought lo4 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    dk = dk + dk;
    boolean lb5 = false;
    Thought lo6 = Thought43.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        Thought lo7 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint605>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint606>
    dk *= -1;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        dk *= -1;
        dk = dk + dk;
        double ld0 = 918.741250903276;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb1 = true;
        Thought lo2 = Thought37.getInstance(ok, ok, ok, ok);
        Thought lo3 = Thought24.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk *= -1;
</cutPoint606>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint607>
    ok.m2();
    ok.m1(dk, dk, dk, dk);
    bk = bk || bk;
    bk = !bk;
    dk = dk - dk;
    bk = bk && bk;
    double ld0 = 616.0559174641402;
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = true;
</cutPoint607>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint608>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo0 = Thought24.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought3.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    ok.m3(dk, dk, dk, dk);
    boolean lb2 = false;
    Thought lo3 = Thought85.getInstance(bk, bk, bk, bk);
</cutPoint608>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint609>
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    Thought lo0 = Thought50.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 499.13100621248753;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    boolean lb2 = false;
    double ld3 = 221.400500405767;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    ok = ok.m4();
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo5 = Thought32.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint609>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint610>
    bk = ok.m2();
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    double ld0 = 27.9053998567584;
    dk = ok.m3(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
</cutPoint610>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint611>
    Thought lo0 = Thought87.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk - dk;
    dk = dk + dk;
    bk = !bk;
    Thought lo1 = Thought32.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1();
    Thought lo2 = Thought68.getInstance(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb3 = true;
    dk = dk + dk;
    double ld4 = 113.20769725978002;
    dk = dk - dk;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint611>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint612>
    double ld0 = 569.5870938141703;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    boolean lb1 = true;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought70.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3();
    dk *= -1;
    bk = dk > dk;
    boolean lb3 = false;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint612>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint613>
    Thought lo0 = Thought1.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 763.4618483235361;
    boolean lb2 = true;
    boolean lb3 = true;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    bk = dk > dk;
    boolean lb4 = true;
    ok.m3(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint613>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint614>
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    bk = dk > dk;
    on -= dk;
    Thought lo0 = Thought69.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    double ld1 = 74.48885458002385;
    Thought lo2 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
    double ld3 = 436.1701321843264;
</cutPoint614>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint615>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk *= -1;
    ok = ok.m4();
        on += dk;
    bk = bk && bk;
    double ld2 = 235.68720569185987;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    Thought lo3 = Thought53.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb4 = false;
    on += dk;
    Thought lo5 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
</cutPoint615>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint616>
    dk *= -1;
    Thought lo0 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 209.51483481836684;
    bk = bk && bk;
    dk = ok.m3();
    dk *= -1;
    bk = !bk;
    dk = dk + dk;
    Thought lo2 = Thought77.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        dk = dk + dk;
        bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        bk = !bk;
</cutPoint616>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint617>
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    on -= dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
        bk = bk || bk;
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    double ld0 = 198.57412590431403;
    dk = dk - dk;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint617>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint618>
    ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    if (bk) {
        bk = dk < dk;
        boolean lb0 = true;
        dk *= -1;
        double ld1 = 52.924722794751446;
        bk = dk > dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk *= -1;
        bk = bk && bk;
        bk = dk < dk;
        dk = ok.m3();
        dk = dk + dk;
        on -= dk;
        dk = dk - dk;
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
        if (bk) {
            dk = dk + dk;
            ok = ok.m4(bk, bk, bk, bk);
            dk = dk - dk;
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
            ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk || bk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok);
</cutPoint618>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint619>
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = ok.m2(ok, ok, ok, ok);
        bk = !bk;
        bk = dk > dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        bk = bk || bk;
</cutPoint619>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint620>
    bk = bk && bk;
    double ld0 = 99.85799185775274;
    Thought lo1 = Thought9.getInstance(dk, dk, dk, dk);
    on += dk;
    dk = dk + dk;
    dk *= -1;
    bk = dk > dk;
    dk *= -1;
    bk = bk && bk;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint620>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint621>
    ok.m1(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = !bk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb1 = true;
    bk = bk || bk;
    bk = !bk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk < dk;
        bk = bk || bk;
        double ld2 = 810.9216040017415;
        Thought lo3 = Thought62.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        bk = dk < dk;
        on += dk;
        Thought lo4 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint621>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint622>
        boolean lb0 = false;
    dk *= -1;
    Thought lo1 = Thought33.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    on -= dk;
    on += dk;
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo2 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought3.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint622>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint623>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 96.97027583023777;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    double ld1 = 122.96462957323641;
    dk = dk - dk;
    dk *= -1;
        bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
    bk = bk && bk;
    dk = dk - dk;
    bk = dk < dk;
</cutPoint623>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint624>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = ok.m2(ok, ok, ok, ok);
        boolean lb0 = true;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        bk = dk < dk;
        ok = ok.m4();
        dk *= -1;
        dk = dk + dk;
        boolean lb1 = true;
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb2 = false;
        ok.m1(bk, bk, bk, bk);
        double ld3 = 665.07531349842;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb4 = true;
        double ld5 = 74.71420687582469;
        }
    ok.m2(ok, ok, ok, ok);
    boolean lb6 = true;
    bk = dk > dk;
</cutPoint624>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint625>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought87.getInstance();
    ok.m2(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    bk = !bk;
</cutPoint625>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint626>
    bk = ok.m2();
    for(int j=0; j<10; j++){
        bk = ok.m2(dk, dk, dk, dk);
        Thought lo0 = Thought13.getInstance(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 418.0086117496797;
        boolean lb2 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint626>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint627>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought63.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo2 = Thought74.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    Thought lo3 = Thought33.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
</cutPoint627>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint628>
    bk = !bk;
    bk = dk > dk;
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought59.getInstance(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint628>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint629>
    bk = bk && bk;
    double ld0 = 619.4114716745987;
    boolean lb1 = true;
    ok = ok.m4();
    on -= dk;
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    Thought lo2 = Thought79.getInstance(bk, bk, bk, bk);
    double ld3 = 857.7121497600123;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
    boolean lb4 = true;
    bk = !bk;
    double ld5 = 17.30466904399868;
    dk = dk + dk;
    bk = dk < dk;
</cutPoint629>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought18 extends Thought{
private static ArrayList<Thought18> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 40.0789730243422;
private double fd1 = 3.652789878102918;
private Thought fo0 = null;
private Thought fo1 = null;
Thought18 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought18 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought18 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought18 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought18 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought18 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought18 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought18 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought18 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought18 instance = new Thought18 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought18 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought18 instance = new Thought18 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought18 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought18 instance = new Thought18 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought18 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought18 instance = new Thought18 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought18 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought18 instance = new Thought18 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought18 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought18 instance = new Thought18 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought18 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought18 instance = new Thought18 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought18 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought18 instance = new Thought18 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint630>
    double ld0 = 136.31129475700743;
    on += dk;
    Thought lo1 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
        on -= dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    boolean lb3 = false;
    ok.m1(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    boolean lb4 = true;
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    </cutPoint630>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint631>
    double ld0 = 384.55156681596674;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought55.getInstance(ok, ok, ok, ok);
    double ld2 = 877.1378406042692;
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought81.getInstance();
    boolean lb5 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo6 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
</cutPoint631>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint632>
    dk *= -1;
        Thought lo0 = Thought53.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought70.getInstance();
    double ld2 = 202.87584785625444;
    dk = dk + dk;
    boolean lb3 = false;
    boolean lb4 = true;
    dk = dk + dk;
    dk = dk - dk;
    boolean lb5 = true;
    if (bk) {
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk);
        ok.m1(bk, bk, bk, bk);
        dk *= -1;
        } else {
        bk = dk > dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint632>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint633>
    boolean lb0 = true;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = true;
        dk *= -1;
        boolean lb2 = false;
        bk = dk < dk;
        on -= dk;
        dk *= -1;
        boolean lb3 = true;
        ok.m1();
        bk = bk && bk;
        boolean lb4 = true;
        dk *= -1;
        bk = bk && bk;
        double ld5 = 844.7725367394594;
        bk = bk && bk;
        bk = !bk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk > dk;
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint633>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint634>
    bk = dk > dk;
    bk = dk < dk;
    bk = dk < dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought50.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought82.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought82.getInstance();
    double ld3 = 120.12193327455567;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
</cutPoint634>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint635>
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = false;
    ok = ok.m4();
    dk = dk - dk;
    boolean lb2 = true;
    boolean lb3 = false;
    dk = ok.m3(dk, dk, dk, dk);
    double ld4 = 453.2992787276425;
    bk = !bk;
    double ld5 = 999.7296045360158;
    dk = dk - dk;
    dk = dk + dk;
    double ld6 = 771.3919085116968;
    bk = dk > dk;
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint635>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint636>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought82.getInstance(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok.m1(dk, dk, dk, dk);
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint636>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint637>
    dk *= -1;
    bk = dk > dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
    Thought lo0 = Thought13.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = true;
    bk = dk < dk;
    bk = bk || bk;
    bk = dk < dk;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4();
    bk = bk && bk;
    bk = bk || bk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    double ld2 = 847.0281615715356;
    dk = dk + dk;
    dk = dk - dk;
    </cutPoint637>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint638>
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        double ld0 = 763.8476724686284;
</cutPoint638>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint639>
    double ld0 = 355.6715278275937;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought88.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk + dk;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo4 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    if (bk) {
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
</cutPoint639>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint640>
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    if (bk) {
        if (bk) {
            dk = dk + dk;
            ok = ok.m4(dk, dk, dk, dk);
            } else if (bk) {
            bk = dk < dk;
            on -= dk;
            dk = dk - dk;
            double ld0 = 652.8933034536722;
            dk = ok.m3(bk, bk, bk, bk);
            Thought lo1 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = !bk;
            dk = dk - dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk < dk;
            bk = dk > dk;
            for(int j=0; j<10; j++){
                bk = !bk;
                bk = bk || bk;
                on += dk;
                ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
                double ld2 = 611.3550141399576;
                dk = ok.m3(ok, ok, ok, ok);
</cutPoint640>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint641>
    Thought lo0 = Thought18.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb1 = true;
    boolean lb2 = true;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    boolean lb3 = true;
    dk = dk + dk;
    double ld4 = 848.8422885909857;
</cutPoint641>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint642>
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok.m3();
    bk = dk > dk;
    dk = dk + dk;
    bk = dk > dk;
    Thought lo1 = Thought37.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    dk *= -1;
    Thought lo2 = Thought98.getInstance(bk, bk, bk, bk);
    on -= dk;
</cutPoint642>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint643>
        double ld0 = 830.2348418656779;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 361.2159735575244;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = bk && bk;
    on += dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    double ld3 = 495.69320781828856;
    boolean lb4 = true;
    dk = dk - dk;
    dk = dk - dk;
    bk = dk > dk;
    bk = bk || bk;
    Thought lo5 = Thought1.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb6 = true;
    ok = ok.m4();
    on += dk;
    dk = ok.m3(dk, dk, dk, dk);
    double ld7 = 971.2503144834271;
    double ld8 = 147.18847604260966;
</cutPoint643>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint644>
    double ld0 = 257.9763539293219;
    bk = dk > dk;
    bk = bk && bk;
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo1 = Thought31.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    bk = bk || bk;
    bk = dk > dk;
    bk = dk < dk;
    dk = dk + dk;
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
</cutPoint644>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint645>
    dk = dk - dk;
    bk = bk && bk;
    bk = bk || bk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    bk = dk > dk;
        bk = dk < dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb0 = false;
    Thought lo1 = Thought69.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    Thought lo2 = Thought81.getInstance(dk, dk, dk, dk);
    on += dk;
        dk = dk + dk;
    boolean lb3 = true;
    double ld4 = 189.6727584347841;
    boolean lb5 = true;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint645>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint646>
    bk = bk || bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = true;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk + dk;
    on += dk;
    boolean lb2 = false;
    boolean lb3 = true;
</cutPoint646>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint647>
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    bk = dk > dk;
    boolean lb0 = true;
    dk *= -1;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint647>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint648>
    dk *= -1;
    boolean lb0 = true;
    bk = !bk;
        bk = ok.m2(ok, ok, ok, ok);
    Thought lo1 = Thought76.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 526.1732448803732;
    boolean lb3 = true;
    dk = dk + dk;
    bk = dk > dk;
    bk = bk || bk;
    if (bk) {
        double ld4 = 271.82112376503966;
        dk = dk + dk;
        on += dk;
        ok.m3();
        dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk);
        bk = !bk;
        bk = bk && bk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb5 = false;
        dk = dk - dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        } else if (bk) {
        bk = dk < dk;
        bk = dk < dk;
        dk = dk + dk;
        boolean lb6 = true;
</cutPoint648>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint649>
    boolean lb0 = true;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = bk && bk;
    Thought lo2 = Thought3.getInstance(ok, ok, ok, ok);
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought29.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint649>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint650>
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    on += dk;
    dk = dk + dk;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = false;
    boolean lb2 = false;
    double ld3 = 17.54982201021775;
    double ld4 = 65.8993546059167;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld5 = 989.0149323230577;
            Thought lo6 = Thought69.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint650>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint651>
    dk *= -1;
    bk = bk || bk;
    on -= dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb0 = true;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 680.913567284168;
    double ld2 = 71.49272454531526;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    double ld3 = 541.022956652906;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo4 = Thought11.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk > dk;
    Thought lo5 = Thought15.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint651>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint652>
    bk = bk && bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought51.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    dk *= -1;
    bk = bk || bk;
    boolean lb1 = true;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint652>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint653>
    dk = dk + dk;
    bk = bk && bk;
    boolean lb0 = true;
    dk = dk - dk;
    ok = ok.m4();
    dk = dk + dk;
    bk = bk && bk;
    bk = bk && bk;
    dk = dk + dk;
    on += dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = true;
    ok.m3(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint653>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint654>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    double ld0 = 660.4782766051104;
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    boolean lb2 = false;
    bk = !bk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 855.9188752017392;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    bk = dk > dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = !bk;
</cutPoint654>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint655>
    boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = bk || bk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        boolean lb1 = true;
        boolean lb2 = false;
        on -= dk;
        on -= dk;
        if (bk) {
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk && bk;
            Thought lo3 = Thought58.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            Thought lo4 = Thought39.getInstance(ok, ok, ok, ok);
            bk = dk < dk;
            dk = dk - dk;
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
            double ld5 = 677.1821347021204;
            ok.m3();
            bk = bk || bk;
            dk = dk - dk;
            dk = ok.m3(dk, dk, dk, dk);
            bk = bk && bk;
</cutPoint655>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint656>
    dk = dk + dk;
        Thought lo0 = Thought21.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        dk *= -1;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4();
        bk = ok.m2(dk, dk, dk, dk);
        bk = !bk;
        Thought lo1 = Thought57.getInstance(bk, bk, bk, bk);
</cutPoint656>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint657>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = true;
    ok = ok.m4();
    bk = !bk;
    bk = dk > dk;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
</cutPoint657>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint658>
    boolean lb0 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    bk = bk || bk;
    double ld1 = 663.7784486750065;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
        on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    Thought lo2 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo3 = Thought15.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld4 = 816.2648419407932;
    double ld5 = 402.95058740320127;
    bk = bk || bk;
    Thought lo6 = Thought68.getInstance(ok, ok, ok, ok);
</cutPoint658>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint659>
        boolean lb0 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        on += dk;
</cutPoint659>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint660>
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    Thought lo0 = Thought68.getInstance();
    boolean lb1 = true;
    dk = dk + dk;
    dk = dk + dk;
    bk = bk || bk;
    dk *= -1;
    bk = !bk;
    boolean lb2 = true;
    on += dk;
    dk = dk - dk;
    bk = dk > dk;
    dk *= -1;
    boolean lb3 = true;
    dk = dk - dk;
</cutPoint660>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint661>
    bk = bk && bk;
    boolean lb0 = false;
    ok.m1(dk, dk, dk, dk);
    double ld1 = 749.9538039145913;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought47.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    bk = dk > dk;
    Thought lo4 = Thought95.getInstance(dk, dk, dk, dk);
</cutPoint661>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint662>
    Thought lo0 = Thought7.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    bk = dk < dk;
    bk = bk && bk;
    bk = bk || bk;
    Thought lo1 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought2.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought8.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb4 = false;
    </cutPoint662>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint663>
    dk *= -1;
    Thought lo0 = Thought83.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb1 = false;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    double ld2 = 205.50890725661648;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo3 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb4 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb5 = false;
</cutPoint663>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint664>
    bk = bk && bk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
    on += dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
        bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    on -= dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
</cutPoint664>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought19 extends Thought{
private static ArrayList<Thought19> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 400.4100107095447;
private double fd1 = 852.2954296590167;
private Thought fo0 = null;
private Thought fo1 = null;
Thought19 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought19 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought19 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought19 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought19 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought19 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought19 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought19 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought19 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought19 instance = new Thought19 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought19 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought19 instance = new Thought19 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought19 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought19 instance = new Thought19 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought19 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought19 instance = new Thought19 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought19 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought19 instance = new Thought19 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought19 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought19 instance = new Thought19 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought19 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought19 instance = new Thought19 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought19 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought19 instance = new Thought19 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint665>
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    if (bk) {
        ok.m2();
        on += dk;
        ok.m1(dk, dk, dk, dk);
        dk = dk - dk;
        ok.m3(bk, bk, bk, bk);
        bk = dk < dk;
        bk = dk < dk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld0 = 980.3018242932405;
        bk = bk && bk;
        boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok);
        dk = dk - dk;
</cutPoint665>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint666>
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on += dk;
    bk = dk < dk;
    dk = ok.m3();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought17.getInstance(bk, bk, bk, bk);
    double ld1 = 638.8252938279871;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 858.2791921050433;
    bk = bk || bk;
    boolean lb3 = false;
    double ld4 = 708.5860972763503;
    boolean lb5 = true;
    boolean lb6 = false;
    bk = bk && bk;
</cutPoint666>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint667>
    boolean lb0 = false;
    bk = dk < dk;
    dk = dk - dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
    Thought lo1 = Thought86.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint667>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint668>
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo1 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
</cutPoint668>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint669>
    double ld0 = 836.9792678848842;
    bk = bk || bk;
    bk = ok.m2();
    bk = dk < dk;
    on += dk;
    Thought lo1 = Thought94.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    double ld2 = 480.8899111879767;
    bk = bk && bk;
    bk = dk > dk;
    bk = bk && bk;
    double ld3 = 267.0188258497586;
    bk = dk < dk;
    bk = !bk;
    boolean lb4 = true;
    double ld5 = 313.0278861577917;
    dk = dk + dk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    on -= dk;
    dk = dk + dk;
</cutPoint669>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint670>
    boolean lb0 = false;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought70.getInstance(ok, ok, ok, ok);
    double ld2 = 613.0603391841004;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    double ld3 = 565.8216299102934;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    boolean lb4 = false;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo5 = Thought63.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld6 = 598.3443056797315;
    bk = bk || bk;
    on += dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld7 = 404.05750354058233;
    boolean lb8 = false;
</cutPoint670>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint671>
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = !bk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
        bk = !bk;
    dk *= -1;
    boolean lb1 = false;
    Thought lo2 = Thought90.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = ok.m2();
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    double ld4 = 610.4789851240473;
    boolean lb5 = true;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo6 = Thought53.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo7 = Thought44.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint671>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint672>
    boolean lb0 = true;
    dk = dk + dk;
    dk *= -1;
    on += dk;
    dk = dk - dk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        boolean lb1 = true;
        dk *= -1;
        boolean lb2 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        } else if (bk) {
        if (bk) {
            ok = ok.m4(ok, ok, ok, ok);
            on -= dk;
            bk = dk > dk;
</cutPoint672>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint673>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    bk = bk || bk;
    on -= dk;
    boolean lb0 = false;
    bk = dk > dk;
        boolean lb1 = true;
    bk = !bk;
    Thought lo2 = Thought53.getInstance(dk, dk, dk, dk);
    double ld3 = 600.4866861428352;
    ok.m2(bk, bk, bk, bk);
    Thought lo4 = Thought44.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint673>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint674>
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    boolean lb0 = true;
    dk = dk + dk;
    dk *= -1;
    dk = dk - dk;
    dk *= -1;
    boolean lb1 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint674>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint675>
    on += dk;
    boolean lb0 = true;
    boolean lb1 = false;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    double ld2 = 669.546338934185;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint675>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint676>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok);
    on += dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = true;
    Thought lo1 = Thought18.getInstance();
    on -= dk;
    bk = dk < dk;
    bk = dk > dk;
    dk *= -1;
    bk = dk < dk;
    boolean lb2 = false;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo3 = Thought63.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint676>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint677>
    bk = ok.m2();
    if (bk) {
        ok.m1(dk, dk, dk, dk);
        bk = bk || bk;
        dk = dk - dk;
        boolean lb0 = false;
        boolean lb1 = false;
        double ld2 = 269.36074950354623;
        bk = dk > dk;
        Thought lo3 = Thought82.getInstance(bk, bk, bk, bk);
</cutPoint677>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint678>
    boolean lb0 = false;
    boolean lb1 = false;
    dk = dk + dk;
    bk = dk < dk;
    Thought lo2 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 304.99394118799216;
    bk = bk && bk;
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint678>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint679>
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    double ld0 = 20.43971021996953;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = true;
    bk = bk && bk;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    boolean lb2 = true;
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint679>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint680>
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 729.5855514869171;
    boolean lb1 = false;
    dk *= -1;
    dk = dk + dk;
    Thought lo2 = Thought3.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 590.0890108793315;
    ok.m3();
    if (bk) {
        Thought lo4 = Thought63.getInstance(dk, dk, dk, dk);
        ok.m3(bk, bk, bk, bk);
        on += dk;
        boolean lb5 = true;
</cutPoint680>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint681>
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
        boolean lb0 = false;
    Thought lo1 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought39.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb3 = false;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint681>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint682>
    Thought lo0 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    Thought lo1 = Thought46.getInstance(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    on += dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    if (bk) {
        on -= dk;
        boolean lb3 = true;
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok);
        boolean lb4 = true;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo5 = Thought93.getInstance();
        bk = !bk;
        bk = dk < dk;
        dk *= -1;
        bk = bk && bk;
        bk = dk > dk;
        Thought lo6 = Thought94.getInstance(dk, dk, dk, dk);
        dk = dk + dk;
        bk = bk || bk;
        dk *= -1;
        bk = dk > dk;
</cutPoint682>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint683>
    dk = dk + dk;
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    bk = bk && bk;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        Thought lo1 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld2 = 412.80449769667615;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo3 = Thought54.getInstance(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        on += dk;
        ok = ok.m4();
        ok.m2(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        bk = dk < dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok);
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint683>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint684>
    dk = ok.m3();
    on += dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        bk = !bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = true;
        bk = dk > dk;
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        bk = dk < dk;
        bk = ok.m2(ok, ok, ok, ok);
        Thought lo1 = Thought73.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = false;
        ok.m3();
</cutPoint684>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint685>
    bk = !bk;
    bk = dk < dk;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    boolean lb0 = false;
    Thought lo1 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    if (bk) {
        double ld2 = 442.4252446632091;
        bk = dk < dk;
        bk = bk && bk;
        dk = dk + dk;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo3 = Thought4.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        bk = ok.m2(dk, dk, dk, dk);
        ok.m1(bk, bk, bk, bk);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
</cutPoint685>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint686>
    bk = dk > dk;
    Thought lo0 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 424.5889867568279;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
    dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    dk = dk - dk;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld3 = 534.5360873560785;
    dk *= -1;
    dk = dk + dk;
    bk = dk < dk;
    Thought lo4 = Thought99.getInstance();
</cutPoint686>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint687>
    dk = ok.m3(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk *= -1;
        boolean lb0 = false;
        bk = bk && bk;
        dk = dk - dk;
        bk = dk < dk;
        bk = dk > dk;
        bk = bk && bk;
        boolean lb1 = true;
        dk *= -1;
        Thought lo2 = Thought11.getInstance(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb4 = true;
        bk = !bk;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo5 = Thought36.getInstance();
        Thought lo6 = Thought51.getInstance(dk, dk, dk, dk);
        bk = dk > dk;
</cutPoint687>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint688>
    dk = dk - dk;
    double ld0 = 24.783654910797765;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 883.4709893882574;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought23.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint688>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint689>
    ok = ok.m4();
    dk = dk + dk;
    double ld0 = 246.4782416867538;
    double ld1 = 170.41319632536556;
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    boolean lb2 = true;
    Thought lo3 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
</cutPoint689>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint690>
    dk *= -1;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought70.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    dk = dk + dk;
    dk = dk - dk;
    bk = dk < dk;
    ok.m1();
    bk = !bk;
    dk = dk + dk;
</cutPoint690>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint691>
    on += dk;
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo0 = Thought0.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    if (bk) {
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok);
        double ld1 = 80.85044995477743;
        bk = dk < dk;
        on -= dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
</cutPoint691>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint692>
    bk = dk > dk;
    bk = dk < dk;
    if (bk) {
        } else {
        on += dk;
        bk = !bk;
        bk = dk < dk;
        dk = ok.m3();
        Thought lo0 = Thought19.getInstance(dk, dk, dk, dk);
        boolean lb1 = true;
        double ld2 = 815.9337321409695;
        boolean lb3 = false;
        Thought lo4 = Thought12.getInstance(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
                ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok);
</cutPoint692>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint693>
    dk = dk - dk;
    bk = !bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4();
    boolean lb0 = true;
    bk = !bk;
    dk = dk + dk;
    double ld1 = 894.5657764106841;
    dk = dk + dk;
        boolean lb2 = false;
    bk = !bk;
    dk *= -1;
    boolean lb3 = true;
    bk = bk || bk;
</cutPoint693>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint694>
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    for(int j=0; j<10; j++){
        bk = bk || bk;
        dk *= -1;
        boolean lb0 = true;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        boolean lb1 = false;
        boolean lb2 = false;
        ok = ok.m4(ok, ok, ok, ok);
        dk = dk + dk;
        dk = dk + dk;
        bk = bk && bk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = true;
        if (bk) {
</cutPoint694>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint695>
    ok = ok.m4();
        boolean lb0 = false;
    bk = dk > dk;
    dk = dk - dk;
    dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk);
    on -= dk;
    ok.m2(bk, bk, bk, bk);
    double ld1 = 864.3273125707099;
    dk = dk - dk;
    bk = !bk;
    on += dk;
    boolean lb2 = false;
    double ld3 = 464.92378545937873;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        Thought lo5 = Thought14.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
        dk = dk - dk;
        dk *= -1;
        bk = dk < dk;
</cutPoint695>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint696>
    boolean lb0 = true;
    bk = !bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb1 = false;
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb2 = false;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint696>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint697>
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb0 = false;
    bk = !bk;
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4();
    bk = dk > dk;
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
        bk = dk < dk;
    Thought lo1 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk *= -1;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
        double ld2 = 86.58243953232854;
    boolean lb3 = false;
    bk = dk > dk;
</cutPoint697>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint698>
    Thought lo0 = Thought46.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = dk < dk;
    bk = ok.m2();
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    on += dk;
    dk = dk + dk;
    bk = dk > dk;
    dk = dk - dk;
    boolean lb1 = false;
    double ld2 = 66.21480728198142;
    ok = ok.m4(bk, bk, bk, bk);
        boolean lb3 = true;
    boolean lb4 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    </cutPoint698>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint699>
    bk = dk < dk;
    boolean lb0 = false;
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    double ld1 = 215.3795484267627;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought78.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 92.17409324439089;
    dk *= -1;
    bk = bk && bk;
    bk = dk < dk;
    dk = ok.m3();
</cutPoint699>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought20 extends Thought{
private static ArrayList<Thought20> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 545.2283534241533;
private double fd1 = 371.6074750127386;
private Thought fo0 = null;
private Thought fo1 = null;
Thought20 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought20 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought20 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought20 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought20 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought20 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought20 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought20 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought20 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought20 instance = new Thought20 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought20 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought20 instance = new Thought20 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought20 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought20 instance = new Thought20 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought20 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought20 instance = new Thought20 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought20 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought20 instance = new Thought20 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought20 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought20 instance = new Thought20 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought20 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought20 instance = new Thought20 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought20 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought20 instance = new Thought20 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint700>
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    Thought lo0 = Thought96.getInstance(bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 41.67118331325556;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = bk && bk;
    bk = dk < dk;
    double ld3 = 473.7343208741823;
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo4 = Thought5.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    bk = dk > dk;
</cutPoint700>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint701>
    double ld0 = 872.2620282132962;
    dk = ok.m3();
    bk = dk > dk;
    dk = dk + dk;
    dk = dk - dk;
    bk = !bk;
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    bk = !bk;
    boolean lb1 = false;
    ok.m2(bk, bk, bk, bk);
    Thought lo2 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb3 = true;
</cutPoint701>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint702>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought0.getInstance(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    Thought lo1 = Thought90.getInstance(dk, dk, dk, dk);
    if (bk) {
        bk = bk || bk;
        double ld2 = 526.7714398801315;
        dk *= -1;
        boolean lb3 = false;
        dk = dk + dk;
        boolean lb4 = true;
        bk = bk || bk;
</cutPoint702>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint703>
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = !bk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
</cutPoint703>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint704>
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 778.7171144538876;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint704>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint705>
    Thought lo0 = Thought14.getInstance(ok, ok, ok, ok);
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    for(int j=0; j<10; j++){
        double ld1 = 750.0446544959659;
        double ld2 = 299.0317418792177;
        dk *= -1;
        dk = ok.m3();
        dk *= -1;
        Thought lo3 = Thought85.getInstance(dk, dk, dk, dk);
</cutPoint705>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint706>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    boolean lb0 = false;
    bk = bk || bk;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
        on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    ok = ok.m4();
    boolean lb1 = false;
    dk *= -1;
    boolean lb2 = false;
    dk *= -1;
</cutPoint706>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint707>
    bk = !bk;
    dk = dk - dk;
    bk = dk > dk;
    bk = !bk;
    Thought lo0 = Thought43.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo1 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    bk = bk || bk;
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo3 = Thought23.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
</cutPoint707>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint708>
    ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought78.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb1 = true;
    bk = bk && bk;
    bk = bk && bk;
    Thought lo2 = Thought35.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = dk < dk;
    dk *= -1;
    bk = bk && bk;
</cutPoint708>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint709>
    ok.m3(ok, ok, ok, ok);
    Thought lo0 = Thought97.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = !bk;
    ok.m1();
    double ld2 = 61.79637217840837;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought8.getInstance(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
        Thought lo4 = Thought27.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
    dk = dk - dk;
</cutPoint709>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint710>
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk);
    Thought lo0 = Thought7.getInstance(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    double ld1 = 267.28365912282885;
    dk = dk + dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb2 = false;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld3 = 664.4478010261018;
</cutPoint710>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint711>
    double ld0 = 165.58178148150918;
    ok = ok.m4();
    on += dk;
        dk *= -1;
    bk = dk > dk;
    boolean lb1 = true;
    bk = bk || bk;
    bk = dk > dk;
    if (bk) {
        on += dk;
        ok.m3(dk, dk, dk, dk);
        ok.m3(bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint711>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint712>
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    if (bk) {
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo0 = Thought8.getInstance();
        bk = dk > dk;
        } else {
        bk = dk > dk;
        bk = dk < dk;
        boolean lb1 = false;
        double ld2 = 754.8401143689675;
        bk = ok.m2(dk, dk, dk, dk);
        ok.m3(bk, bk, bk, bk);
        bk = bk || bk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        dk = dk - dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint712>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint713>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought44.getInstance(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 559.2403609947906;
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    on += dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint713>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint714>
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk > dk;
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
        bk = bk && bk;
    bk = bk && bk;
    bk = bk && bk;
    bk = dk > dk;
    boolean lb0 = true;
    bk = dk < dk;
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    Thought lo1 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought11.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint714>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint715>
    ok = ok.m4();
    Thought lo0 = Thought83.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = bk && bk;
        bk = bk || bk;
        } else if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought52.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk *= -1;
        Thought lo2 = Thought57.getInstance();
        dk = ok.m3(dk, dk, dk, dk);
        on -= dk;
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk + dk;
        Thought lo3 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
</cutPoint715>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint716>
    boolean lb0 = false;
    boolean lb1 = true;
    dk = dk - dk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 337.43636080294243;
    bk = bk || bk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    on += dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb3 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3();
    bk = !bk;
</cutPoint716>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint717>
    bk = !bk;
    double ld0 = 855.0694671486294;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    dk *= -1;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    Thought lo2 = Thought44.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb3 = false;
    double ld4 = 248.32312972115432;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk > dk;
</cutPoint717>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint718>
    dk = dk - dk;
    bk = bk && bk;
        bk = dk < dk;
    bk = !bk;
    boolean lb0 = false;
    boolean lb1 = false;
    boolean lb2 = false;
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
</cutPoint718>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint719>
    double ld0 = 192.71419332505025;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    boolean lb2 = false;
    bk = bk || bk;
    Thought lo3 = Thought18.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
</cutPoint719>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint720>
    bk = dk < dk;
    bk = dk < dk;
    bk = bk || bk;
        boolean lb0 = false;
    bk = dk > dk;
    double ld1 = 594.9352858552003;
    dk = dk - dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo2 = Thought50.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        bk = dk < dk;
        for(int j=0; j<10; j++){
            }
</cutPoint720>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint721>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
        if (bk) {
        dk = dk - dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        boolean lb1 = false;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb2 = true;
        boolean lb3 = true;
        bk = !bk;
        dk = dk + dk;
        dk = dk - dk;
        boolean lb4 = false;
        bk = dk > dk;
        on += dk;
        boolean lb5 = false;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        ok.m2();
</cutPoint721>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint722>
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    on += dk;
    bk = dk > dk;
    boolean lb1 = true;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    Thought lo2 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    dk = dk + dk;
    bk = bk || bk;
    boolean lb4 = true;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
</cutPoint722>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint723>
    double ld0 = 595.7766475264223;
    bk = dk < dk;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
        ok = ok.m4();
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    Thought lo1 = Thought53.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    Thought lo2 = Thought16.getInstance();
    ok.m3(dk, dk, dk, dk);
</cutPoint723>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint724>
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 104.11717981349919;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    boolean lb1 = false;
    Thought lo2 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb4 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    dk = dk + dk;
</cutPoint724>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint725>
    dk = dk - dk;
    ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    bk = bk && bk;
    dk *= -1;
    bk = bk && bk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
</cutPoint725>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint726>
    Thought lo0 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk *= -1;
    dk = dk + dk;
    double ld2 = 200.65754608294705;
    boolean lb3 = true;
    if (bk) {
        boolean lb4 = false;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb5 = false;
        dk = ok.m3(ok, ok, ok, ok);
        double ld6 = 99.17918208218799;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        dk = ok.m3();
        ok.m3(dk, dk, dk, dk);
        bk = !bk;
</cutPoint726>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint727>
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 822.2841462791247;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk < dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought6.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought53.getInstance();
</cutPoint727>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint728>
    dk = ok.m3(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    bk = dk > dk;
    bk = bk && bk;
    bk = dk < dk;
    Thought lo1 = Thought52.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint728>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint729>
    boolean lb0 = false;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = bk || bk;
        boolean lb1 = false;
        Thought lo2 = Thought69.getInstance(ok, ok, ok, ok);
        double ld3 = 189.2413676455715;
        }
    bk = dk < dk;
    bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    Thought lo4 = Thought16.getInstance();
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
    Thought lo5 = Thought10.getInstance(dk, dk, dk, dk);
    Thought lo6 = Thought3.getInstance(bk, bk, bk, bk);
    boolean lb7 = true;
    dk *= -1;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint729>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint730>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        dk = dk + dk;
        }
    dk = dk - dk;
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    on += dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought76.getInstance();
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint730>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint731>
    boolean lb0 = true;
    dk *= -1;
    ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    double ld1 = 898.8956673855162;
    bk = bk || bk;
    bk = dk < dk;
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk = dk - dk;
        ok = ok.m4();
        bk = dk > dk;
        dk = dk - dk;
        dk = dk + dk;
        bk = bk || bk;
        dk *= -1;
</cutPoint731>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint732>
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    boolean lb0 = true;
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought12.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
    boolean lb3 = false;
    Thought lo4 = Thought74.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    dk = dk - dk;
        bk = bk && bk;
    on -= dk;
    boolean lb5 = true;
    dk = dk - dk;
    bk = bk && bk;
    Thought lo6 = Thought52.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    boolean lb7 = true;
    bk = dk < dk;
    bk = dk < dk;
</cutPoint732>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint733>
    dk = dk + dk;
    double ld0 = 359.16768134922427;
    Thought lo1 = Thought92.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    boolean lb2 = true;
    on += dk;
    bk = dk > dk;
        bk = !bk;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo3 = Thought86.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld4 = 324.38850701082134;
        bk = !bk;
    dk = dk - dk;
    boolean lb5 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint733>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint734>
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought15.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint734>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought21 extends Thought{
private static ArrayList<Thought21> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 610.3022321022758;
private double fd1 = 816.5439339137464;
private Thought fo0 = null;
private Thought fo1 = null;
Thought21 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought21 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought21 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought21 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought21 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought21 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought21 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought21 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought21 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought21 instance = new Thought21 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought21 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought21 instance = new Thought21 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought21 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought21 instance = new Thought21 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought21 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought21 instance = new Thought21 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought21 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought21 instance = new Thought21 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought21 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought21 instance = new Thought21 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought21 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought21 instance = new Thought21 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought21 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought21 instance = new Thought21 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint735>
    Thought lo0 = Thought34.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    dk *= -1;
    bk = bk && bk;
    dk = dk + dk;
    on += dk;
    bk = ok.m2();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint735>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint736>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo0 = Thought8.getInstance(ok, ok, ok, ok);
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    double ld1 = 942.3933683099774;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint736>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint737>
    ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
</cutPoint737>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint738>
    dk = dk + dk;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
    bk = bk && bk;
    bk = bk || bk;
    boolean lb0 = true;
    bk = dk < dk;
    dk = dk + dk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = false;
    dk *= -1;
    Thought lo2 = Thought48.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
</cutPoint738>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint739>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought95.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    Thought lo1 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        for(int j=0; j<10; j++){
</cutPoint739>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint740>
    bk = bk && bk;
    boolean lb0 = false;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = !bk;
    Thought lo3 = Thought44.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    bk = bk || bk;
</cutPoint740>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint741>
    dk *= -1;
    Thought lo0 = Thought33.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    boolean lb1 = true;
    bk = bk || bk;
    Thought lo2 = Thought25.getInstance(bk, bk, bk, bk);
    boolean lb3 = true;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld4 = 307.10180845570505;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint741>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint742>
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    Thought lo0 = Thought63.getInstance(dk, dk, dk, dk);
    Thought lo1 = Thought71.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 709.9048351981728;
    bk = dk > dk;
    boolean lb4 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = true;
    dk = dk + dk;
    dk *= -1;
    bk = bk && bk;
    bk = bk && bk;
    bk = dk < dk;
    Thought lo6 = Thought10.getInstance(ok, ok, ok, ok);
    Thought lo7 = Thought64.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo8 = Thought13.getInstance();
    dk = dk + dk;
    dk = dk + dk;
    dk = dk + dk;
</cutPoint742>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint743>
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
</cutPoint743>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint744>
    bk = bk || bk;
    bk = bk && bk;
    bk = !bk;
    Thought lo0 = Thought58.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2();
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
        dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        for(int j=0; j<10; j++){
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = !bk;
            bk = dk < dk;
            bk = dk > dk;
</cutPoint744>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint745>
    boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = true;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4();
    bk = bk && bk;
    Thought lo3 = Thought15.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
</cutPoint745>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint746>
    dk *= -1;
    double ld0 = 359.3359529228078;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    boolean lb1 = false;
    dk = dk + dk;
    bk = dk > dk;
    </cutPoint746>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint747>
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    bk = dk > dk;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint747>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint748>
    boolean lb0 = true;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought96.getInstance(ok, ok, ok, ok);
    double ld2 = 481.69146748728343;
    boolean lb3 = false;
    bk = !bk;
    on += dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = !bk;
    dk = dk - dk;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4();
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk);
    double ld5 = 900.6199497552138;
    on -= dk;
</cutPoint748>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint749>
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo0 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought12.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on -= dk;
    boolean lb2 = true;
    bk = dk > dk;
    ok.m3();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb3 = true;
    double ld4 = 12.851441596589556;
    double ld5 = 305.77688180502173;
    boolean lb6 = true;
    double ld7 = 925.8165896366448;
    bk = dk < dk;
    dk = dk - dk;
    Thought lo8 = Thought63.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint749>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint750>
    bk = dk < dk;
    bk = bk && bk;
    double ld0 = 326.4237590138398;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    bk = bk || bk;
    if (bk) {
        bk = bk && bk;
        bk = dk < dk;
        double ld1 = 771.7699726179817;
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo2 = Thought50.getInstance(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
</cutPoint750>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint751>
    dk *= -1;
    Thought lo0 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 51.65581736495455;
    bk = dk < dk;
    on -= dk;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
</cutPoint751>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint752>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    bk = !bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    dk = ok.m3();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 878.1487238322927;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld1 = 103.55873691237265;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought21.getInstance();
    Thought lo3 = Thought37.getInstance(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
</cutPoint752>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint753>
    Thought lo0 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk *= -1;
    bk = bk || bk;
</cutPoint753>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint754>
        dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought22.getInstance(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    boolean lb2 = true;
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    boolean lb3 = false;
    ok.m1();
</cutPoint754>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint755>
    on += dk;
    bk = bk && bk;
    double ld0 = 8.501280867834486;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = true;
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
</cutPoint755>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint756>
    bk = !bk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    double ld1 = 762.3804225408406;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb2 = true;
    bk = dk < dk;
    bk = dk > dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb3 = true;
    bk = bk && bk;
    dk *= -1;
    Thought lo4 = Thought72.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint756>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint757>
    double ld0 = 285.4303502947669;
    boolean lb1 = true;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought75.getInstance();
    Thought lo3 = Thought95.getInstance(dk, dk, dk, dk);
    double ld4 = 485.54339030862405;
    ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo5 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo6 = Thought30.getInstance(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
</cutPoint757>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint758>
    boolean lb0 = false;
    bk = !bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    double ld1 = 308.28662917654924;
    dk = dk + dk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    if (bk) {
        dk = dk - dk;
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        Thought lo2 = Thought70.getInstance(ok, ok, ok, ok);
        dk = dk - dk;
        boolean lb3 = true;
</cutPoint758>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint759>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        for(int j=0; j<10; j++){
            dk = dk - dk;
            boolean lb0 = false;
            dk = dk - dk;
            ok = ok.m4();
            dk = ok.m3(dk, dk, dk, dk);
            boolean lb1 = false;
            on += dk;
            ok = ok.m4(bk, bk, bk, bk);
            bk = bk || bk;
            bk = !bk;
</cutPoint759>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint760>
    bk = bk && bk;
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    boolean lb2 = true;
    bk = bk && bk;
    bk = dk > dk;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    bk = dk < dk;
    dk = dk - dk;
    bk = bk && bk;
    boolean lb4 = false;
    Thought lo5 = Thought28.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    dk *= -1;
    bk = bk || bk;
    dk = dk + dk;
</cutPoint760>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint761>
    dk = dk - dk;
    Thought lo0 = Thought11.getInstance();
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk);
        bk = !bk;
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = !bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
        boolean lb1 = true;
    on += dk;
        Thought lo2 = Thought35.getInstance(bk, bk, bk, bk);
</cutPoint761>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint762>
    Thought lo0 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    on -= dk;
    dk *= -1;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    boolean lb2 = true;
    boolean lb3 = false;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb4 = true;
        Thought lo5 = Thought13.getInstance();
        Thought lo6 = Thought72.getInstance(dk, dk, dk, dk);
        on -= dk;
        boolean lb7 = false;
        boolean lb8 = false;
        dk = ok.m3(bk, bk, bk, bk);
        dk = dk - dk;
</cutPoint762>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint763>
    dk *= -1;
    dk *= -1;
    bk = dk < dk;
    double ld0 = 695.5842353760787;
    bk = dk < dk;
    on -= dk;
    dk = dk - dk;
    bk = bk && bk;
    bk = dk > dk;
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint763>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint764>
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    Thought lo0 = Thought99.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    on += dk;
        for(int j=0; j<10; j++){
        bk = dk < dk;
        dk *= -1;
        bk = bk || bk;
        boolean lb1 = false;
        boolean lb2 = true;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok);
        on += dk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint764>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint765>
    Thought lo0 = Thought97.getInstance();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    dk *= -1;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    on -= dk;
    on += dk;
    double ld1 = 778.4283684696381;
    bk = !bk;
</cutPoint765>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint766>
        bk = !bk;
    dk *= -1;
    bk = bk || bk;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb0 = false;
    bk = !bk;
    boolean lb1 = true;
    boolean lb2 = false;
    for(int j=0; j<10; j++){
        dk *= -1;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo3 = Thought73.getInstance(ok, ok, ok, ok);
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        Thought lo4 = Thought72.getInstance(dk, dk, dk, dk);
        double ld5 = 833.8940001730057;
        dk = dk + dk;
        for(int j=0; j<10; j++){
            dk = ok.m3(bk, bk, bk, bk);
            dk = dk + dk;
            }
        bk = bk && bk;
        boolean lb6 = true;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint766>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint767>
    bk = dk > dk;
    dk *= -1;
    bk = dk < dk;
    double ld0 = 512.0450369743016;
    boolean lb1 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk < dk;
    bk = !bk;
    on -= dk;
    double ld3 = 341.43079434211774;
    boolean lb4 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
        dk *= -1;
    bk = bk && bk;
    boolean lb5 = true;
        bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint767>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint768>
    bk = dk > dk;
    Thought lo0 = Thought51.getInstance(bk, bk, bk, bk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    boolean lb2 = true;
    dk = dk + dk;
    dk *= -1;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
</cutPoint768>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint769>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought80.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = dk - dk;
        on += dk;
    dk *= -1;
    bk = !bk;
    boolean lb2 = false;
    dk = dk - dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = true;
    bk = bk && bk;
    bk = dk < dk;
    Thought lo4 = Thought18.getInstance(bk, bk, bk, bk);
    boolean lb5 = false;
    dk = dk + dk;
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    boolean lb6 = false;
    double ld7 = 115.54338093508927;
</cutPoint769>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought22 extends Thought{
private static ArrayList<Thought22> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 369.57427874570476;
private double fd1 = 551.826883286721;
private Thought fo0 = null;
private Thought fo1 = null;
Thought22 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought22 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought22 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought22 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought22 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought22 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought22 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought22 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought22 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought22 instance = new Thought22 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought22 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought22 instance = new Thought22 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought22 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought22 instance = new Thought22 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought22 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought22 instance = new Thought22 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought22 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought22 instance = new Thought22 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought22 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought22 instance = new Thought22 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought22 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought22 instance = new Thought22 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought22 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought22 instance = new Thought22 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint770>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo0 = Thought38.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3();
    Thought lo1 = Thought31.getInstance(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    double ld2 = 324.8457095501175;
    dk = dk + dk;
    dk *= -1;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    boolean lb4 = true;
    bk = dk < dk;
    double ld5 = 175.54461517370314;
    bk = bk || bk;
</cutPoint770>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint771>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo0 = Thought66.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought32.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought97.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    bk = !bk;
    boolean lb3 = false;
    Thought lo4 = Thought42.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = true;
    boolean lb6 = false;
    bk = ok.m2(ok, ok, ok, ok);
        bk = bk && bk;
    boolean lb7 = false;
    Thought lo8 = Thought91.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb9 = false;
    Thought lo10 = Thought31.getInstance();
    bk = bk && bk;
</cutPoint771>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint772>
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb0 = false;
    double ld1 = 774.3007476273057;
    double ld2 = 918.9596095981695;
    boolean lb3 = true;
    boolean lb4 = true;
    on += dk;
    on -= dk;
    bk = !bk;
    ok.m2(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint772>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint773>
    Thought lo0 = Thought95.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        dk = dk + dk;
        bk = bk && bk;
        boolean lb1 = true;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb2 = false;
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
        bk = dk < dk;
        dk = dk - dk;
        bk = bk && bk;
        bk = !bk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
</cutPoint773>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint774>
    bk = bk && bk;
    ok = ok.m4();
    bk = !bk;
    bk = dk < dk;
    boolean lb0 = true;
    bk = dk > dk;
    Thought lo1 = Thought39.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    Thought lo2 = Thought57.getInstance(bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    boolean lb3 = true;
    double ld4 = 320.56374730491046;
    Thought lo5 = Thought87.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
</cutPoint774>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint775>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb0 = false;
    Thought lo1 = Thought36.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo2 = Thought39.getInstance(ok, ok, ok, ok);
        } else if (bk) {
        dk *= -1;
        bk = dk > dk;
        bk = bk && bk;
</cutPoint775>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint776>
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 290.1509469924588;
    bk = bk || bk;
    boolean lb1 = true;
    bk = dk > dk;
    if (bk) {
        dk = dk + dk;
        ok = ok.m4();
        bk = bk || bk;
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk);
        on += dk;
        on += dk;
        on -= dk;
        dk = dk + dk;
        dk = dk - dk;
        ok.m3(bk, bk, bk, bk);
</cutPoint776>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint777>
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought89.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo1 = Thought9.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    boolean lb2 = true;
    bk = dk < dk;
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = ok.m2();
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo3 = Thought85.getInstance(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    Thought lo4 = Thought37.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    bk = dk > dk;
    </cutPoint777>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint778>
    bk = !bk;
    bk = bk || bk;
    double ld0 = 428.41637802219816;
    dk = dk - dk;
    bk = !bk;
    boolean lb1 = true;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    ok.m1(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
    ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought18.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    bk = !bk;
    boolean lb3 = false;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
</cutPoint778>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint779>
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 630.591890874545;
    bk = !bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    double ld2 = 348.93702714622253;
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    Thought lo3 = Thought90.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = false;
    Thought lo5 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
</cutPoint779>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint780>
    bk = !bk;
    dk *= -1;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo0 = Thought94.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought98.getInstance();
    dk = dk - dk;
    Thought lo2 = Thought56.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb3 = false;
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = !bk;
    bk = bk || bk;
</cutPoint780>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint781>
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk > dk;
</cutPoint781>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint782>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    Thought lo1 = Thought81.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld3 = 776.5560742534957;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    Thought lo5 = Thought25.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
</cutPoint782>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint783>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    dk *= -1;
    bk = bk && bk;
    bk = dk < dk;
    bk = !bk;
    dk = dk - dk;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo1 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought78.getInstance();
    Thought lo3 = Thought20.getInstance(dk, dk, dk, dk);
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo4 = Thought79.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
</cutPoint783>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint784>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    Thought lo1 = Thought76.getInstance(ok, ok, ok, ok);
    boolean lb2 = false;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb3 = false;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb4 = false;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb5 = true;
    double ld6 = 731.9422336004211;
    double ld7 = 710.0218651733724;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb8 = true;
</cutPoint784>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint785>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought12.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought2.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    boolean lb2 = true;
    ok = ok.m4();
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
</cutPoint785>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint786>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo0 = Thought26.getInstance(dk, dk, dk, dk);
    boolean lb1 = true;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint786>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint787>
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk - dk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint787>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint788>
    on -= dk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb0 = false;
    dk = dk - dk;
    Thought lo1 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    for(int j=0; j<10; j++){
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint788>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint789>
    on -= dk;
    boolean lb0 = true;
    double ld1 = 923.7543518661918;
    bk = dk > dk;
    dk *= -1;
    bk = ok.m2();
    dk *= -1;
    bk = bk && bk;
    bk = bk || bk;
    boolean lb2 = false;
    ok.m2(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        double ld3 = 81.5606770086853;
        bk = !bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint789>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint790>
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on += dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    boolean lb1 = true;
    bk = dk < dk;
    boolean lb2 = false;
    boolean lb3 = false;
    Thought lo4 = Thought78.getInstance(bk, bk, bk, bk);
</cutPoint790>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint791>
    bk = dk < dk;
    bk = bk || bk;
    on -= dk;
    Thought lo0 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    bk = !bk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb2 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint791>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint792>
    bk = bk && bk;
    bk = !bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk > dk;
    Thought lo0 = Thought37.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    dk *= -1;
    double ld1 = 561.8766859987742;
    Thought lo2 = Thought54.getInstance();
    dk = dk + dk;
    on += dk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb3 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint792>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint793>
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok.m2(ok, ok, ok, ok);
        bk = dk < dk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        dk *= -1;
        ok.m1();
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        bk = dk < dk;
        dk = dk + dk;
        bk = ok.m2(bk, bk, bk, bk);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        dk = dk + dk;
        on -= dk;
        bk = bk || bk;
        bk = dk > dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb0 = true;
        dk = dk - dk;
        ok.m3(ok, ok, ok, ok);
</cutPoint793>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint794>
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo0 = Thought14.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought86.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought74.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 546.5354714222927;
    on -= dk;
    dk = dk + dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk < dk;
</cutPoint794>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint795>
    dk = dk + dk;
    dk *= -1;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought40.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 504.0215614056574;
    bk = dk > dk;
    double ld2 = 300.2244007378015;
    dk = dk + dk;
    double ld3 = 265.4314885017148;
    dk = dk + dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
</cutPoint795>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint796>
    boolean lb0 = true;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 385.7734352959785;
    Thought lo2 = Thought77.getInstance();
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    </cutPoint796>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint797>
    Thought lo0 = Thought15.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    double ld1 = 487.2378238395974;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = true;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m3(bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    dk *= -1;
    Thought lo3 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint797>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint798>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    Thought lo1 = Thought40.getInstance(dk, dk, dk, dk);
    double ld2 = 222.3775819816329;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    boolean lb3 = true;
    double ld4 = 203.34407032798677;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        bk = bk || bk;
        dk *= -1;
        double ld5 = 590.532385242745;
        Thought lo6 = Thought58.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint798>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint799>
    dk = dk - dk;
    bk = dk < dk;
    boolean lb0 = false;
    on -= dk;
    Thought lo1 = Thought0.getInstance();
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    on -= dk;
    bk = !bk;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 115.91257581006329;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld4 = 525.6539944586035;
    dk = dk + dk;
    double ld5 = 2.671109688348073;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
</cutPoint799>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint800>
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    Thought lo0 = Thought21.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo2 = Thought53.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = bk && bk;
    dk = dk + dk;
</cutPoint800>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint801>
    bk = bk && bk;
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    </cutPoint801>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint802>
    bk = dk > dk;
    on -= dk;
    dk = dk - dk;
    dk = dk - dk;
    Thought lo0 = Thought96.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    double ld2 = 792.4013924980645;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint802>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint803>
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld0 = 107.93472310803823;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4();
    dk *= -1;
    bk = dk > dk;
    on += dk;
    Thought lo1 = Thought48.getInstance(dk, dk, dk, dk);
    on -= dk;
    on += dk;
    bk = dk < dk;
    bk = dk < dk;
    double ld2 = 164.7024173637366;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    </cutPoint803>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint804>
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought52.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    bk = dk < dk;
    bk = bk && bk;
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk || bk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint804>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought23 extends Thought{
private static ArrayList<Thought23> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 562.2660079218044;
private double fd1 = 131.83992869760974;
private Thought fo0 = null;
private Thought fo1 = null;
Thought23 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought23 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought23 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought23 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought23 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought23 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought23 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought23 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought23 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought23 instance = new Thought23 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought23 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought23 instance = new Thought23 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought23 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought23 instance = new Thought23 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought23 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought23 instance = new Thought23 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought23 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought23 instance = new Thought23 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought23 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought23 instance = new Thought23 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought23 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought23 instance = new Thought23 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought23 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought23 instance = new Thought23 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint805>
    bk = dk > dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint805>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint806>
    bk = dk > dk;
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    double ld2 = 550.2741685253551;
    bk = !bk;
    for(int j=0; j<10; j++){
</cutPoint806>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint807>
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    double ld2 = 331.74048227923123;
    bk = dk < dk;
    Thought lo3 = Thought13.getInstance(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk || bk;
</cutPoint807>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint808>
    Thought lo0 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 442.6750078764465;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo2 = Thought91.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo3 = Thought63.getInstance(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint808>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint809>
    dk = ok.m3();
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought44.getInstance(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo2 = Thought87.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk - dk;
    Thought lo3 = Thought10.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo4 = Thought27.getInstance();
    double ld5 = 869.6273737097694;
    Thought lo6 = Thought36.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo7 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo8 = Thought69.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
</cutPoint809>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint810>
    dk = dk - dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        bk = ok.m2();
        boolean lb0 = false;
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        bk = !bk;
        bk = bk && bk;
        bk = dk < dk;
        dk = dk - dk;
        bk = !bk;
        boolean lb1 = true;
        dk = dk + dk;
        bk = !bk;
        bk = ok.m2(bk, bk, bk, bk);
        boolean lb2 = false;
        double ld3 = 758.3249601515179;
        dk *= -1;
        double ld4 = 859.4545860482531;
        bk = bk && bk;
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        dk = dk + dk;
</cutPoint810>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint811>
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought10.getInstance(ok, ok, ok, ok);
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    on += dk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo1 = Thought8.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint811>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint812>
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought25.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought58.getInstance();
    for(int j=0; j<10; j++){
        bk = bk && bk;
        dk = dk + dk;
        dk *= -1;
        if (bk) {
            ok = ok.m4(dk, dk, dk, dk);
            boolean lb2 = true;
            dk = ok.m3(bk, bk, bk, bk);
            ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = bk || bk;
            Thought lo3 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk + dk;
            dk = dk - dk;
            if (bk) {
                dk = dk - dk;
                ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
                bk = ok.m2(ok, ok, ok, ok);
                double ld4 = 871.8434305215512;
                Thought lo5 = Thought50.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
                ok.m3();
                ok = ok.m4(dk, dk, dk, dk);
</cutPoint812>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint813>
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought14.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb2 = true;
    bk = dk > dk;
    on += dk;
    boolean lb3 = false;
    ok.m1(dk, dk, dk, dk);
</cutPoint813>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint814>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
        dk = dk - dk;
    bk = !bk;
    boolean lb0 = true;
    boolean lb1 = false;
    dk *= -1;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = true;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint814>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint815>
    dk = dk + dk;
    boolean lb0 = false;
    dk = dk + dk;
    Thought lo1 = Thought92.getInstance();
    dk = dk + dk;
    bk = bk || bk;
    bk = dk < dk;
    Thought lo2 = Thought60.getInstance(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    on -= dk;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought61.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint815>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint816>
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2();
    bk = dk > dk;
    on -= dk;
    on += dk;
    dk *= -1;
    if (bk) {
        bk = dk > dk;
        dk = dk + dk;
        for(int j=0; j<10; j++){
            bk = dk < dk;
            bk = dk > dk;
            }
        bk = bk || bk;
        bk = ok.m2(dk, dk, dk, dk);
        Thought lo0 = Thought92.getInstance(bk, bk, bk, bk);
        Thought lo1 = Thought23.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint816>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint817>
        bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 832.5662468985186;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought34.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint817>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint818>
    bk = bk && bk;
    Thought lo0 = Thought63.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk > dk;
    bk = bk && bk;
    boolean lb1 = true;
    Thought lo2 = Thought64.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 46.51176548119381;
    ok.m3();
    dk = dk - dk;
    on += dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk > dk;
    double ld4 = 322.96352439098393;
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
</cutPoint818>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint819>
    boolean lb0 = true;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 5.751723591509843;
    boolean lb2 = false;
    Thought lo3 = Thought52.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    dk *= -1;
</cutPoint819>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint820>
    on -= dk;
    dk *= -1;
    if (bk) {
        if (bk) {
            boolean lb0 = true;
            double ld1 = 179.6565336661455;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk && bk;
            dk *= -1;
            Thought lo2 = Thought70.getInstance();
            ok.m1(dk, dk, dk, dk);
            ok = ok.m4(bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = bk && bk;
            Thought lo3 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            Thought lo4 = Thought64.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            dk *= -1;
            dk = dk + dk;
            bk = dk > dk;
</cutPoint820>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint821>
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb0 = false;
    boolean lb1 = true;
    bk = dk < dk;
    bk = dk > dk;
    dk = dk - dk;
    Thought lo2 = Thought79.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    double ld3 = 472.6110195290423;
    bk = !bk;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint821>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint822>
    Thought lo0 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld1 = 40.96645067339479;
    Thought lo2 = Thought14.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 110.56083974717096;
    double ld4 = 207.34348499154498;
    bk = dk > dk;
    dk = dk + dk;
    dk = dk - dk;
    boolean lb5 = false;
    Thought lo6 = Thought86.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb7 = true;
</cutPoint822>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint823>
    bk = bk || bk;
        bk = dk < dk;
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk = dk + dk;
    bk = bk && bk;
    dk *= -1;
</cutPoint823>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint824>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    dk *= -1;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
        bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint824>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint825>
    bk = !bk;
    double ld0 = 655.3247726040435;
    on -= dk;
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb1 = false;
        double ld2 = 5.983117924706675;
        for(int j=0; j<10; j++){
            bk = dk > dk;
            dk = dk + dk;
</cutPoint825>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint826>
    boolean lb0 = true;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo1 = Thought90.getInstance();
    Thought lo2 = Thought71.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    boolean lb3 = false;
    dk = ok.m3(bk, bk, bk, bk);
    double ld4 = 847.8918100759944;
    double ld5 = 619.7792932624083;
</cutPoint826>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint827>
    boolean lb0 = false;
        dk = dk + dk;
    Thought lo1 = Thought30.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = !bk;
    Thought lo3 = Thought70.getInstance(ok, ok, ok, ok);
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    boolean lb4 = true;
    bk = bk || bk;
    bk = bk || bk;
    double ld5 = 45.13866643311376;
    Thought lo6 = Thought67.getInstance(dk, dk, dk, dk);
    boolean lb7 = true;
    boolean lb8 = false;
    on -= dk;
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint827>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint828>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on -= dk;
        bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    bk = dk < dk;
    on += dk;
    boolean lb0 = true;
    double ld1 = 576.1762915585886;
    double ld2 = 647.4025334084006;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint828>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint829>
    boolean lb0 = false;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    if (bk) {
        dk = dk - dk;
        } else {
        bk = dk > dk;
        dk = dk + dk;
        boolean lb2 = false;
        dk = dk - dk;
        double ld3 = 32.933500238605156;
        dk *= -1;
        dk = ok.m3(ok, ok, ok, ok);
        dk = dk - dk;
</cutPoint829>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint830>
    boolean lb0 = true;
    Thought lo1 = Thought17.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
</cutPoint830>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint831>
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought83.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk || bk;
    boolean lb1 = true;
    dk *= -1;
    on += dk;
    double ld2 = 212.72998538322744;
</cutPoint831>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint832>
    bk = bk || bk;
    double ld0 = 421.133729597545;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk + dk;
    bk = !bk;
    ok.m2();
        bk = bk || bk;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb2 = false;
    bk = bk && bk;
</cutPoint832>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint833>
    bk = bk || bk;
    if (bk) {
        on += dk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb0 = true;
        bk = dk > dk;
        boolean lb1 = true;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        on += dk;
</cutPoint833>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint834>
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought3.getInstance();
    double ld1 = 322.6682493118424;
    for(int j=0; j<10; j++){
        }
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk - dk;
    Thought lo2 = Thought94.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    bk = bk && bk;
    bk = bk || bk;
    Thought lo3 = Thought79.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
</cutPoint834>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint835>
    Thought lo0 = Thought63.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 40.09506280068484;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought96.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
        Thought lo3 = Thought62.getInstance(bk, bk, bk, bk);
    boolean lb4 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk > dk;
        bk = !bk;
        boolean lb5 = false;
        on += dk;
</cutPoint835>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint836>
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    Thought lo0 = Thought73.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
        dk = dk + dk;
        dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk - dk;
    dk = dk - dk;
    bk = dk > dk;
</cutPoint836>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint837>
    boolean lb0 = false;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb2 = false;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    boolean lb3 = true;
    bk = !bk;
    bk = bk && bk;
    dk *= -1;
    double ld4 = 864.550188135994;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    dk = dk + dk;
    bk = dk < dk;
    boolean lb5 = false;
</cutPoint837>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint838>
    bk = dk < dk;
    dk = dk + dk;
    Thought lo0 = Thought46.getInstance(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    on -= dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 295.8725226853112;
    Thought lo2 = Thought69.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    Thought lo3 = Thought89.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m3();
    on += dk;
    Thought lo4 = Thought68.getInstance(dk, dk, dk, dk);
    dk *= -1;
    dk *= -1;
    bk = bk || bk;
    double ld5 = 206.24835834324222;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    boolean lb6 = false;
    boolean lb7 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld8 = 924.718339291131;
</cutPoint838>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint839>
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    bk = !bk;
    dk = dk + dk;
    bk = !bk;
    bk = dk < dk;
        dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint839>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought24 extends Thought{
private static ArrayList<Thought24> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 503.49257298899335;
private double fd1 = 918.7478443556871;
private Thought fo0 = null;
private Thought fo1 = null;
Thought24 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought24 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought24 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought24 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought24 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought24 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought24 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought24 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought24 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought24 instance = new Thought24 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought24 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought24 instance = new Thought24 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought24 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought24 instance = new Thought24 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought24 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought24 instance = new Thought24 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought24 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought24 instance = new Thought24 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought24 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought24 instance = new Thought24 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought24 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought24 instance = new Thought24 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought24 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought24 instance = new Thought24 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint840>
    dk = ok.m3(ok, ok, ok, ok);
    on -= dk;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
        dk = dk - dk;
    bk = dk < dk;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld0 = 276.61648513379333;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = false;
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 904.5758892414624;
    ok.m3(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
</cutPoint840>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint841>
    dk = dk - dk;
    Thought lo0 = Thought88.getInstance();
    bk = !bk;
    boolean lb1 = false;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb2 = false;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb3 = false;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        dk = dk - dk;
        Thought lo4 = Thought26.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        double ld5 = 108.88844180718924;
        dk = dk + dk;
        ok.m3();
        dk = dk + dk;
</cutPoint841>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint842>
    ok.m2(dk, dk, dk, dk);
    boolean lb0 = true;
    bk = dk < dk;
    if (bk) {
        bk = dk > dk;
        ok = ok.m4(bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        bk = bk && bk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        for(int j=0; j<10; j++){
            dk = ok.m3(ok, ok, ok, ok);
            bk = !bk;
            dk = dk + dk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb1 = false;
            bk = dk < dk;
            Thought lo2 = Thought18.getInstance();
            bk = dk > dk;
</cutPoint842>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint843>
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 157.07428413449378;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    boolean lb3 = true;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    bk = dk > dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint843>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint844>
    boolean lb0 = true;
    bk = bk || bk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    Thought lo3 = Thought92.getInstance(bk, bk, bk, bk);
</cutPoint844>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint845>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = true;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    dk *= -1;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 330.48897267005293;
    bk = !bk;
</cutPoint845>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint846>
    on += dk;
    Thought lo0 = Thought90.getInstance();
    ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb1 = true;
    dk = dk - dk;
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    on -= dk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 217.75580585233234;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint846>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint847>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb0 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    if (bk) {
        ok.m2();
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk || bk;
        bk = bk || bk;
        bk = bk && bk;
        on += dk;
        dk = dk + dk;
        dk = dk + dk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo2 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        dk = dk - dk;
        bk = bk || bk;
</cutPoint847>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint848>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = !bk;
    on += dk;
    dk = dk + dk;
    bk = dk < dk;
    on -= dk;
    on -= dk;
    ok.m3();
    double ld1 = 862.7699486973825;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint848>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint849>
    double ld0 = 473.8395478849637;
    Thought lo1 = Thought81.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    boolean lb3 = false;
    on += dk;
    bk = !bk;
    boolean lb4 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
        bk = dk > dk;
</cutPoint849>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint850>
    Thought lo0 = Thought68.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    bk = dk > dk;
    double ld1 = 282.1529084116127;
    boolean lb2 = true;
    dk *= -1;
    dk *= -1;
    Thought lo3 = Thought52.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    if (bk) {
        bk = !bk;
        } else {
        on -= dk;
        dk = dk - dk;
        dk = dk - dk;
        dk *= -1;
        dk = dk - dk;
</cutPoint850>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint851>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    boolean lb0 = true;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = ok.m2();
    boolean lb3 = false;
    bk = bk && bk;
    Thought lo4 = Thought10.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    Thought lo5 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    bk = bk && bk;
</cutPoint851>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint852>
    dk *= -1;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought44.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3();
    boolean lb1 = false;
</cutPoint852>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint853>
    boolean lb0 = false;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = true;
    on += dk;
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    double ld3 = 606.3101328834142;
    dk = dk - dk;
    dk *= -1;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo4 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    </cutPoint853>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint854>
    Thought lo0 = Thought55.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk - dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought44.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    double ld3 = 807.8872376260078;
    dk = dk + dk;
    boolean lb4 = true;
    bk = dk < dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint854>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint855>
    bk = bk && bk;
    double ld0 = 205.05046251964635;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = !bk;
    Thought lo1 = Thought19.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = bk || bk;
        bk = dk < dk;
        ok.m2();
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        for(int j=0; j<10; j++){
            ok = ok.m4(bk, bk, bk, bk);
            bk = bk && bk;
            dk *= -1;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = dk < dk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            double ld2 = 450.9122189092815;
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = !bk;
            ok.m3(ok, ok, ok, ok);
            boolean lb3 = false;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint855>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint856>
    bk = bk && bk;
    Thought lo0 = Thought55.getInstance();
    dk *= -1;
    dk *= -1;
    bk = dk < dk;
    on += dk;
    ok.m3(dk, dk, dk, dk);
    on += dk;
    Thought lo1 = Thought28.getInstance(bk, bk, bk, bk);
    boolean lb2 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    Thought lo4 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    on -= dk;
    bk = bk || bk;
    double ld5 = 603.4226293020054;
    bk = dk > dk;
    boolean lb6 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
</cutPoint856>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint857>
    Thought lo0 = Thought8.getInstance(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
        dk = dk + dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    Thought lo2 = Thought53.getInstance(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
        Thought lo3 = Thought84.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint857>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint858>
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        dk = dk + dk;
        if (bk) {
            ok.m3();
            } else if (bk) {
            dk = dk - dk;
            on -= dk;
            boolean lb1 = false;
</cutPoint858>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint859>
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
        bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok.m2();
    dk = dk + dk;
</cutPoint859>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint860>
    boolean lb0 = false;
    ok.m3(dk, dk, dk, dk);
    double ld1 = 789.8865964154139;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint860>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint861>
    boolean lb0 = false;
    bk = dk > dk;
    boolean lb1 = true;
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    double ld2 = 921.3556544296257;
    ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo3 = Thought73.getInstance(bk, bk, bk, bk);
        bk = bk || bk;
    bk = bk && bk;
    bk = dk > dk;
    boolean lb4 = true;
</cutPoint861>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint862>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
        dk *= -1;
    if (bk) {
        Thought lo2 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint862>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint863>
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    bk = bk || bk;
        bk = bk || bk;
    Thought lo0 = Thought73.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
    boolean lb1 = false;
    ok.m3();
    bk = dk < dk;
    bk = !bk;
    bk = !bk;
    double ld2 = 577.6145502976298;
    dk = dk - dk;
    dk = dk - dk;
    bk = dk > dk;
    double ld3 = 71.37116502572576;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb4 = false;
    dk = dk - dk;
    dk = dk + dk;
</cutPoint863>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint864>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought74.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought2.getInstance();
    bk = !bk;
    on -= dk;
    boolean lb2 = true;
    Thought lo3 = Thought89.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        }
</cutPoint864>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint865>
    bk = bk && bk;
    boolean lb0 = true;
    dk = dk + dk;
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb2 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld3 = 374.384733106703;
    on -= dk;
</cutPoint865>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint866>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld0 = 708.1056637669628;
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    double ld1 = 519.7912619675576;
    boolean lb2 = false;
    bk = dk < dk;
    boolean lb3 = false;
    bk = bk || bk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 533.1858276391987;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
        on -= dk;
    bk = dk < dk;
    on += dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
</cutPoint866>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint867>
    bk = dk > dk;
    dk = dk + dk;
        bk = bk || bk;
    double ld0 = 276.48920779669277;
    bk = ok.m2();
    bk = dk > dk;
    bk = bk && bk;
    bk = dk > dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    boolean lb1 = false;
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo2 = Thought15.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint867>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint868>
    bk = dk < dk;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    Thought lo0 = Thought60.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    if (bk) {
        Thought lo1 = Thought55.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo2 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint868>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint869>
    bk = dk > dk;
        boolean lb0 = true;
    bk = bk && bk;
    boolean lb1 = false;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
</cutPoint869>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint870>
    dk *= -1;
    bk = dk < dk;
    boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought51.getInstance(ok, ok, ok, ok);
    boolean lb3 = false;
    dk = dk + dk;
    Thought lo4 = Thought31.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo5 = Thought17.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint870>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint871>
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought82.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk > dk;
    bk = dk > dk;
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
        bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb3 = false;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    bk = bk && bk;
    on -= dk;
</cutPoint871>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint872>
    bk = bk && bk;
    bk = dk > dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld0 = 435.0136233837715;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
    boolean lb1 = true;
    bk = dk > dk;
    dk *= -1;
    boolean lb2 = true;
    dk = dk - dk;
    boolean lb3 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint872>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint873>
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    double ld0 = 513.1337467283452;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    bk = dk < dk;
    bk = bk && bk;
    bk = bk || bk;
    bk = !bk;
    boolean lb1 = true;
    bk = !bk;
    on -= dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought17.getInstance(ok, ok, ok, ok);
</cutPoint873>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint874>
    Thought lo0 = Thought8.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought43.getInstance();
    Thought lo2 = Thought40.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    double ld3 = 35.61553731871402;
    double ld4 = 304.6495415695672;
    dk *= -1;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    bk = dk > dk;
</cutPoint874>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought25 extends Thought{
private static ArrayList<Thought25> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 185.7803711763471;
private double fd1 = 221.59675801201487;
private Thought fo0 = null;
private Thought fo1 = null;
Thought25 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought25 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought25 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought25 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought25 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought25 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought25 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought25 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought25 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought25 instance = new Thought25 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought25 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought25 instance = new Thought25 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought25 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought25 instance = new Thought25 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought25 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought25 instance = new Thought25 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought25 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought25 instance = new Thought25 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought25 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought25 instance = new Thought25 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought25 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought25 instance = new Thought25 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought25 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought25 instance = new Thought25 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint875>
    double ld0 = 524.265232096781;
    for(int j=0; j<10; j++){
        dk *= -1;
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        on += dk;
        if (bk) {
            bk = bk && bk;
            dk *= -1;
            ok = ok.m4(ok, ok, ok, ok);
            boolean lb1 = false;
            on -= dk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            dk *= -1;
            bk = bk && bk;
            dk *= -1;
            double ld2 = 40.24309028464167;
            Thought lo3 = Thought23.getInstance();
</cutPoint875>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint876>
    dk *= -1;
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo0 = Thought42.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought46.getInstance(ok, ok, ok, ok);
    boolean lb2 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
        ok.m2(dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    bk = !bk;
    bk = bk && bk;
    bk = bk || bk;
    double ld4 = 396.6221377727812;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint876>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint877>
    double ld0 = 115.84002913182313;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo1 = Thought90.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
    double ld2 = 877.4104681777945;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld3 = 382.41748527144625;
    bk = dk > dk;
    ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = false;
    double ld6 = 398.84447532326453;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint877>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint878>
    bk = dk < dk;
    boolean lb0 = false;
    bk = dk > dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    dk = dk - dk;
    dk = dk + dk;
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought30.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint878>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint879>
    double ld0 = 256.4088404825484;
    double ld1 = 670.6876133720616;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
    bk = !bk;
    bk = bk && bk;
    dk = dk - dk;
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = dk > dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint879>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint880>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    double ld1 = 71.88951985806167;
    dk *= -1;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    bk = bk && bk;
    boolean lb2 = true;
    ok = ok.m4();
    boolean lb3 = false;
    boolean lb4 = true;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    Thought lo5 = Thought79.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo6 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
</cutPoint880>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint881>
    dk *= -1;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = !bk;
    ok = ok.m4();
    dk *= -1;
    dk *= -1;
    dk = dk - dk;
    Thought lo1 = Thought46.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    bk = dk < dk;
    bk = dk < dk;
    bk = bk || bk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint881>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint882>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3();
    bk = bk || bk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
        on += dk;
    dk *= -1;
    on -= dk;
    bk = !bk;
    on += dk;
    Thought lo0 = Thought85.getInstance(bk, bk, bk, bk);
    Thought lo1 = Thought12.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought19.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint882>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint883>
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    dk = ok.m3();
    dk *= -1;
    dk = dk + dk;
    Thought lo0 = Thought67.getInstance(dk, dk, dk, dk);
    Thought lo1 = Thought66.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    boolean lb2 = true;
    Thought lo3 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld4 = 518.146703515279;
    boolean lb5 = false;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint883>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint884>
    on -= dk;
    Thought lo0 = Thought50.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought35.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 547.7038307724831;
    dk = dk - dk;
    dk = dk - dk;
    ok.m2();
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
    boolean lb3 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
</cutPoint884>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint885>
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
        bk = bk || bk;
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = bk || bk;
        boolean lb0 = true;
        ok = ok.m4();
        double ld1 = 814.0920669514367;
        dk *= -1;
        if (bk) {
            dk = dk - dk;
            ok = ok.m4(dk, dk, dk, dk);
            dk *= -1;
            dk = dk - dk;
            dk = dk + dk;
            boolean lb2 = false;
            Thought lo3 = Thought37.getInstance(bk, bk, bk, bk);
            bk = bk || bk;
            double ld4 = 422.4405349135512;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint885>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint886>
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 935.2142431943896;
    boolean lb1 = false;
    on -= dk;
    on += dk;
    boolean lb2 = false;
        double ld3 = 348.6730146235466;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint886>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint887>
    bk = bk && bk;
    dk = ok.m3();
    if (bk) {
        dk = ok.m3(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo0 = Thought31.getInstance();
        dk = ok.m3(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        on -= dk;
        dk *= -1;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb1 = false;
</cutPoint887>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint888>
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = false;
    dk = dk - dk;
    double ld1 = 709.0468045159195;
    bk = !bk;
    boolean lb2 = true;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        ok.m2();
</cutPoint888>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint889>
    double ld0 = 488.60214608418346;
    Thought lo1 = Thought65.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    on += dk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    on -= dk;
    if (bk) {
        boolean lb2 = false;
        bk = bk || bk;
        Thought lo3 = Thought63.getInstance(ok, ok, ok, ok);
        boolean lb4 = false;
        dk = dk - dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3();
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
</cutPoint889>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint890>
    bk = bk && bk;
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    dk = dk + dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok.m3();
        ok = ok.m4(dk, dk, dk, dk);
        on -= dk;
</cutPoint890>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint891>
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = true;
    double ld1 = 944.153709256153;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok);
    on += dk;
    bk = dk < dk;
    dk = dk - dk;
    double ld3 = 918.6239819862434;
    boolean lb4 = false;
</cutPoint891>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint892>
    boolean lb0 = true;
    bk = bk && bk;
    dk = dk - dk;
    double ld1 = 875.2378741002477;
    on -= dk;
    bk = bk || bk;
    dk *= -1;
    bk = dk < dk;
    boolean lb2 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    bk = bk && bk;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
        Thought lo3 = Thought69.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 331.7972702722522;
</cutPoint892>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint893>
    bk = !bk;
    dk = dk + dk;
    bk = ok.m2();
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    double ld0 = 546.7614121338636;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb2 = true;
    double ld3 = 624.285609062605;
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought92.getInstance();
    bk = bk && bk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    if (bk) {
        bk = !bk;
        bk = ok.m2(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
</cutPoint893>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint894>
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4();
    bk = bk && bk;
    double ld0 = 228.74952848991876;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 905.2896831339784;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk - dk;
    dk *= -1;
</cutPoint894>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint895>
    bk = bk || bk;
    dk *= -1;
    Thought lo0 = Thought6.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    boolean lb2 = true;
    dk = ok.m3();
    on += dk;
    double ld3 = 429.4880964167345;
    boolean lb4 = false;
    double ld5 = 874.8834631383374;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint895>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint896>
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    Thought lo0 = Thought7.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    boolean lb3 = false;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo4 = Thought14.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    double ld5 = 270.771852333994;
    boolean lb6 = false;
</cutPoint896>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint897>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    double ld0 = 633.4416028146244;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought86.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo2 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 458.96542249058456;
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
</cutPoint897>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint898>
    Thought lo0 = Thought92.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought59.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    if (bk) {
        bk = bk && bk;
        dk = dk - dk;
        boolean lb2 = false;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        boolean lb3 = false;
        bk = dk > dk;
        boolean lb4 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        bk = dk > dk;
        boolean lb5 = true;
</cutPoint898>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint899>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = true;
    on += dk;
    dk = ok.m3();
    bk = dk > dk;
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint899>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint900>
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    on -= dk;
    bk = bk && bk;
    dk *= -1;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 953.6501808742801;
    on -= dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk - dk;
    Thought lo1 = Thought33.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 946.9591381085021;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint900>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint901>
    double ld0 = 504.5392266717258;
    boolean lb1 = true;
    boolean lb2 = false;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = dk > dk;
    bk = ok.m2();
    double ld4 = 930.9514604513356;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
</cutPoint901>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint902>
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb1 = true;
    on += dk;
    </cutPoint902>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint903>
    boolean lb0 = true;
        bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
        bk = !bk;
    boolean lb1 = true;
    Thought lo2 = Thought36.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on += dk;
    boolean lb3 = false;
    bk = bk && bk;
</cutPoint903>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint904>
    ok.m2();
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint904>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint905>
    dk = dk + dk;
    dk = dk - dk;
    on -= dk;
    double ld0 = 116.64208923091556;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 649.2085213549657;
    bk = !bk;
        ok = ok.m4();
    bk = dk < dk;
    bk = bk && bk;
</cutPoint905>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint906>
    ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought54.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
        dk = dk - dk;
    double ld1 = 301.3565802967075;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 655.2778994055985;
    bk = bk && bk;
    bk = bk && bk;
    if (bk) {
</cutPoint906>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint907>
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    double ld0 = 352.779668149918;
    double ld1 = 686.1431111352703;
    boolean lb2 = true;
    boolean lb3 = false;
    boolean lb4 = true;
    bk = dk > dk;
    double ld5 = 962.4457545389564;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb6 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo7 = Thought57.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo8 = Thought35.getInstance();
    boolean lb9 = false;
    boolean lb10 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
</cutPoint907>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint908>
    dk = dk + dk;
        dk *= -1;
    bk = dk < dk;
    Thought lo0 = Thought50.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb1 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk > dk;
    boolean lb3 = false;
    dk = dk - dk;
    boolean lb4 = false;
    boolean lb5 = true;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb6 = true;
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint908>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint909>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought58.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb1 = false;
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    bk = dk > dk;
    on += dk;
    bk = bk && bk;
        bk = bk || bk;
    bk = dk < dk;
    Thought lo2 = Thought48.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    bk = bk && bk;
    on -= dk;
</cutPoint909>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought26 extends Thought{
private static ArrayList<Thought26> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 64.5862196554429;
private double fd1 = 764.7781991212796;
private Thought fo0 = null;
private Thought fo1 = null;
Thought26 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought26 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought26 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought26 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought26 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought26 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought26 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought26 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought26 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought26 instance = new Thought26 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought26 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought26 instance = new Thought26 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought26 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought26 instance = new Thought26 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought26 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought26 instance = new Thought26 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought26 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought26 instance = new Thought26 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought26 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought26 instance = new Thought26 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought26 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought26 instance = new Thought26 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought26 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought26 instance = new Thought26 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint910>
    bk = dk > dk;
    bk = bk || bk;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 154.2744704505947;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    boolean lb3 = true;
    on += dk;
    dk *= -1;
    ok.m3();
</cutPoint910>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint911>
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    bk = !bk;
    bk = bk || bk;
    bk = dk > dk;
    Thought lo1 = Thought93.getInstance(bk, bk, bk, bk);
    Thought lo2 = Thought0.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    double ld4 = 962.0578407098302;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    on += dk;
    double ld5 = 145.16262763449035;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo6 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint911>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint912>
    dk = ok.m3();
    dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = false;
    dk *= -1;
    bk = bk && bk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    bk = !bk;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        dk *= -1;
        Thought lo2 = Thought12.getInstance(ok, ok, ok, ok);
</cutPoint912>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint913>
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    Thought lo0 = Thought77.getInstance(dk, dk, dk, dk);
    dk *= -1;
    double ld1 = 961.6017395417867;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk + dk;
</cutPoint913>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint914>
    boolean lb0 = true;
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        bk = !bk;
        on += dk;
        bk = dk > dk;
        bk = dk > dk;
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok);
        boolean lb1 = false;
</cutPoint914>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint915>
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought1.getInstance();
    on += dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk - dk;
    Thought lo2 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 932.3029230257267;
    dk *= -1;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    dk *= -1;
    dk = dk - dk;
    on -= dk;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo4 = Thought13.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    ok.m1(bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint915>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint916>
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        on += dk;
        boolean lb0 = false;
        on += dk;
        bk = dk < dk;
        double ld1 = 684.5986982987832;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        boolean lb2 = false;
        double ld3 = 85.05756162976353;
        dk = ok.m3();
        bk = dk < dk;
        dk = ok.m3(dk, dk, dk, dk);
        double ld4 = 341.9601804666131;
        bk = !bk;
        dk = dk + dk;
        double ld5 = 773.8100342829513;
        dk *= -1;
        bk = !bk;
        }
    boolean lb6 = false;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint916>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint917>
    dk = dk - dk;
    dk = dk - dk;
    if (bk) {
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        bk = !bk;
        on += dk;
        bk = bk && bk;
        ok.m2(ok, ok, ok, ok);
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        Thought lo0 = Thought76.getInstance();
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb1 = true;
        ok = ok.m4(bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = dk > dk;
</cutPoint917>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint918>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    Thought lo0 = Thought60.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint918>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint919>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 748.775330667968;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought53.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    Thought lo2 = Thought70.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    on -= dk;
    bk = bk || bk;
    Thought lo3 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint919>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint920>
    double ld0 = 762.2632863711603;
    Thought lo1 = Thought12.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld2 = 291.2478649047671;
    bk = dk > dk;
    bk = !bk;
    boolean lb3 = false;
    bk = dk > dk;
    dk = dk + dk;
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint920>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint921>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = true;
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    on -= dk;
    for(int j=0; j<10; j++){
        on += dk;
        Thought lo1 = Thought47.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld2 = 540.3079885058379;
        bk = bk && bk;
</cutPoint921>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint922>
    if (bk) {
        bk = dk > dk;
        boolean lb0 = false;
        dk = dk + dk;
        ok = ok.m4();
        boolean lb1 = false;
        ok = ok.m4(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        on += dk;
        bk = bk && bk;
        dk = dk + dk;
        boolean lb2 = true;
        Thought lo3 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        boolean lb4 = true;
        Thought lo5 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb6 = false;
        on -= dk;
        on -= dk;
        on += dk;
        bk = bk || bk;
        bk = !bk;
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint922>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint923>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
    dk = dk - dk;
    boolean lb0 = true;
    dk *= -1;
    boolean lb1 = false;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    bk = bk || bk;
    bk = bk && bk;
    boolean lb2 = false;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk - dk;
    Thought lo3 = Thought2.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint923>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint924>
    boolean lb0 = true;
    boolean lb1 = false;
    Thought lo2 = Thought46.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
</cutPoint924>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint925>
    boolean lb0 = false;
    Thought lo1 = Thought74.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    double ld2 = 318.8404215295066;
    Thought lo3 = Thought31.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    Thought lo4 = Thought68.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo5 = Thought48.getInstance(ok, ok, ok, ok);
    Thought lo6 = Thought79.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
    bk = dk > dk;
    Thought lo7 = Thought4.getInstance();
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
</cutPoint925>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint926>
    for(int j=0; j<10; j++){
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb0 = false;
        bk = bk && bk;
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok);
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk *= -1;
        bk = bk || bk;
        on += dk;
        dk *= -1;
        Thought lo1 = Thought67.getInstance();
        dk *= -1;
        dk = ok.m3(dk, dk, dk, dk);
        boolean lb2 = false;
        dk = dk - dk;
        on += dk;
</cutPoint926>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint927>
    boolean lb0 = false;
    double ld1 = 9.191756293926018;
    double ld2 = 212.63346626275933;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb3 = true;
</cutPoint927>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint928>
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
    double ld0 = 797.969217758478;
    ok.m2();
    bk = dk > dk;
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk);
    boolean lb1 = true;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok);
    Thought lo3 = Thought23.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint928>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint929>
    bk = bk || bk;
    dk = dk - dk;
    on -= dk;
    on += dk;
    bk = dk > dk;
    bk = !bk;
    boolean lb0 = true;
    dk = ok.m3();
    bk = !bk;
    bk = !bk;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 978.4797841943066;
    bk = !bk;
    boolean lb2 = false;
    dk = dk - dk;
</cutPoint929>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint930>
    bk = ok.m2(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld0 = 828.0309556740568;
        Thought lo1 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo2 = Thought81.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought86.getInstance();
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        ok.m2(bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk > dk;
        bk = !bk;
        on += dk;
        dk *= -1;
        bk = bk || bk;
        double ld4 = 690.509488431838;
        for(int j=0; j<10; j++){
            on -= dk;
            on += dk;
            bk = bk && bk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = !bk;
            dk = dk - dk;
</cutPoint930>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint931>
    bk = !bk;
    dk = dk - dk;
    Thought lo0 = Thought36.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        on += dk;
        bk = bk || bk;
        } else {
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
</cutPoint931>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint932>
    boolean lb0 = true;
    double ld1 = 963.5926242182036;
    dk = dk + dk;
    dk *= -1;
        ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb2 = true;
    on -= dk;
    Thought lo3 = Thought0.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    boolean lb4 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk && bk;
</cutPoint932>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint933>
    dk *= -1;
    bk = !bk;
    boolean lb0 = true;
    bk = bk && bk;
    boolean lb1 = true;
    bk = bk || bk;
    bk = bk && bk;
    Thought lo2 = Thought36.getInstance(dk, dk, dk, dk);
    double ld3 = 888.4714425894417;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    boolean lb4 = false;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
        bk = dk < dk;
    dk = dk - dk;
    bk = !bk;
</cutPoint933>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint934>
    double ld0 = 283.62921951829844;
    dk = dk - dk;
    dk = dk + dk;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    double ld1 = 668.0530517691651;
    dk *= -1;
        dk = dk + dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
</cutPoint934>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint935>
    double ld0 = 18.652411892249493;
    Thought lo1 = Thought66.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk + dk;
    bk = dk < dk;
    bk = dk > dk;
    dk = dk - dk;
        dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4();
    boolean lb3 = true;
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
    Thought lo4 = Thought94.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld5 = 328.4552367272158;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    double ld6 = 709.9522610637255;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint935>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint936>
    double ld0 = 561.9987929026373;
    bk = bk || bk;
    bk = dk > dk;
        Thought lo1 = Thought80.getInstance();
    dk = dk - dk;
    dk = dk - dk;
    bk = bk || bk;
    dk *= -1;
    double ld2 = 841.3606722861779;
        dk = dk - dk;
    dk *= -1;
    </cutPoint936>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint937>
    dk *= -1;
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought86.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk *= -1;
    Thought lo1 = Thought95.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    double ld2 = 457.24348262615416;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb3 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb4 = true;
    bk = !bk;
</cutPoint937>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint938>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld0 = 184.94357905102316;
    bk = !bk;
    ok = ok.m4();
    bk = dk > dk;
    bk = dk < dk;
    dk = dk - dk;
    boolean lb1 = false;
    boolean lb2 = true;
    bk = bk && bk;
</cutPoint938>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint939>
        dk = dk + dk;
    boolean lb0 = true;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    boolean lb1 = true;
    bk = dk > dk;
    bk = !bk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought64.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 814.3473609487872;
    bk = bk && bk;
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk);
    dk *= -1;
</cutPoint939>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint940>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    Thought lo0 = Thought11.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1();
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = true;
</cutPoint940>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint941>
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought35.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought72.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok.m3(bk, bk, bk, bk);
        bk = dk > dk;
        bk = !bk;
        boolean lb2 = true;
        Thought lo3 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        double ld4 = 480.65827302528226;
        bk = bk && bk;
        bk = dk > dk;
        double ld5 = 73.55789704920493;
        bk = !bk;
        double ld6 = 446.14021300183566;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint941>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint942>
    bk = bk || bk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk && bk;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
        dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought90.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 82.87084026407656;
    double ld2 = 309.3912528771476;
    on -= dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
</cutPoint942>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint943>
    double ld0 = 504.7378102338908;
    boolean lb1 = false;
    Thought lo2 = Thought91.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    double ld4 = 178.02986828892122;
        ok.m3();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo5 = Thought30.getInstance(bk, bk, bk, bk);
    Thought lo6 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld7 = 999.6646365006372;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo8 = Thought36.getInstance(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4();
    bk = dk > dk;
    dk = dk - dk;
    bk = bk && bk;
    bk = !bk;
    bk = bk && bk;
</cutPoint943>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint944>
    boolean lb0 = true;
    ok.m1(dk, dk, dk, dk);
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = !bk;
    Thought lo4 = Thought6.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    Thought lo5 = Thought5.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    boolean lb6 = false;
    Thought lo7 = Thought54.getInstance();
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo8 = Thought24.getInstance(bk, bk, bk, bk);
    boolean lb9 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint944>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought27 extends Thought{
private static ArrayList<Thought27> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 305.765128889682;
private double fd1 = 380.25587656164595;
private Thought fo0 = null;
private Thought fo1 = null;
Thought27 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought27 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought27 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought27 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought27 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought27 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought27 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought27 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought27 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought27 instance = new Thought27 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought27 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought27 instance = new Thought27 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought27 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought27 instance = new Thought27 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought27 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought27 instance = new Thought27 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought27 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought27 instance = new Thought27 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought27 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought27 instance = new Thought27 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought27 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought27 instance = new Thought27 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought27 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought27 instance = new Thought27 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint945>
    bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld0 = 78.42669329552787;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought52.getInstance(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = !bk;
        dk = dk + dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint945>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint946>
    bk = dk < dk;
    bk = dk > dk;
    bk = !bk;
    on += dk;
    bk = !bk;
    ok = ok.m4();
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    double ld0 = 13.588626706975234;
    Thought lo1 = Thought15.getInstance(bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk - dk;
    boolean lb3 = false;
    bk = !bk;
    Thought lo4 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb5 = true;
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb6 = false;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
</cutPoint946>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint947>
    bk = bk || bk;
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4();
    double ld0 = 933.6876542245806;
    ok.m2(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb1 = true;
    dk = dk + dk;
    boolean lb2 = true;
    bk = bk && bk;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    on -= dk;
</cutPoint947>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint948>
    for(int j=0; j<10; j++){
        dk = dk + dk;
        bk = !bk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        on -= dk;
        dk = dk - dk;
        ok = ok.m4();
        on -= dk;
        bk = !bk;
        ok.m3(dk, dk, dk, dk);
        bk = dk > dk;
        dk *= -1;
        if (bk) {
            dk *= -1;
            dk = dk + dk;
            boolean lb0 = true;
            bk = dk < dk;
            on -= dk;
            on -= dk;
            dk *= -1;
            dk = ok.m3(bk, bk, bk, bk);
            bk = dk < dk;
</cutPoint948>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint949>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought63.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    Thought lo1 = Thought9.getInstance();
    bk = dk > dk;
    Thought lo2 = Thought77.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    Thought lo3 = Thought88.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    bk = dk < dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    Thought lo4 = Thought65.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    </cutPoint949>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint950>
    dk = dk - dk;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    if (bk) {
        bk = bk && bk;
        bk = !bk;
        on += dk;
        ok = ok.m4();
        dk = dk + dk;
        bk = dk < dk;
        bk = ok.m2(dk, dk, dk, dk);
</cutPoint950>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint951>
    Thought lo0 = Thought89.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb1 = false;
    on += dk;
    Thought lo2 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
</cutPoint951>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint952>
    double ld0 = 314.98286491302036;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    ok.m2();
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        bk = ok.m2(bk, bk, bk, bk);
</cutPoint952>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint953>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought78.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb2 = false;
    Thought lo3 = Thought11.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    if (bk) {
        dk *= -1;
        double ld4 = 176.00597531418887;
</cutPoint953>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint954>
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    on -= dk;
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    dk = dk - dk;
    bk = dk > dk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
</cutPoint954>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint955>
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
        bk = dk < dk;
    dk *= -1;
    bk = dk > dk;
    bk = dk < dk;
    dk = dk - dk;
    boolean lb1 = true;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok);
        double ld2 = 465.5105245243893;
        bk = dk > dk;
</cutPoint955>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint956>
    boolean lb0 = false;
    Thought lo1 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = dk < dk;
    Thought lo2 = Thought64.getInstance();
    dk = dk + dk;
    boolean lb3 = false;
    boolean lb4 = false;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb5 = false;
    Thought lo6 = Thought26.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    Thought lo7 = Thought38.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb8 = false;
    dk = ok.m3();
        dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld9 = 30.7916517574152;
    Thought lo10 = Thought17.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint956>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint957>
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    bk = !bk;
    double ld2 = 756.783989050526;
    on -= dk;
    bk = !bk;
    on += dk;
    Thought lo3 = Thought71.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb4 = false;
    bk = dk > dk;
    bk = bk && bk;
    bk = dk > dk;
    boolean lb5 = true;
</cutPoint957>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint958>
    double ld0 = 629.5458531499706;
    boolean lb1 = false;
    bk = bk && bk;
    ok = ok.m4();
    bk = !bk;
    for(int j=0; j<10; j++){
        dk = ok.m3(dk, dk, dk, dk);
        bk = dk < dk;
        dk = ok.m3(bk, bk, bk, bk);
        double ld2 = 970.2702677376016;
</cutPoint958>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint959>
    double ld0 = 480.92083263964594;
    on -= dk;
    dk = dk - dk;
    bk = bk && bk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        on -= dk;
        on += dk;
        bk = ok.m2(ok, ok, ok, ok);
        double ld1 = 378.191590544671;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2();
        ok = ok.m4(dk, dk, dk, dk);
        double ld2 = 255.31055237099966;
        Thought lo3 = Thought78.getInstance(bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint959>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint960>
    dk = dk - dk;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    dk *= -1;
    if (bk) {
        bk = bk && bk;
        } else {
        Thought lo1 = Thought71.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        bk = dk < dk;
        boolean lb2 = true;
        ok.m3();
        dk *= -1;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
        dk *= -1;
</cutPoint960>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint961>
    bk = bk || bk;
    on += dk;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 184.82645723997982;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    double ld1 = 525.8067329413469;
    boolean lb2 = true;
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4();
</cutPoint961>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint962>
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    on -= dk;
    bk = dk < dk;
    boolean lb1 = false;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    double ld2 = 351.79193448896757;
    ok = ok.m4();
    boolean lb3 = true;
</cutPoint962>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint963>
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    dk = dk + dk;
    bk = !bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    bk = bk || bk;
    Thought lo1 = Thought32.getInstance(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
        dk = ok.m3(dk, dk, dk, dk);
    boolean lb2 = false;
    dk = dk + dk;
    on -= dk;
    dk = dk - dk;
</cutPoint963>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint964>
    Thought lo0 = Thought73.getInstance(bk, bk, bk, bk);
    double ld1 = 733.4448773241223;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 637.4770532490944;
    dk = dk + dk;
    ok.m1();
    ok.m1(dk, dk, dk, dk);
    double ld3 = 686.4236136137017;
    dk = dk - dk;
    double ld4 = 699.3826059726483;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo5 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 333.66949015090375;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    Thought lo7 = Thought22.getInstance(ok, ok, ok, ok);
</cutPoint964>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint965>
    Thought lo0 = Thought36.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        boolean lb1 = true;
        boolean lb2 = false;
        dk = ok.m3(bk, bk, bk, bk);
        if (bk) {
            bk = bk || bk;
            on -= dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = !bk;
            bk = bk && bk;
            bk = dk < dk;
            dk *= -1;
            bk = dk < dk;
            dk = dk + dk;
            bk = !bk;
            Thought lo3 = Thought19.getInstance(ok, ok, ok, ok);
            dk *= -1;
            double ld4 = 383.76168653215876;
            dk = dk + dk;
</cutPoint965>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint966>
    Thought lo0 = Thought76.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    for(int j=0; j<10; j++){
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = false;
        boolean lb2 = false;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb3 = true;
        on += dk;
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb4 = true;
        boolean lb5 = false;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        bk = dk < dk;
        ok = ok.m4();
        }
    boolean lb6 = false;
    ok.m1(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    dk = dk + dk;
    on += dk;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint966>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint967>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 565.2304474172349;
    double ld1 = 387.81395213167565;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 689.1283543457698;
    bk = dk < dk;
    bk = bk || bk;
</cutPoint967>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint968>
    on -= dk;
    dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 167.14522183558063;
    bk = dk < dk;
    bk = bk && bk;
    ok.m2();
    dk = dk + dk;
    bk = bk || bk;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    boolean lb2 = true;
</cutPoint968>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint969>
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    if (bk) {
        bk = bk && bk;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld0 = 903.6723628226626;
        dk = dk - dk;
        ok.m1();
        dk = ok.m3(dk, dk, dk, dk);
        dk = dk + dk;
        bk = dk < dk;
        ok.m2(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
</cutPoint969>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint970>
    Thought lo0 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 635.6561360898756;
    bk = bk && bk;
    dk *= -1;
    bk = !bk;
    ok.m2();
    on -= dk;
    bk = !bk;
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    boolean lb2 = false;
</cutPoint970>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint971>
        bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    bk = bk || bk;
    boolean lb1 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = !bk;
        double ld2 = 54.87097777078197;
        ok = ok.m4();
        double ld3 = 849.6537457666858;
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk - dk;
        boolean lb4 = true;
        dk = dk + dk;
</cutPoint971>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint972>
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    for(int j=0; j<10; j++){
        bk = !bk;
</cutPoint972>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint973>
    boolean lb0 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought4.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk + dk;
    bk = dk < dk;
    on -= dk;
    Thought lo2 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    dk = dk - dk;
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    dk *= -1;
    dk = dk - dk;
    bk = dk < dk;
    dk = dk - dk;
    boolean lb4 = false;
    dk = dk - dk;
    Thought lo5 = Thought70.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
    double ld6 = 802.3513632540773;
</cutPoint973>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint974>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk < dk;
    double ld0 = 395.93665773233414;
    dk = dk + dk;
    on += dk;
    double ld1 = 463.63550188209837;
    bk = !bk;
    boolean lb2 = true;
    dk *= -1;
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint974>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint975>
    bk = !bk;
    bk = dk < dk;
    boolean lb0 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = !bk;
    bk = bk && bk;
    bk = bk && bk;
    on += dk;
    dk = dk + dk;
</cutPoint975>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint976>
    bk = dk > dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        }
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    bk = dk > dk;
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    Thought lo1 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint976>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint977>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
        ok = ok.m4();
    bk = dk > dk;
    bk = dk < dk;
    on -= dk;
    bk = bk && bk;
    bk = dk > dk;
    bk = bk && bk;
    on -= dk;
    double ld0 = 308.6127802003511;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    Thought lo1 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint977>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint978>
    on -= dk;
    dk = dk - dk;
    double ld0 = 35.36244257375244;
    bk = bk || bk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    bk = !bk;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    dk *= -1;
    bk = !bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint978>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint979>
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought12.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint979>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought28 extends Thought{
private static ArrayList<Thought28> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 993.7108422740114;
private double fd1 = 433.31443741924664;
private Thought fo0 = null;
private Thought fo1 = null;
Thought28 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought28 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought28 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought28 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought28 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought28 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought28 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought28 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought28 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought28 instance = new Thought28 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought28 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought28 instance = new Thought28 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought28 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought28 instance = new Thought28 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought28 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought28 instance = new Thought28 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought28 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought28 instance = new Thought28 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought28 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought28 instance = new Thought28 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought28 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought28 instance = new Thought28 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought28 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought28 instance = new Thought28 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint980>
    double ld0 = 932.1535525907597;
    bk = bk && bk;
    dk = dk + dk;
    double ld1 = 416.0684083729114;
    dk *= -1;
    dk = dk - dk;
    dk = ok.m3();
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
</cutPoint980>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint981>
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 427.2584910965483;
    dk = dk + dk;
    dk *= -1;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint981>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint982>
    bk = !bk;
    boolean lb0 = true;
    Thought lo1 = Thought49.getInstance(dk, dk, dk, dk);
    boolean lb2 = true;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb3 = true;
    boolean lb4 = true;
    boolean lb5 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    double ld6 = 759.9005949919666;
    dk = dk + dk;
</cutPoint982>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint983>
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = bk && bk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb2 = false;
    on -= dk;
    bk = bk || bk;
    bk = bk || bk;
        dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought63.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
</cutPoint983>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint984>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    boolean lb0 = true;
    on -= dk;
    bk = bk && bk;
    on -= dk;
    ok.m1(bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought93.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought97.getInstance(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        } else {
        dk = dk - dk;
        boolean lb3 = false;
        bk = dk > dk;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        ok.m3(bk, bk, bk, bk);
        dk *= -1;
        on += dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint984>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint985>
    bk = bk && bk;
    bk = bk && bk;
    double ld0 = 932.5899213241688;
    on += dk;
    double ld1 = 556.2894541530125;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk *= -1;
    bk = dk < dk;
    bk = dk > dk;
    boolean lb3 = true;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    bk = !bk;
    bk = !bk;
    dk *= -1;
    bk = !bk;
    ok.m2();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint985>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint986>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld0 = 781.6120811675048;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought61.getInstance(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    double ld2 = 823.097916804733;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo3 = Thought24.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        ok.m1(ok, ok, ok, ok);
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint986>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint987>
    bk = bk || bk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    on += dk;
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 881.7298577403052;
    Thought lo1 = Thought44.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint987>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint988>
    bk = dk > dk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        bk = dk < dk;
        bk = bk || bk;
        double ld0 = 984.8245498595933;
        ok.m1();
        double ld1 = 158.2198996156532;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
        bk = bk || bk;
        bk = dk < dk;
        bk = bk && bk;
        bk = !bk;
        bk = dk < dk;
        bk = bk || bk;
        boolean lb2 = true;
        bk = !bk;
        bk = dk > dk;
        bk = bk && bk;
        bk = bk || bk;
        bk = ok.m2(bk, bk, bk, bk);
        Thought lo3 = Thought86.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        dk = dk + dk;
</cutPoint988>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint989>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = false;
    dk = ok.m3();
    on += dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    bk = bk && bk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    if (bk) {
</cutPoint989>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint990>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        dk = dk + dk;
        dk = dk + dk;
        Thought lo0 = Thought54.getInstance();
        bk = dk > dk;
        boolean lb1 = false;
        bk = !bk;
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb2 = true;
        Thought lo3 = Thought55.getInstance(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        } else {
        bk = bk || bk;
        Thought lo4 = Thought90.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk = dk - dk;
</cutPoint990>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint991>
    boolean lb0 = false;
    dk = dk + dk;
    Thought lo1 = Thought59.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    double ld2 = 95.68345710586506;
</cutPoint991>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint992>
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld1 = 693.8876778867918;
    double ld2 = 990.067060940554;
    bk = bk && bk;
    double ld3 = 205.539429242305;
    Thought lo4 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = true;
    bk = dk < dk;
    dk = dk - dk;
</cutPoint992>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint993>
    bk = !bk;
    double ld0 = 691.5962550664381;
    dk = dk - dk;
        on -= dk;
    dk *= -1;
    double ld1 = 429.64581084554095;
    ok.m3(ok, ok, ok, ok);
    on -= dk;
    boolean lb2 = false;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 46.505129256762096;
</cutPoint993>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint994>
    ok = ok.m4();
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb0 = false;
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb1 = false;
    if (bk) {
        Thought lo2 = Thought96.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
</cutPoint994>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint995>
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4();
    dk = dk + dk;
    double ld0 = 743.9666187466001;
    Thought lo1 = Thought70.getInstance(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
</cutPoint995>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint996>
    bk = dk < dk;
    bk = dk > dk;
        dk = dk - dk;
    Thought lo0 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    boolean lb1 = true;
    dk *= -1;
    dk = dk - dk;
    bk = !bk;
    boolean lb2 = true;
    boolean lb3 = false;
    dk = dk + dk;
    bk = dk < dk;
    bk = bk || bk;
    dk = dk - dk;
</cutPoint996>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint997>
    double ld0 = 485.29318558905294;
    dk = dk - dk;
    double ld1 = 892.7748859693066;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    bk = dk > dk;
    Thought lo2 = Thought17.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    Thought lo3 = Thought99.getInstance();
    dk = dk + dk;
    bk = !bk;
    double ld4 = 850.9973578469793;
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk);
</cutPoint997>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint998>
    ok.m3(bk, bk, bk, bk);
    on -= dk;
    Thought lo0 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo1 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb2 = false;
    bk = dk > dk;
</cutPoint998>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint999>
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    boolean lb0 = false;
    ok = ok.m4();
    on += dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = false;
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2();
        Thought lo3 = Thought76.getInstance(dk, dk, dk, dk);
        ok.m1(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint999>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1000>
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        Thought lo1 = Thought26.getInstance(ok, ok, ok, ok);
        bk = dk > dk;
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
        ok = ok.m4(bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        for(int j=0; j<10; j++){
            double ld2 = 644.362197245295;
            bk = dk > dk;
            bk = bk && bk;
            boolean lb3 = true;
            boolean lb4 = false;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            for(int j=0; j<10; j++){
                on += dk;
                bk = bk || bk;
</cutPoint1000>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1001>
    double ld0 = 814.4408160016135;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1();
        bk = dk > dk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint1001>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1002>
    bk = dk < dk;
    dk = dk - dk;
    Thought lo0 = Thought49.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = !bk;
    dk = dk + dk;
    </cutPoint1002>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1003>
    Thought lo0 = Thought54.getInstance();
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought17.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
</cutPoint1003>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1004>
    dk = dk - dk;
    ok = ok.m4();
    bk = !bk;
        boolean lb0 = true;
    dk = dk + dk;
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo1 = Thought53.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        on -= dk;
        bk = bk || bk;
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint1004>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1005>
    Thought lo0 = Thought33.getInstance(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 856.8311563907989;
    bk = bk && bk;
    bk = !bk;
    if (bk) {
        bk = dk < dk;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo2 = Thought37.getInstance(ok, ok, ok, ok);
        dk = dk - dk;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought22.getInstance();
        Thought lo4 = Thought23.getInstance(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        bk = !bk;
        Thought lo5 = Thought96.getInstance(ok, ok, ok, ok);
        dk = dk + dk;
</cutPoint1005>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1006>
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    Thought lo0 = Thought65.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    on += dk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = false;
</cutPoint1006>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1007>
    boolean lb0 = true;
    dk = dk - dk;
    bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought33.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought22.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = true;
    ok = ok.m4();
    Thought lo4 = Thought94.getInstance(dk, dk, dk, dk);
    boolean lb5 = false;
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    on -= dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld6 = 571.1714758568372;
    bk = dk > dk;
    dk = dk + dk;
    bk = bk && bk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1007>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1008>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
            boolean lb0 = false;
    dk = dk - dk;
    boolean lb1 = false;
    dk = dk - dk;
    bk = dk < dk;
    bk = dk > dk;
</cutPoint1008>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1009>
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought56.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    boolean lb2 = true;
    ok = ok.m4();
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    Thought lo3 = Thought50.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought38.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok);
        Thought lo5 = Thought81.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        double ld6 = 718.6614992519184;
        bk = bk || bk;
        }
    bk = dk > dk;
</cutPoint1009>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1010>
    bk = dk < dk;
    dk *= -1;
    Thought lo0 = Thought33.getInstance();
    bk = dk > dk;
    bk = dk > dk;
    Thought lo1 = Thought47.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
        if (bk) {
        boolean lb2 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk || bk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = !bk;
        dk = dk + dk;
        double ld3 = 51.91826878981933;
        Thought lo4 = Thought72.getInstance();
        } else if (bk) {
        ok = ok.m4(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
</cutPoint1010>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1011>
    Thought lo0 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld1 = 498.0789498335405;
    bk = dk > dk;
    boolean lb2 = true;
    dk = dk + dk;
    boolean lb3 = false;
    dk *= -1;
    Thought lo4 = Thought30.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    dk *= -1;
    dk = dk + dk;
</cutPoint1011>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1012>
    double ld0 = 110.5781300873915;
    bk = dk < dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    boolean lb1 = false;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1012>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1013>
    dk = dk - dk;
    bk = !bk;
    double ld0 = 427.587172719286;
    dk = dk + dk;
    bk = dk < dk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok);
    bk = dk > dk;
    Thought lo1 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
</cutPoint1013>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1014>
    bk = dk < dk;
    bk = dk > dk;
    boolean lb0 = false;
    bk = dk > dk;
    bk = bk && bk;
    bk = dk > dk;
    bk = !bk;
    boolean lb1 = true;
    dk = ok.m3();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
        bk = bk || bk;
</cutPoint1014>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought29 extends Thought{
private static ArrayList<Thought29> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 861.9904884587918;
private double fd1 = 68.31629572064007;
private Thought fo0 = null;
private Thought fo1 = null;
Thought29 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought29 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought29 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought29 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought29 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought29 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought29 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought29 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought29 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought29 instance = new Thought29 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought29 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought29 instance = new Thought29 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought29 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought29 instance = new Thought29 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought29 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought29 instance = new Thought29 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought29 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought29 instance = new Thought29 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought29 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought29 instance = new Thought29 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought29 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought29 instance = new Thought29 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought29 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought29 instance = new Thought29 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1015>
    boolean lb0 = false;
    boolean lb1 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 475.5831844669989;
    on += dk;
    boolean lb3 = true;
    dk = dk + dk;
    boolean lb4 = true;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1015>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1016>
    on += dk;
    on += dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought98.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    double ld1 = 939.9903154333101;
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    for(int j=0; j<10; j++){
        bk = dk < dk;
        on -= dk;
</cutPoint1016>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1017>
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    dk *= -1;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    on += dk;
    boolean lb1 = false;
    boolean lb2 = true;
    boolean lb3 = false;
    dk *= -1;
</cutPoint1017>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1018>
    dk *= -1;
    Thought lo0 = Thought39.getInstance(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = dk > dk;
    ok = ok.m4();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    Thought lo2 = Thought55.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 133.9567081340844;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    double ld4 = 187.73653741313396;
    double ld5 = 562.0128886798618;
    Thought lo6 = Thought15.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint1018>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1019>
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb0 = true;
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    Thought lo1 = Thought66.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    on += dk;
    double ld2 = 817.2959950524822;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought30.getInstance(ok, ok, ok, ok);
    boolean lb4 = false;
    boolean lb5 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 208.09482905593856;
    dk = ok.m3();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint1019>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1020>
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1020>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1021>
    dk = dk - dk;
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    dk = ok.m3();
    dk *= -1;
    dk *= -1;
    Thought lo1 = Thought4.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 822.0832465272523;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok);
    bk = !bk;
    boolean lb3 = false;
    boolean lb4 = false;
    Thought lo5 = Thought37.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1021>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1022>
    dk = dk - dk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb0 = false;
    bk = bk && bk;
    Thought lo1 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = !bk;
        for(int j=0; j<10; j++){
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            on += dk;
            bk = dk < dk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = dk + dk;
            ok = ok.m4(ok, ok, ok, ok);
</cutPoint1022>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1023>
    bk = dk > dk;
    Thought lo0 = Thought26.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    boolean lb1 = false;
    bk = dk > dk;
    Thought lo2 = Thought36.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint1023>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1024>
    if (bk) {
        bk = bk && bk;
        boolean lb0 = false;
        dk *= -1;
        boolean lb1 = true;
        bk = !bk;
        bk = !bk;
        on += dk;
        boolean lb2 = false;
        dk = dk - dk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        bk = dk > dk;
        double ld3 = 906.0278529274746;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint1024>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1025>
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought32.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought58.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    Thought lo2 = Thought15.getInstance(bk, bk, bk, bk);
    on -= dk;
</cutPoint1025>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1026>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk *= -1;
    boolean lb0 = false;
        boolean lb1 = true;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint1026>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1027>
    for(int j=0; j<10; j++){
        bk = ok.m2();
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk && bk;
        bk = dk > dk;
        double ld0 = 261.82043765116043;
        bk = dk < dk;
        double ld1 = 798.4691766892865;
        ok.m3(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo2 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1027>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1028>
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(bk, bk, bk, bk);
        Thought lo0 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1028>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1029>
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok);
    boolean lb1 = false;
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = bk && bk;
    dk = dk - dk;
    bk = !bk;
    dk *= -1;
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4();
        boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo4 = Thought55.getInstance(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        on += dk;
        boolean lb5 = true;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1029>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1030>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought99.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4();
    bk = dk > dk;
    bk = dk < dk;
    on += dk;
    double ld2 = 895.0991387692986;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld3 = 651.859735678688;
    bk = bk && bk;
    bk = bk || bk;
    dk = dk - dk;
</cutPoint1030>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1031>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld0 = 320.0093274361285;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok);
    double ld1 = 200.47096669317747;
    Thought lo2 = Thought98.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4();
    bk = dk < dk;
    on += dk;
    double ld3 = 887.9173602391218;
    bk = !bk;
    Thought lo4 = Thought27.getInstance(dk, dk, dk, dk);
</cutPoint1031>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1032>
    dk = dk - dk;
    Thought lo0 = Thought28.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought97.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = bk && bk;
        bk = bk && bk;
        boolean lb2 = false;
        dk *= -1;
        double ld3 = 241.65850913642228;
        bk = dk > dk;
        dk *= -1;
        double ld4 = 943.1749175650717;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        on -= dk;
        Thought lo5 = Thought19.getInstance(ok, ok, ok, ok);
        dk = dk - dk;
        }
    bk = !bk;
</cutPoint1032>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1033>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    on += dk;
    ok = ok.m4();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    bk = bk || bk;
    bk = bk || bk;
    boolean lb3 = true;
    double ld4 = 335.1484123535618;
        bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 437.15260702662306;
    Thought lo6 = Thought58.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1033>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1034>
    boolean lb0 = false;
    bk = bk && bk;
    bk = !bk;
    bk = bk && bk;
    bk = bk || bk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    for(int j=0; j<10; j++){
        Thought lo1 = Thought27.getInstance(dk, dk, dk, dk);
        bk = dk < dk;
        ok = ok.m4(bk, bk, bk, bk);
        double ld2 = 981.2291596412355;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        Thought lo3 = Thought15.getInstance(ok, ok, ok, ok);
        for(int j=0; j<10; j++){
            dk = dk - dk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            on -= dk;
            ok = ok.m4();
            double ld4 = 657.9956173410397;
            dk = dk + dk;
            dk = dk + dk;
</cutPoint1034>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1035>
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb0 = false;
    boolean lb1 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb2 = true;
    Thought lo3 = Thought49.getInstance(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4();
    dk *= -1;
    dk = dk + dk;
    boolean lb4 = true;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint1035>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1036>
    double ld0 = 605.2560240217589;
    Thought lo1 = Thought16.getInstance(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    dk = dk - dk;
    Thought lo2 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    bk = dk > dk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2();
</cutPoint1036>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1037>
    if (bk) {
        bk = dk > dk;
        dk = ok.m3(dk, dk, dk, dk);
        boolean lb0 = false;
        dk *= -1;
        boolean lb1 = false;
        boolean lb2 = false;
        double ld3 = 852.5864506568367;
        bk = bk || bk;
        double ld4 = 713.1719499780012;
        boolean lb5 = false;
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint1037>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1038>
    boolean lb0 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk - dk;
    boolean lb2 = true;
    double ld3 = 256.9639308258321;
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo5 = Thought44.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo6 = Thought40.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1038>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1039>
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo0 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    bk = !bk;
    dk = dk - dk;
        bk = dk > dk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
</cutPoint1039>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1040>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought28.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 563.5778131047247;
    if (bk) {
        bk = dk > dk;
        ok = ok.m4(bk, bk, bk, bk);
        Thought lo2 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        if (bk) {
            dk = dk + dk;
            bk = !bk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = dk - dk;
            boolean lb3 = false;
            ok = ok.m4(ok, ok, ok, ok);
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = ok.m2();
            dk = dk - dk;
            dk = dk + dk;
            ok.m2(dk, dk, dk, dk);
            bk = bk && bk;
            dk *= -1;
            dk *= -1;
</cutPoint1040>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1041>
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    bk = dk > dk;
    Thought lo0 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint1041>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1042>
    Thought lo0 = Thought18.getInstance();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo1 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    boolean lb2 = true;
    bk = dk > dk;
    Thought lo3 = Thought65.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb4 = true;
        bk = dk < dk;
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo5 = Thought98.getInstance();
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
        dk = ok.m3(bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        dk *= -1;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1042>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1043>
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    bk = dk > dk;
    if (bk) {
        bk = dk < dk;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        } else if (bk) {
        double ld0 = 781.771868115143;
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint1043>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1044>
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    if (bk) {
        Thought lo0 = Thought44.getInstance(dk, dk, dk, dk);
        ok.m3(bk, bk, bk, bk);
        boolean lb1 = true;
        boolean lb2 = true;
        double ld3 = 945.6152590545368;
</cutPoint1044>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1045>
    dk = dk + dk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    boolean lb0 = false;
    on += dk;
    bk = !bk;
    dk = dk + dk;
    bk = !bk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    double ld2 = 555.5734718525229;
    dk *= -1;
    bk = bk || bk;
    bk = !bk;
    bk = dk < dk;
</cutPoint1045>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1046>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought11.getInstance();
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    boolean lb1 = false;
    bk = bk || bk;
    bk = dk < dk;
    dk *= -1;
    double ld2 = 237.4088587176428;
    dk = dk + dk;
</cutPoint1046>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1047>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = false;
    double ld1 = 277.71212728938576;
    bk = !bk;
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb2 = false;
    boolean lb3 = false;
</cutPoint1047>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1048>
    bk = !bk;
    dk *= -1;
    dk *= -1;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1048>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1049>
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo0 = Thought37.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    Thought lo1 = Thought46.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    Thought lo2 = Thought90.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
</cutPoint1049>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought30 extends Thought{
private static ArrayList<Thought30> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 290.4988648974433;
private double fd1 = 171.94581078480542;
private Thought fo0 = null;
private Thought fo1 = null;
Thought30 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought30 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought30 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought30 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought30 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought30 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought30 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought30 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought30 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought30 instance = new Thought30 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought30 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought30 instance = new Thought30 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought30 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought30 instance = new Thought30 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought30 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought30 instance = new Thought30 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought30 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought30 instance = new Thought30 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought30 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought30 instance = new Thought30 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought30 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought30 instance = new Thought30 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought30 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought30 instance = new Thought30 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1050>
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
    boolean lb1 = true;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    on += dk;
    Thought lo2 = Thought15.getInstance(ok, ok, ok, ok);
    double ld3 = 340.9226115905206;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
    bk = dk > dk;
    dk = dk - dk;
        for(int j=0; j<10; j++){
        bk = bk && bk;
</cutPoint1050>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1051>
    double ld0 = 148.00892838318177;
    bk = bk && bk;
    dk = ok.m3();
    bk = dk > dk;
    bk = !bk;
    boolean lb1 = true;
    ok.m1(dk, dk, dk, dk);
    double ld2 = 626.9754789528213;
    dk *= -1;
    bk = dk > dk;
    boolean lb3 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 263.6804012033006;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld5 = 373.973601088356;
    bk = bk && bk;
    bk = bk || bk;
</cutPoint1051>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1052>
    boolean lb0 = false;
    bk = dk > dk;
    bk = !bk;
    bk = !bk;
    bk = dk > dk;
    bk = dk > dk;
    bk = dk > dk;
    Thought lo1 = Thought16.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
</cutPoint1052>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1053>
    Thought lo0 = Thought31.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought24.getInstance();
    ok.m3(dk, dk, dk, dk);
        on += dk;
    boolean lb2 = false;
    dk *= -1;
    dk = dk - dk;
    on += dk;
    dk = dk + dk;
    dk = dk - dk;
    boolean lb3 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1053>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1054>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = bk || bk;
    boolean lb1 = true;
    bk = bk || bk;
    on += dk;
    bk = dk > dk;
    Thought lo2 = Thought25.getInstance();
    boolean lb3 = true;
    on -= dk;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb4 = false;
</cutPoint1054>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1055>
    bk = !bk;
    bk = bk || bk;
    boolean lb0 = true;
    dk *= -1;
    Thought lo1 = Thought47.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo2 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1055>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1056>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought36.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3();
    dk = dk - dk;
    dk *= -1;
    boolean lb1 = true;
    dk = dk - dk;
</cutPoint1056>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1057>
    Thought lo0 = Thought50.getInstance(dk, dk, dk, dk);
    boolean lb1 = true;
    bk = !bk;
    Thought lo2 = Thought58.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    bk = dk > dk;
    dk *= -1;
    bk = !bk;
    dk = dk - dk;
    bk = dk < dk;
    boolean lb3 = true;
</cutPoint1057>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1058>
    dk = dk - dk;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    double ld1 = 99.46873463815442;
    dk *= -1;
    dk = dk - dk;
    double ld2 = 20.629686250290113;
    double ld3 = 41.885331854238025;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought30.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    double ld5 = 92.35188698374176;
    dk = dk - dk;
    Thought lo6 = Thought74.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1058>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1059>
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    bk = dk < dk;
    Thought lo0 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought65.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 28.74160490105719;
    bk = dk < dk;
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    double ld3 = 950.4737334889589;
    dk *= -1;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint1059>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1060>
    Thought lo0 = Thought28.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    double ld1 = 852.9490426770109;
    bk = bk && bk;
    double ld2 = 715.0960686609374;
    bk = dk > dk;
    bk = !bk;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 198.00113987394298;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    bk = bk && bk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo4 = Thought69.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    double ld6 = 853.8519221134407;
    dk = dk - dk;
    boolean lb7 = true;
    bk = dk > dk;
    ok.m1();
    bk = ok.m2(dk, dk, dk, dk);
    if (bk) {
</cutPoint1060>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1061>
    bk = bk || bk;
    Thought lo0 = Thought91.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 745.6364310577396;
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        dk *= -1;
        bk = bk && bk;
        boolean lb3 = true;
        on -= dk;
        dk = dk + dk;
        for(int j=0; j<10; j++){
            }
        dk = ok.m3(ok, ok, ok, ok);
        boolean lb4 = true;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        dk *= -1;
        boolean lb5 = false;
</cutPoint1061>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1062>
    Thought lo0 = Thought28.getInstance(dk, dk, dk, dk);
    Thought lo1 = Thought31.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    Thought lo2 = Thought95.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought69.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
</cutPoint1062>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1063>
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought98.getInstance();
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk < dk;
    boolean lb2 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = !bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo4 = Thought59.getInstance(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    on -= dk;
    Thought lo5 = Thought21.getInstance(dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    double ld6 = 177.39984787678884;
</cutPoint1063>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1064>
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    Thought lo0 = Thought2.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 388.1035735599311;
    boolean lb2 = false;
    double ld3 = 541.9103513345609;
        boolean lb4 = true;
    dk = dk + dk;
</cutPoint1064>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1065>
    bk = ok.m2(ok, ok, ok, ok);
    double ld0 = 908.5268351754618;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
    double ld1 = 609.4744210893653;
    bk = bk || bk;
    bk = dk < dk;
    bk = bk && bk;
    boolean lb2 = false;
    bk = dk > dk;
</cutPoint1065>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1066>
    double ld0 = 484.2887651567673;
    ok = ok.m4();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought84.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
</cutPoint1066>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1067>
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo0 = Thought89.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = false;
        double ld2 = 605.9716499450954;
        ok = ok.m4();
        Thought lo3 = Thought61.getInstance(dk, dk, dk, dk);
        boolean lb4 = true;
        dk *= -1;
        ok.m3(bk, bk, bk, bk);
        } else {
                bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo5 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        Thought lo6 = Thought76.getInstance(ok, ok, ok, ok);
        on += dk;
        boolean lb7 = true;
                ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = dk < dk;
        ok.m2();
        dk = dk - dk;
</cutPoint1067>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1068>
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    on += dk;
    bk = bk || bk;
    Thought lo0 = Thought16.getInstance(bk, bk, bk, bk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        bk = dk > dk;
        on -= dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb1 = true;
        boolean lb2 = false;
        bk = dk > dk;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok);
        on -= dk;
        dk = dk - dk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1068>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1069>
    boolean lb0 = false;
    ok = ok.m4();
    double ld1 = 197.54131950652658;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    boolean lb2 = false;
    bk = bk || bk;
    double ld3 = 491.8370938603254;
    boolean lb4 = false;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    double ld5 = 710.715487263836;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
</cutPoint1069>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1070>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 541.8533533217064;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1070>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1071>
    dk = dk - dk;
    dk *= -1;
    boolean lb0 = false;
    boolean lb1 = false;
    bk = dk > dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    Thought lo3 = Thought48.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo4 = Thought16.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk - dk;
    bk = !bk;
    bk = bk || bk;
    dk = dk - dk;
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1071>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1072>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = false;
    bk = dk < dk;
    bk = dk > dk;
    bk = !bk;
    Thought lo1 = Thought13.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    bk = !bk;
    double ld2 = 590.375645627929;
    dk *= -1;
    Thought lo3 = Thought76.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk < dk;
    double ld4 = 980.5320233757689;
    ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1072>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1073>
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
        boolean lb0 = true;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    boolean lb1 = false;
    Thought lo2 = Thought79.getInstance();
    boolean lb3 = true;
    dk = dk + dk;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    boolean lb4 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo5 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld6 = 529.3456771463933;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1073>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1074>
    dk = dk - dk;
        Thought lo0 = Thought55.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought95.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb2 = true;
    boolean lb3 = false;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        boolean lb4 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        dk *= -1;
        bk = bk || bk;
        bk = dk < dk;
        bk = bk && bk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        on += dk;
        double ld5 = 594.838655642188;
        dk = dk - dk;
        dk = dk + dk;
        dk = dk + dk;
        dk *= -1;
        dk = dk + dk;
</cutPoint1074>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1075>
    dk *= -1;
    ok = ok.m4();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
    bk = !bk;
    Thought lo1 = Thought29.getInstance(bk, bk, bk, bk);
    dk *= -1;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
</cutPoint1075>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1076>
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    if (bk) {
        bk = !bk;
        bk = bk && bk;
        bk = ok.m2();
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        double ld0 = 623.5116145680621;
</cutPoint1076>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1077>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    double ld0 = 6.5066294767850374;
    Thought lo1 = Thought69.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    bk = bk && bk;
    Thought lo2 = Thought62.getInstance(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    dk = dk - dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = bk || bk;
    bk = dk < dk;
    on -= dk;
    on += dk;
    bk = !bk;
    double ld3 = 208.66715680029895;
    bk = dk < dk;
</cutPoint1077>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1078>
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought9.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk *= -1;
        }
    boolean lb1 = false;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb2 = false;
</cutPoint1078>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1079>
    boolean lb0 = true;
    double ld1 = 803.1884702716447;
    dk *= -1;
    double ld2 = 512.9750807536354;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo3 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = false;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo5 = Thought36.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint1079>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1080>
    dk *= -1;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
</cutPoint1080>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1081>
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk *= -1;
    dk = dk - dk;
    on -= dk;
    for(int j=0; j<10; j++){
        for(int j=0; j<10; j++){
            Thought lo2 = Thought13.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = !bk;
            Thought lo3 = Thought72.getInstance(ok, ok, ok, ok);
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk && bk;
            if (bk) {
                bk = ok.m2();
                boolean lb4 = true;
                bk = bk && bk;
                dk = ok.m3(dk, dk, dk, dk);
                dk = dk - dk;
                dk = ok.m3(bk, bk, bk, bk);
                double ld5 = 164.0916146774528;
                bk = dk > dk;
                bk = bk || bk;
                dk *= -1;
                ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1081>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1082>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 96.02254794926877;
    on -= dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = bk || bk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    boolean lb2 = false;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    on -= dk;
</cutPoint1082>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1083>
        bk = bk || bk;
        dk = dk + dk;
    dk = dk - dk;
    bk = dk > dk;
    Thought lo0 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 869.2885858205407;
    double ld2 = 626.2718827941301;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 385.2415099705083;
    on += dk;
    boolean lb4 = true;
    ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk - dk;
</cutPoint1083>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1084>
    dk = dk + dk;
        bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb0 = false;
    dk *= -1;
    boolean lb1 = true;
    double ld2 = 822.892681567483;
    boolean lb3 = false;
    boolean lb4 = false;
    dk = dk + dk;
    boolean lb5 = false;
    dk = ok.m3(dk, dk, dk, dk);
        dk = dk - dk;
    Thought lo6 = Thought17.getInstance(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb7 = false;
    Thought lo8 = Thought29.getInstance(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb9 = false;
</cutPoint1084>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought31 extends Thought{
private static ArrayList<Thought31> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 416.9983264648778;
private double fd1 = 988.130783237609;
private Thought fo0 = null;
private Thought fo1 = null;
Thought31 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought31 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought31 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought31 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought31 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought31 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought31 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought31 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought31 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought31 instance = new Thought31 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought31 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought31 instance = new Thought31 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought31 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought31 instance = new Thought31 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought31 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought31 instance = new Thought31 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought31 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought31 instance = new Thought31 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought31 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought31 instance = new Thought31 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought31 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought31 instance = new Thought31 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought31 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought31 instance = new Thought31 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1085>
    bk = bk && bk;
    ok = ok.m4();
    dk *= -1;
    on += dk;
    for(int j=0; j<10; j++){
        Thought lo0 = Thought10.getInstance(dk, dk, dk, dk);
        on += dk;
        on += dk;
        ok.m3(bk, bk, bk, bk);
        boolean lb1 = false;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb2 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        double ld3 = 840.2020410450949;
        bk = !bk;
        on += dk;
        Thought lo4 = Thought19.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo5 = Thought15.getInstance(ok, ok, ok, ok);
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = dk > dk;
        dk *= -1;
        on -= dk;
        ok = ok.m4();
        }
    bk = bk || bk;
    boolean lb6 = false;
    double ld7 = 464.0362721622078;
</cutPoint1085>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1086>
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    bk = !bk;
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    dk = dk + dk;
    double ld0 = 575.7521399088425;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    Thought lo1 = Thought20.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought53.getInstance(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = bk && bk;
        }
    bk = !bk;
</cutPoint1086>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1087>
    dk = dk + dk;
    bk = dk < dk;
    bk = dk > dk;
    Thought lo0 = Thought56.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    for(int j=0; j<10; j++){
        on += dk;
        on += dk;
        if (bk) {
            bk = !bk;
            on += dk;
            bk = bk || bk;
            bk = dk < dk;
            bk = dk < dk;
</cutPoint1087>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1088>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo0 = Thought98.getInstance(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = dk < dk;
    boolean lb2 = true;
    bk = dk < dk;
    bk = bk && bk;
    bk = dk < dk;
    dk *= -1;
    dk = dk - dk;
    Thought lo3 = Thought98.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint1088>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1089>
    double ld0 = 312.7018973675489;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 387.8634180016458;
    dk = dk + dk;
    bk = !bk;
    Thought lo3 = Thought89.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = false;
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    double ld5 = 748.5075557144525;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1089>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1090>
    bk = !bk;
    boolean lb0 = true;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo1 = Thought76.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    Thought lo2 = Thought78.getInstance();
    ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo3 = Thought98.getInstance(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb4 = false;
</cutPoint1090>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1091>
    bk = dk > dk;
    bk = dk > dk;
    on -= dk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb0 = false;
    bk = dk > dk;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo2 = Thought62.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    on += dk;
    boolean lb4 = true;
</cutPoint1091>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1092>
    ok = ok.m4();
    dk = dk + dk;
    dk *= -1;
    double ld0 = 236.50196207645607;
    on += dk;
    on -= dk;
    boolean lb1 = true;
    boolean lb2 = false;
    bk = dk < dk;
    dk *= -1;
</cutPoint1092>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1093>
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb0 = false;
        ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    bk = bk && bk;
    if (bk) {
        boolean lb1 = false;
</cutPoint1093>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1094>
    bk = !bk;
    on += dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb0 = true;
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk = dk - dk;
        bk = dk > dk;
        } else if (bk) {
        on += dk;
        bk = bk && bk;
</cutPoint1094>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1095>
    Thought lo0 = Thought91.getInstance();
    ok.m1(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    Thought lo2 = Thought45.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb3 = false;
    dk = dk + dk;
    on += dk;
    bk = bk && bk;
    ok.m3();
    bk = bk && bk;
    double ld4 = 513.1599935171477;
    bk = bk && bk;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought35.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
</cutPoint1095>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1096>
    dk = dk + dk;
    on += dk;
    bk = dk > dk;
    double ld0 = 335.8263151293577;
    boolean lb1 = true;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk > dk;
    dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint1096>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1097>
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    Thought lo0 = Thought12.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    boolean lb1 = false;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    double ld2 = 666.606650106884;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 351.72254736193685;
    dk *= -1;
</cutPoint1097>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1098>
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = !bk;
    ok.m2();
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 51.71130197732898;
    dk = dk + dk;
    bk = dk > dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
</cutPoint1098>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1099>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb1 = false;
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    boolean lb3 = true;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo4 = Thought0.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb5 = true;
    bk = !bk;
    bk = bk && bk;
    boolean lb6 = false;
    bk = !bk;
    bk = bk || bk;
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb7 = true;
    bk = dk > dk;
    double ld8 = 866.0115739450792;
</cutPoint1099>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1100>
    if (bk) {
        bk = dk > dk;
        dk *= -1;
        dk = ok.m3(ok, ok, ok, ok);
        boolean lb0 = true;
        bk = bk || bk;
        bk = !bk;
        double ld1 = 930.3420619634194;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk < dk;
        dk = dk - dk;
        dk = ok.m3();
        } else {
        bk = dk > dk;
        on += dk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        double ld2 = 46.29652781417043;
        boolean lb3 = false;
        Thought lo4 = Thought44.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1100>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1101>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    dk = dk + dk;
    bk = bk && bk;
    on -= dk;
    dk = dk + dk;
    bk = bk && bk;
    bk = bk && bk;
    on -= dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    double ld0 = 609.2297956953178;
    Thought lo1 = Thought93.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint1101>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1102>
    bk = dk < dk;
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
        boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought76.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    for(int j=0; j<10; j++){
        Thought lo2 = Thought64.getInstance(dk, dk, dk, dk);
        ok.m2(bk, bk, bk, bk);
        boolean lb3 = true;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        double ld4 = 649.7672081689171;
        bk = dk < dk;
</cutPoint1102>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1103>
    bk = !bk;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo0 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb2 = false;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb3 = false;
    dk = dk - dk;
    bk = dk < dk;
    double ld4 = 49.19283913550254;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    double ld5 = 173.0516000508135;
</cutPoint1103>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1104>
    boolean lb0 = true;
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 571.2259224389297;
    bk = dk > dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1104>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1105>
    dk = dk + dk;
    boolean lb0 = true;
    ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    double ld1 = 786.5493406600324;
    bk = bk || bk;
    dk = dk + dk;
    bk = bk || bk;
    double ld2 = 888.7629314696796;
</cutPoint1105>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1106>
    ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
    double ld0 = 768.3071288377491;
        dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    double ld1 = 871.1213369587052;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 894.727540336778;
    bk = bk && bk;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    bk = bk || bk;
    bk = bk && bk;
    bk = !bk;
    bk = dk < dk;
</cutPoint1106>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1107>
    on += dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    dk = dk - dk;
    boolean lb0 = false;
    on -= dk;
    bk = dk > dk;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1107>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1108>
    double ld0 = 66.09605093475086;
    double ld1 = 701.6637359521069;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1();
</cutPoint1108>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1109>
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo0 = Thought45.getInstance(dk, dk, dk, dk);
    on -= dk;
    dk = dk + dk;
</cutPoint1109>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1110>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought99.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on += dk;
    dk = dk + dk;
    bk = !bk;
</cutPoint1110>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1111>
    dk = dk - dk;
    dk = ok.m3();
    dk *= -1;
    boolean lb0 = true;
    double ld1 = 792.5966959021314;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    dk *= -1;
    ok.m2(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    boolean lb2 = false;
    if (bk) {
        bk = bk && bk;
        Thought lo3 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1111>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1112>
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
</cutPoint1112>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1113>
    dk *= -1;
    bk = ok.m2();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
        ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought86.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1113>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1114>
    double ld0 = 550.9802214627192;
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2();
    dk = dk - dk;
    dk *= -1;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    boolean lb1 = false;
    if (bk) {
        } else if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint1114>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1115>
    if (bk) {
        dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        dk *= -1;
        bk = ok.m2(bk, bk, bk, bk);
        bk = dk < dk;
        bk = !bk;
        Thought lo0 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb1 = false;
</cutPoint1115>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1116>
    double ld0 = 996.6681561755883;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    Thought lo1 = Thought20.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    boolean lb2 = false;
    ok.m1();
    boolean lb3 = false;
    boolean lb4 = false;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb5 = false;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    boolean lb6 = true;
</cutPoint1116>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1117>
    on += dk;
    dk = dk + dk;
    double ld0 = 677.4295121858769;
    bk = !bk;
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    double ld1 = 743.3727850264388;
    dk = dk + dk;
    bk = dk < dk;
    bk = !bk;
    boolean lb2 = false;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb3 = true;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = true;
    dk = dk - dk;
    bk = bk || bk;
    dk = ok.m3();
    bk = bk && bk;
</cutPoint1117>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1118>
    dk = dk + dk;
    bk = !bk;
    on += dk;
    boolean lb0 = true;
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    Thought lo2 = Thought10.getInstance(bk, bk, bk, bk);
    double ld3 = 435.4467675366032;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    double ld4 = 733.9097984812676;
    bk = bk && bk;
    bk = bk && bk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
        bk = dk < dk;
    on -= dk;
    bk = bk || bk;
    boolean lb6 = true;
</cutPoint1118>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1119>
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        double ld1 = 967.4857104820317;
    on += dk;
    bk = bk || bk;
    bk = bk || bk;
    Thought lo2 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    dk = dk + dk;
    Thought lo3 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    bk = dk < dk;
    double ld4 = 942.0772351156688;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1119>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought32 extends Thought{
private static ArrayList<Thought32> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 948.9309487042874;
private double fd1 = 417.08083890928697;
private Thought fo0 = null;
private Thought fo1 = null;
Thought32 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought32 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought32 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought32 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought32 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought32 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought32 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought32 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought32 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought32 instance = new Thought32 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought32 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought32 instance = new Thought32 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought32 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought32 instance = new Thought32 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought32 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought32 instance = new Thought32 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought32 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought32 instance = new Thought32 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought32 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought32 instance = new Thought32 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought32 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought32 instance = new Thought32 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought32 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought32 instance = new Thought32 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1120>
    bk = !bk;
    bk = bk || bk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo0 = Thought92.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
    double ld1 = 953.9625905324174;
    double ld2 = 634.9633460753396;
    dk *= -1;
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = !bk;
        bk = bk && bk;
        boolean lb3 = false;
        bk = ok.m2(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1120>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1121>
    dk = dk - dk;
    ok = ok.m4();
    dk = dk + dk;
    bk = bk || bk;
    Thought lo0 = Thought95.getInstance(dk, dk, dk, dk);
    boolean lb1 = false;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = bk && bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
</cutPoint1121>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1122>
    boolean lb0 = true;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    dk = dk + dk;
    if (bk) {
        bk = dk > dk;
        ok.m1(ok, ok, ok, ok);
        Thought lo1 = Thought63.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        dk *= -1;
        dk = dk - dk;
        dk *= -1;
</cutPoint1122>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1123>
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk > dk;
    Thought lo1 = Thought0.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb2 = false;
    on += dk;
    bk = dk < dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought17.getInstance();
        ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint1123>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1124>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok);
    Thought lo0 = Thought11.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
</cutPoint1124>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1125>
    bk = bk && bk;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb1 = true;
    Thought lo2 = Thought45.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb3 = true;
    Thought lo4 = Thought51.getInstance();
    Thought lo5 = Thought81.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1125>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1126>
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 290.8268671516132;
    bk = bk && bk;
    Thought lo1 = Thought61.getInstance();
    bk = dk < dk;
    boolean lb2 = false;
    Thought lo3 = Thought4.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb4 = true;
    boolean lb5 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1126>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1127>
    on += dk;
    dk *= -1;
    Thought lo0 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb1 = true;
    bk = dk < dk;
    Thought lo2 = Thought10.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought26.getInstance(ok, ok, ok, ok);
</cutPoint1127>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1128>
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    bk = ok.m2();
    if (bk) {
        ok.m3(dk, dk, dk, dk);
        dk = dk - dk;
        double ld0 = 760.9804392240799;
        bk = ok.m2(bk, bk, bk, bk);
        dk = dk + dk;
        dk = dk + dk;
        bk = bk || bk;
        dk = dk + dk;
        bk = dk < dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        double ld1 = 893.569492837142;
</cutPoint1128>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1129>
    bk = bk || bk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought2.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = dk + dk;
    bk = ok.m2();
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb2 = true;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb3 = false;
        boolean lb4 = false;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb5 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo6 = Thought89.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1129>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1130>
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb0 = false;
    ok = ok.m4();
    dk *= -1;
    Thought lo1 = Thought44.getInstance(dk, dk, dk, dk);
    boolean lb2 = false;
    bk = dk < dk;
</cutPoint1130>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1131>
    double ld0 = 174.4662091501845;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 137.29459640356413;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    Thought lo3 = Thought25.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb4 = false;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint1131>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1132>
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    on -= dk;
    on += dk;
    bk = bk || bk;
    on -= dk;
    bk = bk && bk;
    boolean lb1 = true;
    boolean lb2 = true;
    bk = dk > dk;
    boolean lb3 = false;
    on -= dk;
    bk = !bk;
    Thought lo4 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
</cutPoint1132>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1133>
    bk = dk > dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    Thought lo0 = Thought45.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk || bk;
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint1133>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1134>
    Thought lo0 = Thought97.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        Thought lo1 = Thought30.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        bk = dk < dk;
        dk = ok.m3();
        ok.m2(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
</cutPoint1134>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1135>
    boolean lb0 = true;
    bk = bk && bk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
    on -= dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = true;
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok);
        double ld2 = 366.1081931623351;
        bk = dk > dk;
        Thought lo3 = Thought7.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld4 = 798.5611211336421;
        bk = dk < dk;
        ok = ok.m4();
        double ld5 = 789.6992507764031;
        dk = ok.m3(dk, dk, dk, dk);
        boolean lb6 = true;
        boolean lb7 = false;
        boolean lb8 = true;
        on -= dk;
        dk = dk + dk;
</cutPoint1135>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1136>
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = false;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    dk = dk + dk;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        Thought lo2 = Thought20.getInstance(bk, bk, bk, bk);
        if (bk) {
            dk = dk - dk;
            dk = dk - dk;
</cutPoint1136>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1137>
    bk = dk < dk;
    Thought lo0 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 78.61150885048833;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    double ld3 = 847.9233403432376;
    dk = dk - dk;
    Thought lo4 = Thought94.getInstance(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
    Thought lo5 = Thought16.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    if (bk) {
        dk *= -1;
        dk = dk + dk;
</cutPoint1137>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1138>
    bk = bk || bk;
    dk *= -1;
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = true;
        bk = bk && bk;
        dk *= -1;
        Thought lo2 = Thought11.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo3 = Thought78.getInstance(ok, ok, ok, ok);
        bk = dk > dk;
</cutPoint1138>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1139>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    dk *= -1;
    Thought lo0 = Thought55.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb1 = true;
    bk = !bk;
    bk = bk && bk;
    boolean lb2 = false;
    double ld3 = 760.5589657655011;
    dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
</cutPoint1139>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1140>
    double ld0 = 852.4278394721294;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    boolean lb2 = false;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo3 = Thought40.getInstance(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    double ld4 = 73.05917425403932;
    double ld5 = 378.3532745780336;
    boolean lb6 = false;
    dk = dk + dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb7 = true;
    </cutPoint1140>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1141>
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = false;
    dk = ok.m3();
    double ld2 = 417.33525374846295;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld3 = 291.7724120866628;
    dk = dk - dk;
    bk = bk || bk;
</cutPoint1141>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1142>
    double ld0 = 684.5978223478497;
    Thought lo1 = Thought52.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok);
    on -= dk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
</cutPoint1142>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1143>
    on += dk;
    boolean lb0 = false;
    dk = dk + dk;
    boolean lb1 = false;
    dk = dk - dk;
    boolean lb2 = true;
    if (bk) {
        bk = bk || bk;
        dk = ok.m3();
        dk *= -1;
        if (bk) {
</cutPoint1143>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1144>
    for(int j=0; j<10; j++){
        }
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk);
    if (bk) {
        dk = dk - dk;
        ok.m2(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo0 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = true;
        bk = !bk;
        bk = dk < dk;
        bk = dk < dk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb2 = true;
        Thought lo3 = Thought60.getInstance(ok, ok, ok, ok);
</cutPoint1144>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1145>
    boolean lb0 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    ok.m2();
    boolean lb1 = false;
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    bk = !bk;
    boolean lb2 = true;
    Thought lo3 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
</cutPoint1145>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1146>
    dk = dk + dk;
    bk = !bk;
    double ld0 = 250.07558787292024;
    bk = bk && bk;
    bk = bk || bk;
    Thought lo1 = Thought8.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk + dk;
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo3 = Thought90.getInstance();
    ok.m3(dk, dk, dk, dk);
    double ld4 = 897.2246172934393;
    bk = !bk;
    bk = dk > dk;
    dk = dk - dk;
    bk = bk && bk;
    ok.m3(bk, bk, bk, bk);
    double ld5 = 829.6631158783568;
    Thought lo6 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb7 = true;
</cutPoint1146>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1147>
    on -= dk;
    on -= dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    double ld0 = 693.2040500926171;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4();
    bk = bk && bk;
    bk = !bk;
    if (bk) {
        ok.m3(dk, dk, dk, dk);
        double ld1 = 828.6857062417663;
        dk = dk + dk;
        Thought lo2 = Thought35.getInstance(bk, bk, bk, bk);
        dk = dk - dk;
        } else {
</cutPoint1147>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1148>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk && bk;
    on += dk;
    boolean lb0 = true;
    dk *= -1;
    double ld1 = 675.6271295819101;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    boolean lb2 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = true;
    bk = bk || bk;
    bk = dk < dk;
    on += dk;
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
</cutPoint1148>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1149>
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 147.03979539908195;
    Thought lo1 = Thought50.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    double ld2 = 782.391837980319;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = dk > dk;
    if (bk) {
        boolean lb3 = true;
        dk = dk + dk;
        bk = bk && bk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb4 = false;
        bk = ok.m2();
        bk = bk && bk;
        dk *= -1;
        bk = !bk;
        bk = bk && bk;
        dk = ok.m3(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        if (bk) {
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            if (bk) {
</cutPoint1149>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1150>
    bk = bk && bk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
    on -= dk;
    bk = !bk;
    Thought lo0 = Thought24.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1150>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1151>
    dk = dk + dk;
    dk = ok.m3();
    boolean lb0 = false;
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    Thought lo1 = Thought25.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    double ld2 = 514.6003272318356;
    boolean lb3 = true;
    bk = bk && bk;
</cutPoint1151>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1152>
    dk = dk - dk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2();
    dk = dk - dk;
</cutPoint1152>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1153>
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    on += dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    bk = bk && bk;
</cutPoint1153>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1154>
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought48.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo1 = Thought37.getInstance();
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo2 = Thought27.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1154>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought33 extends Thought{
private static ArrayList<Thought33> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 636.7719530939538;
private double fd1 = 492.52966364648057;
private Thought fo0 = null;
private Thought fo1 = null;
Thought33 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought33 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought33 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought33 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought33 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought33 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought33 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought33 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought33 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought33 instance = new Thought33 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought33 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought33 instance = new Thought33 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought33 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought33 instance = new Thought33 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought33 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought33 instance = new Thought33 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought33 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought33 instance = new Thought33 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought33 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought33 instance = new Thought33 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought33 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought33 instance = new Thought33 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought33 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought33 instance = new Thought33 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1155>
    bk = !bk;
        on -= dk;
    dk = dk + dk;
    bk = bk && bk;
    Thought lo0 = Thought12.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = bk || bk;
    bk = dk > dk;
    Thought lo2 = Thought66.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo3 = Thought0.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
</cutPoint1155>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1156>
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = false;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    boolean lb1 = true;
    double ld2 = 695.09563353555;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    Thought lo3 = Thought57.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    on += dk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1156>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1157>
    double ld0 = 641.9489297954058;
    dk = dk + dk;
    double ld1 = 672.332040478948;
    dk *= -1;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        ok.m1();
        double ld2 = 13.560272775491846;
        dk = ok.m3(dk, dk, dk, dk);
        bk = dk < dk;
        bk = bk || bk;
        bk = bk || bk;
        boolean lb3 = true;
        ok = ok.m4(bk, bk, bk, bk);
        dk *= -1;
        double ld4 = 878.2373802037426;
        for(int j=0; j<10; j++){
            bk = dk < dk;
            boolean lb5 = false;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = bk || bk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = !bk;
            Thought lo6 = Thought89.getInstance(ok, ok, ok, ok);
            double ld7 = 414.01183315500947;
            dk *= -1;
            double ld8 = 716.6085374600858;
            bk = bk && bk;
</cutPoint1157>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1158>
    for(int j=0; j<10; j++){
        dk *= -1;
        Thought lo0 = Thought18.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        dk = ok.m3();
        dk = ok.m3(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        if (bk) {
            double ld1 = 692.5588737435337;
            bk = !bk;
            dk = dk + dk;
            dk = dk + dk;
            bk = dk > dk;
            dk = dk - dk;
            ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = dk > dk;
            bk = dk < dk;
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok);
</cutPoint1158>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1159>
    boolean lb0 = false;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3();
    Thought lo1 = Thought38.getInstance(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought78.getInstance();
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    for(int j=0; j<10; j++){
        dk *= -1;
        boolean lb3 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        bk = ok.m2(ok, ok, ok, ok);
</cutPoint1159>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1160>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
        on -= dk;
    boolean lb0 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        double ld1 = 373.8015603848988;
        boolean lb2 = false;
        Thought lo3 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = dk > dk;
        ok = ok.m4();
        dk = dk + dk;
        boolean lb4 = true;
        Thought lo5 = Thought45.getInstance(dk, dk, dk, dk);
        ok.m2(bk, bk, bk, bk);
        on += dk;
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb6 = true;
</cutPoint1160>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1161>
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    double ld0 = 113.35707414777379;
    on -= dk;
    bk = bk || bk;
    Thought lo1 = Thought38.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    bk = bk && bk;
    bk = dk < dk;
</cutPoint1161>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1162>
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        Thought lo0 = Thought65.getInstance(bk, bk, bk, bk);
        double ld1 = 391.9285106330893;
        boolean lb2 = true;
        Thought lo3 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo5 = Thought91.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo6 = Thought25.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        }
    dk *= -1;
    dk = dk - dk;
    bk = bk && bk;
    dk *= -1;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    double ld7 = 492.9824927792187;
    boolean lb8 = false;
    Thought lo9 = Thought98.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb10 = false;
</cutPoint1162>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1163>
    bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 413.281295624354;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = !bk;
        dk = dk + dk;
        dk = dk - dk;
        }
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought91.getInstance(dk, dk, dk, dk);
    Thought lo2 = Thought0.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    boolean lb4 = true;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint1163>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1164>
    dk *= -1;
    dk = dk + dk;
    Thought lo0 = Thought6.getInstance(dk, dk, dk, dk);
    Thought lo1 = Thought86.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
</cutPoint1164>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1165>
    bk = bk || bk;
    on += dk;
    boolean lb0 = false;
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    for(int j=0; j<10; j++){
        dk = dk - dk;
        ok.m1(dk, dk, dk, dk);
        bk = bk || bk;
        boolean lb2 = true;
        ok.m2(bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk - dk;
        on += dk;
</cutPoint1165>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1166>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
        boolean lb0 = true;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
</cutPoint1166>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1167>
    double ld0 = 348.1408063520842;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought40.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    double ld2 = 899.3573299973544;
    ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint1167>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1168>
    boolean lb0 = true;
    Thought lo1 = Thought72.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo2 = Thought76.getInstance(ok, ok, ok, ok);
    Thought lo3 = Thought84.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 401.6121839771498;
    bk = dk < dk;
    dk = dk + dk;
    dk *= -1;
    bk = bk || bk;
    on -= dk;
    dk = dk + dk;
    double ld5 = 869.5728479029129;
    bk = dk > dk;
    bk = bk || bk;
    boolean lb6 = true;
    double ld7 = 722.9520949281938;
    bk = bk && bk;
    on += dk;
    ok.m1();
    bk = bk && bk;
    bk = !bk;
    bk = bk || bk;
</cutPoint1168>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1169>
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    Thought lo1 = Thought95.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 785.933204015129;
    boolean lb4 = false;
    dk = dk + dk;
    boolean lb5 = false;
    for(int j=0; j<10; j++){
        ok = ok.m4();
        ok.m1(dk, dk, dk, dk);
        boolean lb6 = false;
        boolean lb7 = true;
</cutPoint1169>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1170>
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 49.83903551394557;
    ok.m1(ok, ok, ok, ok);
    on += dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb1 = false;
    bk = dk < dk;
    boolean lb2 = false;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    boolean lb3 = true;
    Thought lo4 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld5 = 712.0373920386162;
</cutPoint1170>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1171>
    bk = bk || bk;
    boolean lb0 = true;
    dk = dk + dk;
    dk = dk - dk;
    boolean lb1 = true;
    double ld2 = 11.854802541764583;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought67.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = dk > dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4();
        bk = dk > dk;
        Thought lo4 = Thought13.getInstance(dk, dk, dk, dk);
        dk = dk - dk;
        dk = dk - dk;
        dk = dk - dk;
        on -= dk;
        ok.m1(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        if (bk) {
            boolean lb5 = true;
</cutPoint1171>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1172>
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    double ld0 = 222.44333900315704;
    ok.m3(ok, ok, ok, ok);
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = false;
    bk = dk > dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint1172>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1173>
    dk = dk + dk;
        Thought lo0 = Thought14.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    double ld1 = 413.68854534396945;
    bk = !bk;
    on -= dk;
    if (bk) {
        dk = dk - dk;
        for(int j=0; j<10; j++){
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk + dk;
            bk = !bk;
            boolean lb2 = false;
            dk = dk - dk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok);
            bk = !bk;
</cutPoint1173>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1174>
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
        boolean lb0 = false;
        bk = dk > dk;
        dk = dk - dk;
        ok.m1();
        on -= dk;
        double ld1 = 301.74661092268684;
        ok.m3(dk, dk, dk, dk);
        bk = !bk;
</cutPoint1174>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1175>
    bk = !bk;
    bk = bk || bk;
    dk *= -1;
    boolean lb0 = false;
        bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    Thought lo1 = Thought47.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk + dk;
</cutPoint1175>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1176>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4();
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    if (bk) {
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1176>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1177>
    Thought lo0 = Thought87.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo1 = Thought50.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        on += dk;
        dk = dk - dk;
        ok = ok.m4();
        dk *= -1;
        Thought lo2 = Thought89.getInstance(dk, dk, dk, dk);
        dk = dk - dk;
        Thought lo3 = Thought24.getInstance(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        dk = dk - dk;
        double ld4 = 103.42140492515276;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        dk *= -1;
        ok.m2(ok, ok, ok, ok);
        boolean lb5 = true;
        dk = dk - dk;
        on += dk;
        bk = bk || bk;
        boolean lb6 = false;
        boolean lb7 = true;
</cutPoint1177>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1178>
    Thought lo0 = Thought52.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        bk = bk && bk;
        if (bk) {
            on += dk;
            bk = dk > dk;
            ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = ok.m2(ok, ok, ok, ok);
            dk = dk - dk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            dk *= -1;
            bk = !bk;
            on += dk;
            dk = ok.m3();
            on += dk;
            bk = bk || bk;
            Thought lo1 = Thought22.getInstance(dk, dk, dk, dk);
            ok = ok.m4(bk, bk, bk, bk);
            boolean lb2 = true;
            } else {
</cutPoint1178>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1179>
    boolean lb0 = false;
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    dk *= -1;
    boolean lb1 = false;
    on += dk;
    if (bk) {
        double ld2 = 782.7495167026402;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1179>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1180>
    boolean lb0 = true;
    bk = bk && bk;
    boolean lb1 = false;
    boolean lb2 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
        on -= dk;
    bk = dk < dk;
    double ld3 = 586.8404273724395;
    Thought lo4 = Thought17.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
</cutPoint1180>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1181>
    ok = ok.m4();
    dk *= -1;
    dk *= -1;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1181>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1182>
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    bk = bk || bk;
    if (bk) {
        dk *= -1;
        bk = dk < dk;
        bk = dk > dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = true;
        double ld1 = 419.70551332742895;
        dk = dk - dk;
        bk = ok.m2();
        bk = bk || bk;
        bk = bk && bk;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb2 = true;
        boolean lb3 = false;
        dk = ok.m3(bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = false;
        Thought lo5 = Thought12.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        boolean lb6 = true;
</cutPoint1182>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1183>
    if (bk) {
        boolean lb0 = false;
        dk = dk - dk;
        double ld1 = 25.07663025100354;
        bk = bk && bk;
        dk = dk - dk;
        boolean lb2 = true;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = bk || bk;
        dk *= -1;
        dk = dk - dk;
        boolean lb3 = false;
        bk = bk || bk;
        ok = ok.m4();
        on += dk;
        ok = ok.m4(dk, dk, dk, dk);
        ok.m2(bk, bk, bk, bk);
</cutPoint1183>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1184>
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = !bk;
        dk *= -1;
        boolean lb0 = false;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok);
        double ld1 = 26.02348289438215;
        dk *= -1;
        bk = dk > dk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        ok.m2();
</cutPoint1184>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1185>
    Thought lo0 = Thought51.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    boolean lb2 = false;
    ok.m1(ok, ok, ok, ok);
    dk = dk - dk;
    bk = !bk;
    double ld3 = 318.8076226873893;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    if (bk) {
</cutPoint1185>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1186>
        bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo1 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought85.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    if (bk) {
        boolean lb3 = true;
        bk = dk < dk;
        bk = bk || bk;
        bk = ok.m2(bk, bk, bk, bk);
</cutPoint1186>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1187>
    dk = dk + dk;
    bk = bk || bk;
    bk = dk < dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4();
    double ld2 = 359.5105839059282;
</cutPoint1187>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1188>
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought3.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 359.5255595105814;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo3 = Thought24.getInstance(ok, ok, ok, ok);
    Thought lo4 = Thought49.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld5 = 493.7149380501748;
    bk = !bk;
    ok = ok.m4();
    bk = !bk;
    double ld6 = 412.886872357925;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    double ld7 = 361.5316448443843;
    bk = dk < dk;
        dk = ok.m3(bk, bk, bk, bk);
</cutPoint1188>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1189>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 203.87173609405048;
    boolean lb1 = true;
    double ld2 = 126.96170898800594;
    double ld3 = 520.6789943788666;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    bk = dk > dk;
    boolean lb4 = true;
    bk = bk && bk;
    dk = dk - dk;
    double ld5 = 879.7756751383506;
    boolean lb6 = true;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld7 = 78.95669602154217;
    bk = !bk;
    Thought lo8 = Thought0.getInstance();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo9 = Thought15.getInstance(bk, bk, bk, bk);
</cutPoint1189>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought34 extends Thought{
private static ArrayList<Thought34> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 235.9350336683546;
private double fd1 = 651.5334190694534;
private Thought fo0 = null;
private Thought fo1 = null;
Thought34 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought34 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought34 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought34 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought34 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought34 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought34 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought34 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought34 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought34 instance = new Thought34 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought34 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought34 instance = new Thought34 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought34 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought34 instance = new Thought34 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought34 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought34 instance = new Thought34 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought34 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought34 instance = new Thought34 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought34 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought34 instance = new Thought34 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought34 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought34 instance = new Thought34 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought34 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought34 instance = new Thought34 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1190>
    Thought lo0 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    Thought lo1 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought42.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk && bk;
    bk = dk < dk;
    Thought lo3 = Thought41.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo4 = Thought88.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
</cutPoint1190>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1191>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        dk *= -1;
        bk = bk && bk;
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk = ok.m3();
        bk = dk > dk;
        on += dk;
        dk = ok.m3(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok);
        }
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2();
    bk = dk < dk;
    bk = bk || bk;
</cutPoint1191>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1192>
    dk *= -1;
    dk = dk - dk;
    double ld0 = 414.3287605167886;
    boolean lb1 = true;
        dk = dk - dk;
    ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb2 = false;
    Thought lo3 = Thought6.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 118.09956005756672;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld5 = 304.90166737794016;
    Thought lo6 = Thought80.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld7 = 528.4689720113372;
    bk = bk || bk;
    bk = ok.m2();
    double ld8 = 977.3554963112442;
    boolean lb9 = true;
    boolean lb10 = true;
    Thought lo11 = Thought44.getInstance(dk, dk, dk, dk);
</cutPoint1192>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1193>
    ok.m1(bk, bk, bk, bk);
    Thought lo0 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought30.getInstance();
    on -= dk;
    ok.m3(dk, dk, dk, dk);
    boolean lb3 = false;
    dk *= -1;
    ok.m1(bk, bk, bk, bk);
    dk = dk + dk;
    double ld4 = 289.99728974612026;
    bk = bk && bk;
    on += dk;
</cutPoint1193>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1194>
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld0 = 743.7300527521212;
    on += dk;
    double ld1 = 205.78486616754273;
    dk *= -1;
        bk = bk || bk;
    bk = !bk;
    double ld2 = 183.81837430924068;
    Thought lo3 = Thought21.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    dk = dk + dk;
    dk = dk - dk;
    bk = !bk;
    bk = bk || bk;
    boolean lb4 = true;
    Thought lo5 = Thought71.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb6 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1194>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1195>
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    boolean lb0 = false;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        on += dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        Thought lo2 = Thought45.getInstance(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2();
        }
    Thought lo3 = Thought59.getInstance(dk, dk, dk, dk);
    Thought lo4 = Thought88.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    Thought lo5 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb6 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        ok.m2(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        double ld7 = 641.9480906779474;
</cutPoint1195>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1196>
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 195.70016984881227;
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        double ld1 = 32.305972369331094;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
</cutPoint1196>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1197>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    on -= dk;
    dk = dk + dk;
    dk = dk + dk;
</cutPoint1197>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1198>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought38.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 782.8215597336023;
    ok = ok.m4();
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo3 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    double ld4 = 816.3059697706318;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        if (bk) {
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = !bk;
</cutPoint1198>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1199>
    dk = dk - dk;
    dk = dk + dk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2();
    dk = dk - dk;
    boolean lb1 = true;
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 132.0546764513358;
    bk = dk > dk;
</cutPoint1199>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1200>
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought80.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk);
    double ld1 = 823.580108555834;
    Thought lo2 = Thought92.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    if (bk) {
</cutPoint1200>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1201>
    boolean lb0 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought73.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    double ld2 = 551.9581930192674;
    Thought lo3 = Thought56.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought67.getInstance();
    ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    bk = bk && bk;
    Thought lo5 = Thought77.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo6 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1201>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1202>
    bk = !bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought59.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 939.7946025065726;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok);
    bk = !bk;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    bk = bk || bk;
        double ld2 = 343.19857628867175;
    bk = dk < dk;
    bk = bk && bk;
    bk = dk > dk;
    double ld3 = 619.2819557566373;
    Thought lo4 = Thought41.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk < dk;
    dk = dk - dk;
    on -= dk;
    bk = dk < dk;
</cutPoint1202>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1203>
    ok.m2(bk, bk, bk, bk);
    boolean lb0 = true;
    dk = dk - dk;
    bk = dk < dk;
    on += dk;
    double ld1 = 514.4342568715015;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
    bk = !bk;
</cutPoint1203>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1204>
    boolean lb0 = true;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk *= -1;
    dk = dk - dk;
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        bk = !bk;
        dk = dk - dk;
        bk = bk || bk;
        bk = bk && bk;
        dk *= -1;
        bk = dk > dk;
        Thought lo2 = Thought64.getInstance(ok, ok, ok, ok);
        double ld3 = 508.7350381218868;
        bk = dk < dk;
        double ld4 = 224.65116083736845;
        if (bk) {
            Thought lo5 = Thought41.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk > dk;
            ok.m3();
</cutPoint1204>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1205>
    double ld0 = 962.1032495423395;
    if (bk) {
        dk = dk + dk;
        dk *= -1;
        dk = dk - dk;
        Thought lo1 = Thought16.getInstance(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk + dk;
        Thought lo2 = Thought52.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = false;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb4 = false;
        dk *= -1;
        boolean lb5 = false;
        bk = bk || bk;
        dk = dk - dk;
        boolean lb6 = true;
        ok.m3(ok, ok, ok, ok);
        if (bk) {
            bk = dk < dk;
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk + dk;
            ok = ok.m4();
</cutPoint1205>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1206>
    bk = ok.m2(dk, dk, dk, dk);
    double ld0 = 99.18448826426118;
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    double ld1 = 91.772049701477;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = !bk;
    dk = dk + dk;
    bk = !bk;
    bk = dk < dk;
    Thought lo2 = Thought53.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought31.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    boolean lb4 = false;
    double ld5 = 569.5792456323406;
</cutPoint1206>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1207>
    Thought lo0 = Thought62.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    on -= dk;
    dk *= -1;
    dk = dk - dk;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1207>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1208>
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
    boolean lb1 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb2 = false;
    bk = dk > dk;
    boolean lb3 = false;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 15.412461959779789;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    on -= dk;
    dk = dk - dk;
    dk *= -1;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
</cutPoint1208>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1209>
        double ld0 = 187.62926910929176;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought95.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb3 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
</cutPoint1209>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1210>
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        boolean lb0 = true;
    double ld1 = 257.2589400566471;
    Thought lo2 = Thought2.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld4 = 451.48539917979514;
    bk = bk && bk;
</cutPoint1210>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1211>
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    bk = dk > dk;
    boolean lb0 = true;
    bk = dk < dk;
    bk = ok.m2();
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = !bk;
    dk *= -1;
    bk = dk < dk;
        bk = bk || bk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo2 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1211>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1212>
    on -= dk;
    Thought lo0 = Thought59.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    on -= dk;
    bk = !bk;
    boolean lb1 = false;
    on -= dk;
    bk = dk > dk;
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4();
</cutPoint1212>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1213>
    dk = dk - dk;
    on -= dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    double ld0 = 630.0458580432844;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo1 = Thought55.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 369.5847634099394;
    bk = bk || bk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    dk = dk + dk;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        bk = bk || bk;
        bk = !bk;
</cutPoint1213>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1214>
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    bk = bk || bk;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 272.5174846268868;
    Thought lo1 = Thought44.getInstance();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk - dk;
    bk = bk || bk;
    dk = dk - dk;
</cutPoint1214>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1215>
    on -= dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    bk = !bk;
    dk = dk + dk;
    double ld1 = 72.53390274455563;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo2 = Thought19.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo3 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
</cutPoint1215>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1216>
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    double ld0 = 399.01567061131743;
    double ld1 = 651.0315296125494;
    bk = bk || bk;
    ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint1216>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1217>
    on += dk;
    bk = dk < dk;
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought55.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb1 = false;
    bk = dk < dk;
    bk = dk < dk;
</cutPoint1217>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1218>
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1218>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1219>
    boolean lb0 = true;
    bk = ok.m2();
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    double ld1 = 694.4610174071814;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
    bk = !bk;
    double ld3 = 143.49142658894917;
    dk *= -1;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        dk = dk - dk;
        }
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
</cutPoint1219>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1220>
    boolean lb0 = false;
    boolean lb1 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb2 = true;
    on += dk;
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    dk = dk + dk;
    bk = bk || bk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = dk < dk;
        dk *= -1;
        bk = dk > dk;
</cutPoint1220>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1221>
    ok.m1();
    boolean lb0 = false;
    bk = !bk;
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    dk *= -1;
    boolean lb1 = true;
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1221>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1222>
    double ld0 = 376.8594284924201;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    Thought lo2 = Thought28.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb3 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought98.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    on += dk;
    boolean lb5 = true;
        Thought lo6 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
</cutPoint1222>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1223>
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought23.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought54.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = true;
    bk = dk < dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
</cutPoint1223>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1224>
    on -= dk;
    on += dk;
    Thought lo0 = Thought3.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb1 = false;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1224>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought35 extends Thought{
private static ArrayList<Thought35> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 184.3433351653583;
private double fd1 = 125.9794524460837;
private Thought fo0 = null;
private Thought fo1 = null;
Thought35 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought35 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought35 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought35 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought35 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought35 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought35 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought35 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought35 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought35 instance = new Thought35 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought35 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought35 instance = new Thought35 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought35 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought35 instance = new Thought35 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought35 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought35 instance = new Thought35 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought35 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought35 instance = new Thought35 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought35 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought35 instance = new Thought35 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought35 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought35 instance = new Thought35 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought35 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought35 instance = new Thought35 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1225>
    bk = dk < dk;
    for(int j=0; j<10; j++){
        boolean lb0 = false;
        bk = dk > dk;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo1 = Thought7.getInstance(bk, bk, bk, bk);
        dk *= -1;
        boolean lb2 = true;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        for(int j=0; j<10; j++){
            Thought lo3 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk && bk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = dk > dk;
            dk = dk - dk;
            on -= dk;
            ok.m1(ok, ok, ok, ok);
            on -= dk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb4 = false;
            dk = dk - dk;
            ok = ok.m4();
            ok.m3(dk, dk, dk, dk);
            bk = bk && bk;
            boolean lb5 = false;
</cutPoint1225>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1226>
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    dk *= -1;
    dk = dk + dk;
    bk = dk < dk;
    on -= dk;
    dk = dk + dk;
    on -= dk;
    double ld1 = 322.04659528636614;
    Thought lo2 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought91.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = true;
    boolean lb5 = false;
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    bk = dk > dk;
    boolean lb6 = true;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb7 = true;
    ok = ok.m4();
    dk *= -1;
    double ld8 = 383.6243068158035;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint1226>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1227>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb0 = false;
    double ld1 = 80.86417184065711;
    bk = dk < dk;
    dk = dk - dk;
    double ld2 = 541.0174947389131;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 680.0857325575822;
</cutPoint1227>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1228>
    double ld0 = 388.56337736487643;
    ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    boolean lb1 = true;
    double ld2 = 869.0669509603792;
    boolean lb3 = false;
    dk = dk + dk;
    dk *= -1;
    for(int j=0; j<10; j++){
        Thought lo4 = Thought33.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb5 = true;
        }
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
</cutPoint1228>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1229>
    dk = dk + dk;
    on += dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 361.9275109705174;
    bk = ok.m2();
    bk = !bk;
    Thought lo1 = Thought60.getInstance(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint1229>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1230>
    dk *= -1;
    Thought lo0 = Thought38.getInstance();
    dk = dk + dk;
    double ld1 = 29.40347402146015;
    bk = dk > dk;
    dk = dk - dk;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk && bk;
        dk = dk + dk;
        bk = bk && bk;
        bk = !bk;
        bk = bk && bk;
        bk = dk > dk;
</cutPoint1230>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1231>
    on -= dk;
    dk *= -1;
    boolean lb0 = false;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    double ld1 = 244.02141424641593;
    boolean lb2 = true;
    dk *= -1;
    bk = dk < dk;
    bk = bk || bk;
    Thought lo3 = Thought12.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo4 = Thought43.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    dk = dk + dk;
    dk = dk - dk;
</cutPoint1231>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1232>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 63.39069826668478;
    for(int j=0; j<10; j++){
        boolean lb1 = false;
        dk = dk + dk;
        }
    double ld2 = 995.8290349654894;
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo3 = Thought18.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok.m3();
        dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1232>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1233>
    on -= dk;
    bk = dk > dk;
    bk = dk > dk;
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    on -= dk;
    on -= dk;
    dk *= -1;
    double ld1 = 446.0516405279997;
    ok.m2();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    double ld2 = 690.0560806428625;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1233>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1234>
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought86.getInstance();
    on -= dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = dk > dk;
    double ld1 = 158.79040554760124;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb2 = false;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo3 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    dk = dk - dk;
    double ld4 = 450.9785470769733;
</cutPoint1234>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1235>
    dk = dk - dk;
    dk = dk + dk;
    bk = bk && bk;
    Thought lo0 = Thought94.getInstance(ok, ok, ok, ok);
    double ld1 = 295.9502554447663;
    double ld2 = 173.06421185942133;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk < dk;
    dk *= -1;
    dk = ok.m3();
    Thought lo3 = Thought77.getInstance(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    boolean lb4 = false;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    on -= dk;
</cutPoint1235>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1236>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    ok.m3();
</cutPoint1236>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1237>
    boolean lb0 = true;
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    Thought lo1 = Thought77.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    bk = bk || bk;
    dk = dk - dk;
    double ld2 = 85.69037480516158;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 29.86049383273574;
    Thought lo4 = Thought21.getInstance(ok, ok, ok, ok);
</cutPoint1237>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1238>
    double ld0 = 373.17019233807014;
    bk = dk < dk;
    dk = dk + dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
</cutPoint1238>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1239>
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld0 = 982.5936260605226;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    bk = ok.m2();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    bk = bk || bk;
    dk = dk - dk;
    on -= dk;
    bk = bk || bk;
</cutPoint1239>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1240>
    on -= dk;
    bk = bk || bk;
    dk *= -1;
    bk = bk && bk;
    double ld0 = 201.30847619411998;
    double ld1 = 720.4605378278935;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1240>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1241>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo0 = Thought76.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    double ld1 = 292.6524005814776;
    on -= dk;
    boolean lb2 = false;
</cutPoint1241>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1242>
    on += dk;
    dk *= -1;
    double ld0 = 859.6196289101769;
    boolean lb1 = false;
    on -= dk;
    ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    dk *= -1;
    boolean lb2 = false;
        boolean lb3 = false;
    bk = bk || bk;
    ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    boolean lb4 = true;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    if (bk) {
</cutPoint1242>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1243>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    for(int j=0; j<10; j++){
        double ld1 = 134.02101599260286;
        bk = dk > dk;
        on -= dk;
        boolean lb2 = false;
        dk = dk - dk;
        dk = ok.m3();
        double ld3 = 736.7926471219713;
        dk = dk + dk;
        boolean lb4 = false;
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb5 = true;
        bk = dk < dk;
        on += dk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint1243>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1244>
    boolean lb0 = true;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    on -= dk;
    bk = bk && bk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought60.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    dk *= -1;
</cutPoint1244>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1245>
    bk = bk && bk;
    Thought lo0 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
        bk = !bk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    on += dk;
</cutPoint1245>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1246>
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo0 = Thought3.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        }
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok);
    on += dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought93.getInstance();
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo2 = Thought52.getInstance(bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    on += dk;
</cutPoint1246>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1247>
    bk = bk || bk;
    boolean lb0 = true;
    bk = bk && bk;
    boolean lb1 = true;
    Thought lo2 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought13.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld4 = 303.8801264175436;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb5 = true;
    bk = dk > dk;
    bk = !bk;
    bk = !bk;
    boolean lb6 = false;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb7 = true;
    boolean lb8 = true;
    bk = bk || bk;
    on += dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1247>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1248>
    dk *= -1;
    on -= dk;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        boolean lb0 = true;
        ok = ok.m4(ok, ok, ok, ok);
        bk = !bk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk - dk;
        dk = dk - dk;
        boolean lb1 = true;
        boolean lb2 = false;
        dk = ok.m3();
</cutPoint1248>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1249>
    double ld0 = 345.94695760416704;
    dk *= -1;
    dk *= -1;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 798.1537318481046;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb3 = true;
        ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2();
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1249>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1250>
    boolean lb0 = false;
    bk = bk || bk;
    double ld1 = 413.8610083906911;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 571.2834699396865;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
        bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    double ld3 = 706.5487418273367;
    boolean lb4 = false;
        bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb5 = false;
</cutPoint1250>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1251>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
        dk = dk + dk;
    dk *= -1;
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    boolean lb3 = true;
    ok = ok.m4();
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint1251>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1252>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 77.06934796870947;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought10.getInstance(ok, ok, ok, ok);
    bk = !bk;
    on -= dk;
    bk = bk && bk;
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    double ld2 = 424.6006788718278;
    bk = dk < dk;
    ok.m3();
    bk = dk < dk;
    dk = dk - dk;
    bk = bk && bk;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb3 = false;
    dk *= -1;
    double ld4 = 300.5958980174315;
    bk = dk < dk;
</cutPoint1252>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1253>
    bk = bk || bk;
    double ld0 = 495.5741674080742;
    dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought97.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought70.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    double ld3 = 179.90544000915335;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought15.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1253>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1254>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = bk || bk;
    bk = dk > dk;
    boolean lb0 = false;
    dk *= -1;
    dk = dk + dk;
    dk = dk - dk;
    Thought lo1 = Thought86.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1254>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1255>
    dk = ok.m3();
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    on += dk;
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 280.5462392734901;
    Thought lo3 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought2.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    boolean lb5 = false;
    bk = !bk;
    ok.m3(ok, ok, ok, ok);
    on -= dk;
    Thought lo6 = Thought56.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1255>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1256>
    ok = ok.m4();
    dk *= -1;
    bk = dk < dk;
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    on += dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4();
    Thought lo1 = Thought84.getInstance(dk, dk, dk, dk);
    double ld2 = 169.22644956836282;
    boolean lb3 = false;
    Thought lo4 = Thought1.getInstance(bk, bk, bk, bk);
    boolean lb5 = true;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo6 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    double ld7 = 472.11865709521044;
</cutPoint1256>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1257>
    bk = !bk;
    boolean lb0 = true;
    dk = dk - dk;
    dk = dk - dk;
    double ld1 = 739.2598548845259;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    Thought lo2 = Thought54.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    Thought lo3 = Thought95.getInstance();
    dk *= -1;
    bk = dk > dk;
    boolean lb4 = true;
    ok.m1(dk, dk, dk, dk);
    boolean lb5 = true;
    on += dk;
    Thought lo6 = Thought78.getInstance(bk, bk, bk, bk);
    boolean lb7 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    boolean lb8 = false;
    dk = dk - dk;
</cutPoint1257>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1258>
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    boolean lb0 = false;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2();
        dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk - dk;
    bk = bk && bk;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint1258>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1259>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    bk = dk < dk;
    on -= dk;
    dk *= -1;
    double ld0 = 423.4090193462125;
    boolean lb1 = false;
    bk = !bk;
        dk = ok.m3(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    Thought lo2 = Thought15.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    boolean lb3 = false;
    double ld4 = 168.1215279270488;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint1259>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought36 extends Thought{
private static ArrayList<Thought36> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 914.3949812945818;
private double fd1 = 962.0452194806591;
private Thought fo0 = null;
private Thought fo1 = null;
Thought36 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought36 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought36 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought36 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought36 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought36 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought36 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought36 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought36 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought36 instance = new Thought36 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought36 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought36 instance = new Thought36 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought36 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought36 instance = new Thought36 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought36 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought36 instance = new Thought36 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought36 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought36 instance = new Thought36 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought36 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought36 instance = new Thought36 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought36 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought36 instance = new Thought36 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought36 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought36 instance = new Thought36 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1260>
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
        Thought lo0 = Thought11.getInstance(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = dk < dk;
        dk *= -1;
    dk = dk - dk;
    double ld1 = 777.8362915902684;
    Thought lo2 = Thought4.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = bk && bk;
    dk = dk + dk;
    on += dk;
    ok.m1(ok, ok, ok, ok);
    dk = dk - dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
</cutPoint1260>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1261>
    on -= dk;
    bk = bk || bk;
    bk = !bk;
    if (bk) {
        boolean lb0 = true;
        boolean lb1 = false;
        bk = ok.m2();
        bk = dk > dk;
        dk = dk + dk;
        ok.m2(dk, dk, dk, dk);
        bk = dk > dk;
        bk = bk || bk;
        bk = bk || bk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb2 = false;
        double ld3 = 146.9447403082297;
        bk = bk && bk;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            bk = dk < dk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk || bk;
            bk = dk < dk;
            bk = dk < dk;
            bk = !bk;
            bk = dk < dk;
</cutPoint1261>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1262>
    double ld0 = 814.2207155304666;
    Thought lo1 = Thought81.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb2 = true;
    boolean lb3 = true;
    ok.m3(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        double ld4 = 455.27209434551554;
        dk = dk + dk;
        dk = dk - dk;
        boolean lb5 = true;
        double ld6 = 797.7251161873694;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb7 = false;
        bk = ok.m2(ok, ok, ok, ok);
        bk = bk && bk;
        boolean lb8 = false;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
</cutPoint1262>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1263>
    bk = dk < dk;
    bk = ok.m2();
    dk *= -1;
    bk = dk > dk;
    bk = bk && bk;
    dk *= -1;
        bk = !bk;
    double ld0 = 147.48139157033674;
    dk *= -1;
    bk = bk && bk;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    if (bk) {
        on -= dk;
        dk *= -1;
        double ld2 = 703.117051074597;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb3 = true;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo4 = Thought40.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        Thought lo5 = Thought56.getInstance(ok, ok, ok, ok);
</cutPoint1263>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1264>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
</cutPoint1264>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1265>
    boolean lb0 = true;
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo2 = Thought94.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    on += dk;
    on += dk;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk - dk;
        Thought lo3 = Thought22.getInstance(ok, ok, ok, ok);
        boolean lb4 = true;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk = dk - dk;
</cutPoint1265>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1266>
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb0 = false;
    on += dk;
    boolean lb1 = true;
    bk = dk < dk;
    bk = !bk;
    if (bk) {
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        boolean lb2 = true;
        boolean lb3 = true;
        bk = bk && bk;
        double ld4 = 280.2540062710376;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        bk = dk < dk;
        bk = !bk;
        dk = dk - dk;
        double ld5 = 118.123684648864;
        on += dk;
        bk = bk || bk;
</cutPoint1266>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1267>
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb0 = true;
    dk *= -1;
        boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld2 = 711.6644624876277;
    bk = bk || bk;
    Thought lo3 = Thought94.getInstance();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    bk = bk || bk;
</cutPoint1267>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1268>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    double ld0 = 457.13876011876033;
    dk = dk + dk;
    double ld1 = 737.4181981572515;
    for(int j=0; j<10; j++){
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk *= -1;
        boolean lb2 = false;
        for(int j=0; j<10; j++){
            double ld3 = 919.8777367586258;
            ok.m2();
            ok.m1(dk, dk, dk, dk);
            Thought lo4 = Thought73.getInstance(bk, bk, bk, bk);
            double ld5 = 389.78124610858987;
            dk *= -1;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb6 = false;
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            boolean lb7 = false;
            ok.m1(ok, ok, ok, ok);
            bk = dk < dk;
</cutPoint1268>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1269>
    dk *= -1;
    bk = bk || bk;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    bk = bk || bk;
    bk = bk || bk;
        boolean lb1 = true;
    boolean lb2 = true;
    bk = bk && bk;
    bk = dk > dk;
    dk = ok.m3();
    dk = dk - dk;
    boolean lb3 = true;
    bk = bk || bk;
    dk = dk - dk;
    Thought lo4 = Thought43.getInstance(dk, dk, dk, dk);
    boolean lb5 = true;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
        double ld6 = 422.4255856532329;
</cutPoint1269>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1270>
    Thought lo0 = Thought52.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        boolean lb1 = false;
        ok.m2(ok, ok, ok, ok);
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld2 = 508.5177006363228;
        ok.m3();
        double ld3 = 509.99978128045353;
        bk = ok.m2(dk, dk, dk, dk);
        on += dk;
        bk = bk || bk;
        dk *= -1;
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        bk = dk > dk;
        boolean lb4 = true;
        Thought lo5 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        dk = dk - dk;
        boolean lb6 = false;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1270>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1271>
    boolean lb0 = true;
    dk = dk - dk;
    dk = dk + dk;
    bk = !bk;
    bk = dk > dk;
    bk = !bk;
    double ld1 = 298.9872198362696;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    boolean lb2 = true;
    boolean lb3 = true;
    double ld4 = 620.5347347484015;
    dk = dk + dk;
    boolean lb5 = false;
    on -= dk;
    bk = bk || bk;
    bk = dk < dk;
    dk = dk + dk;
    Thought lo6 = Thought75.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk > dk;
    Thought lo7 = Thought1.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1271>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1272>
    bk = bk && bk;
    bk = dk > dk;
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4();
    boolean lb0 = true;
    bk = bk || bk;
    bk = !bk;
    boolean lb1 = true;
        dk = ok.m3(dk, dk, dk, dk);
    on -= dk;
    dk = ok.m3(bk, bk, bk, bk);
    double ld2 = 542.8294142461625;
</cutPoint1272>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1273>
    dk = dk + dk;
    Thought lo0 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    Thought lo1 = Thought58.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk < dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb2 = false;
    for(int j=0; j<10; j++){
        bk = !bk;
        on += dk;
        Thought lo3 = Thought83.getInstance(bk, bk, bk, bk);
        bk = dk > dk;
        }
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1273>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1274>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    Thought lo0 = Thought20.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3();
    Thought lo1 = Thought3.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    for(int j=0; j<10; j++){
        boolean lb2 = false;
        ok.m2(bk, bk, bk, bk);
        bk = bk && bk;
        boolean lb3 = false;
        boolean lb4 = false;
        dk = dk - dk;
        boolean lb5 = true;
        dk = dk + dk;
        boolean lb6 = true;
        on += dk;
        bk = dk < dk;
        boolean lb7 = false;
        boolean lb8 = true;
        dk = dk - dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb9 = false;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1274>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1275>
    if (bk) {
        bk = bk || bk;
        bk = !bk;
        dk = dk - dk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        bk = !bk;
        ok.m2(ok, ok, ok, ok);
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        } else {
        dk = dk - dk;
        if (bk) {
            bk = bk && bk;
            ok.m2();
            ok = ok.m4(dk, dk, dk, dk);
            bk = bk || bk;
            ok = ok.m4(bk, bk, bk, bk);
            dk *= -1;
            bk = !bk;
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk || bk;
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok);
            Thought lo0 = Thought37.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1275>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1276>
    bk = dk > dk;
    on += dk;
    dk = dk - dk;
    bk = dk < dk;
    boolean lb0 = false;
    boolean lb1 = false;
    bk = ok.m2();
    bk = !bk;
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint1276>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1277>
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = false;
    bk = dk > dk;
    dk = ok.m3();
    double ld1 = 28.673749387698795;
    ok.m1(dk, dk, dk, dk);
    bk = dk < dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        boolean lb2 = false;
        bk = !bk;
        bk = !bk;
        bk = dk > dk;
        bk = !bk;
        dk = dk - dk;
</cutPoint1277>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1278>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    double ld0 = 542.9919212212336;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4();
    double ld1 = 276.709835207458;
    bk = dk < dk;
    double ld2 = 702.2054618685038;
    bk = bk || bk;
    dk = dk + dk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    Thought lo4 = Thought8.getInstance(ok, ok, ok, ok);
    Thought lo5 = Thought1.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint1278>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1279>
    double ld0 = 226.30272513314736;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    Thought lo1 = Thought32.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    on -= dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
</cutPoint1279>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1280>
    dk = dk - dk;
    dk = ok.m3();
    boolean lb0 = false;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk - dk;
    double ld1 = 938.2558680462971;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = bk && bk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        }
    bk = !bk;
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
        bk = bk || bk;
    dk = dk - dk;
</cutPoint1280>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1281>
    boolean lb0 = false;
    boolean lb1 = true;
    boolean lb2 = true;
    bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
    Thought lo3 = Thought40.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld4 = 687.589037868995;
    dk *= -1;
        dk = ok.m3();
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
</cutPoint1281>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1282>
    dk *= -1;
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        bk = !bk;
        boolean lb0 = false;
        double ld1 = 125.38805408722959;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought7.getInstance();
        bk = bk && bk;
        Thought lo3 = Thought40.getInstance(dk, dk, dk, dk);
        } else {
        boolean lb4 = false;
                boolean lb5 = false;
        ok.m3(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        dk = dk - dk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint1282>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1283>
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok.m2(ok, ok, ok, ok);
        Thought lo0 = Thought45.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 100.80739664172233;
        bk = dk < dk;
        bk = bk || bk;
        ok = ok.m4();
        bk = bk || bk;
        boolean lb2 = false;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        double ld3 = 840.4130369372174;
        dk = dk - dk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk && bk;
        boolean lb4 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        boolean lb5 = false;
        }
    double ld6 = 212.10773750657873;
    bk = !bk;
    double ld7 = 366.5065394054616;
    dk *= -1;
    on -= dk;
    boolean lb8 = true;
    boolean lb9 = true;
</cutPoint1283>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1284>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb1 = false;
    bk = bk || bk;
    Thought lo2 = Thought55.getInstance();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk && bk;
        if (bk) {
            Thought lo3 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = !bk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1284>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1285>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought76.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
        double ld1 = 936.7581655829738;
    bk = dk < dk;
        Thought lo2 = Thought55.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    double ld3 = 410.92604843862347;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo4 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1285>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1286>
    boolean lb0 = true;
    dk = dk - dk;
    bk = !bk;
    bk = dk < dk;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb2 = true;
    boolean lb3 = false;
    dk *= -1;
</cutPoint1286>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1287>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought24.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    on -= dk;
    bk = dk > dk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        bk = dk < dk;
        ok.m3(ok, ok, ok, ok);
        dk = dk - dk;
</cutPoint1287>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1288>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought86.getInstance();
    dk = dk + dk;
    bk = dk > dk;
    Thought lo1 = Thought78.getInstance(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    double ld2 = 379.4666455993273;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought69.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1288>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1289>
    dk = dk + dk;
        bk = dk > dk;
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    Thought lo0 = Thought90.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    on -= dk;
        dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint1289>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1290>
    bk = dk < dk;
    bk = bk || bk;
    boolean lb0 = false;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        boolean lb1 = true;
        on -= dk;
        dk = dk + dk;
        bk = dk > dk;
        bk = dk > dk;
        }
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    bk = !bk;
    bk = dk > dk;
    boolean lb2 = false;
    dk *= -1;
    dk = dk - dk;
</cutPoint1290>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1291>
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought30.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    Thought lo1 = Thought3.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk > dk;
    boolean lb3 = false;
    dk = ok.m3();
    Thought lo4 = Thought4.getInstance(dk, dk, dk, dk);
    boolean lb5 = true;
    boolean lb6 = false;
    double ld7 = 157.12815895750546;
    bk = bk && bk;
    boolean lb8 = true;
</cutPoint1291>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1292>
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 869.4715548344775;
    dk *= -1;
    dk = dk - dk;
        dk = dk - dk;
    ok.m2();
    boolean lb1 = false;
    bk = bk && bk;
    Thought lo2 = Thought72.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    dk *= -1;
</cutPoint1292>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1293>
    Thought lo0 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 984.9777898129284;
    bk = bk && bk;
    bk = bk && bk;
    bk = ok.m2();
    dk = dk + dk;
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk);
    dk = dk + dk;
</cutPoint1293>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1294>
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo0 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought50.getInstance();
    bk = dk > dk;
    dk = dk - dk;
    boolean lb3 = true;
    dk = dk + dk;
    dk = dk - dk;
</cutPoint1294>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought37 extends Thought{
private static ArrayList<Thought37> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 257.6494680383093;
private double fd1 = 731.8575388516568;
private Thought fo0 = null;
private Thought fo1 = null;
Thought37 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought37 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought37 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought37 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought37 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought37 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought37 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought37 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought37 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought37 instance = new Thought37 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought37 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought37 instance = new Thought37 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought37 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought37 instance = new Thought37 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought37 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought37 instance = new Thought37 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought37 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought37 instance = new Thought37 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought37 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought37 instance = new Thought37 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought37 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought37 instance = new Thought37 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought37 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought37 instance = new Thought37 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1295>
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo0 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 440.2408084141671;
    bk = !bk;
    ok.m1();
    boolean lb2 = false;
    double ld3 = 258.9661886579365;
</cutPoint1295>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1296>
    ok = ok.m4(dk, dk, dk, dk);
    if (bk) {
        on += dk;
        on -= dk;
        ok.m1(bk, bk, bk, bk);
        Thought lo0 = Thought79.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        Thought lo1 = Thought36.getInstance(ok, ok, ok, ok);
        on -= dk;
        on += dk;
        } else if (bk) {
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        ok = ok.m4();
        dk *= -1;
        double ld2 = 592.5383341921273;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk || bk;
</cutPoint1296>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1297>
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 530.0751549277811;
    bk = dk < dk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    boolean lb1 = false;
    boolean lb2 = true;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb3 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = dk > dk;
    Thought lo4 = Thought24.getInstance();
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint1297>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1298>
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
    Thought lo0 = Thought58.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    double ld1 = 554.174299212014;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
    boolean lb2 = false;
    ok.m3(ok, ok, ok, ok);
</cutPoint1298>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1299>
    bk = bk || bk;
    dk = dk + dk;
    dk = dk - dk;
    boolean lb0 = false;
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = true;
    double ld2 = 511.78492678514635;
    on -= dk;
    boolean lb3 = true;
    bk = bk && bk;
    bk = bk && bk;
    Thought lo4 = Thought16.getInstance();
    on += dk;
    dk = dk - dk;
    boolean lb5 = false;
    bk = dk > dk;
    dk = dk - dk;
    boolean lb6 = false;
    dk = dk - dk;
    dk = dk - dk;
    bk = !bk;
    ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
</cutPoint1299>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1300>
    bk = bk || bk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 897.8085135880526;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    double ld1 = 596.1206221109518;
    dk = dk - dk;
    bk = dk < dk;
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    bk = bk || bk;
    on += dk;
        dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = true;
    dk = dk - dk;
</cutPoint1300>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1301>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok);
        dk = dk - dk;
        bk = bk && bk;
        bk = !bk;
        Thought lo0 = Thought92.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = dk < dk;
        Thought lo1 = Thought13.getInstance();
</cutPoint1301>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1302>
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb0 = true;
    dk *= -1;
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    boolean lb2 = true;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        Thought lo3 = Thought79.getInstance();
        bk = bk || bk;
        bk = ok.m2(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint1302>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1303>
    Thought lo0 = Thought31.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld2 = 265.4025918574964;
    ok.m3();
    ok.m3(dk, dk, dk, dk);
    on -= dk;
    dk *= -1;
    boolean lb3 = false;
    bk = bk || bk;
    bk = dk < dk;
    Thought lo4 = Thought55.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 807.1085415734236;
    boolean lb6 = false;
    bk = bk && bk;
</cutPoint1303>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1304>
    double ld0 = 470.7060520327485;
    double ld1 = 117.82778069249687;
    bk = dk > dk;
    Thought lo2 = Thought80.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    if (bk) {
        ok = ok.m4();
        dk *= -1;
        Thought lo3 = Thought81.getInstance(dk, dk, dk, dk);
        bk = bk && bk;
        bk = !bk;
        if (bk) {
</cutPoint1304>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1305>
    Thought lo0 = Thought14.getInstance(bk, bk, bk, bk);
            boolean lb1 = true;
    bk = dk < dk;
    bk = bk || bk;
    bk = dk > dk;
    on += dk;
    dk = dk + dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought21.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    bk = !bk;
        dk = ok.m3();
    Thought lo3 = Thought23.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1305>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1306>
    dk *= -1;
    double ld0 = 681.9966692859323;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 820.2771817207251;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld2 = 304.49954198454606;
    dk = dk - dk;
    Thought lo3 = Thought22.getInstance();
    bk = !bk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint1306>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1307>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    bk = !bk;
    dk = dk - dk;
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = bk && bk;
</cutPoint1307>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1308>
    dk = dk + dk;
    dk = dk - dk;
    Thought lo0 = Thought16.getInstance();
    Thought lo1 = Thought53.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = true;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    for(int j=0; j<10; j++){
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        double ld3 = 489.9066717832915;
        double ld4 = 113.2931293839101;
        dk *= -1;
        for(int j=0; j<10; j++){
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = dk > dk;
            boolean lb5 = true;
            bk = bk && bk;
            dk = dk + dk;
            dk = dk + dk;
            Thought lo6 = Thought86.getInstance(ok, ok, ok, ok);
            bk = dk > dk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4();
            on -= dk;
</cutPoint1308>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1309>
    ok.m1(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought3.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought98.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    double ld2 = 768.2131830878575;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought91.getInstance(bk, bk, bk, bk);
    boolean lb4 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    </cutPoint1309>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1310>
    on -= dk;
    dk = dk - dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    boolean lb0 = false;
    Thought lo1 = Thought51.getInstance(ok, ok, ok, ok);
    Thought lo2 = Thought78.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on -= dk;
    Thought lo3 = Thought0.getInstance();
    bk = !bk;
    bk = !bk;
    </cutPoint1310>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1311>
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought73.getInstance();
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo2 = Thought44.getInstance(bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    bk = bk && bk;
        bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    on += dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1311>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1312>
    double ld0 = 732.9507809929191;
    dk = dk + dk;
    bk = bk || bk;
        dk = dk + dk;
    bk = dk > dk;
    Thought lo1 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    double ld2 = 270.10163686428433;
</cutPoint1312>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1313>
        bk = dk < dk;
    double ld0 = 116.85336991293221;
    boolean lb1 = true;
    Thought lo2 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    Thought lo4 = Thought26.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    bk = dk > dk;
            dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1313>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1314>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
    dk = dk - dk;
    Thought lo0 = Thought19.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 464.2222617816248;
    dk = dk - dk;
    boolean lb2 = false;
    bk = bk && bk;
    bk = bk && bk;
    dk *= -1;
    boolean lb3 = false;
    bk = bk && bk;
</cutPoint1314>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1315>
    double ld0 = 12.502792750281502;
    double ld1 = 933.0359570195261;
    ok = ok.m4();
    boolean lb2 = false;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo3 = Thought25.getInstance(dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    double ld4 = 492.81933450110495;
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo5 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1315>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1316>
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought82.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought96.getInstance();
    boolean lb2 = false;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    on += dk;
    double ld3 = 502.2785337272486;
</cutPoint1316>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1317>
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    bk = !bk;
    Thought lo0 = Thought41.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    Thought lo1 = Thought14.getInstance(dk, dk, dk, dk);
</cutPoint1317>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1318>
    dk = dk + dk;
    Thought lo0 = Thought5.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    on -= dk;
    if (bk) {
        dk = dk - dk;
        ok.m2(ok, ok, ok, ok);
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1318>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1319>
    dk = ok.m3();
    double ld0 = 266.54734927721745;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought37.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1319>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1320>
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    double ld0 = 406.5283840538256;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    boolean lb1 = false;
    bk = bk && bk;
    dk = dk + dk;
    on += dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb2 = true;
    ok = ok.m4();
    double ld3 = 612.7512402536663;
    bk = bk && bk;
</cutPoint1320>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1321>
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    if (bk) {
        bk = bk && bk;
        ok.m3(bk, bk, bk, bk);
        boolean lb0 = true;
        dk = dk - dk;
        dk = dk + dk;
        bk = bk || bk;
</cutPoint1321>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1322>
    dk = dk + dk;
    on -= dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb0 = true;
    dk = dk - dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought47.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint1322>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1323>
    boolean lb0 = true;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2();
    dk = dk + dk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo1 = Thought15.getInstance(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
</cutPoint1323>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1324>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought20.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = true;
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    boolean lb2 = true;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    on += dk;
    bk = !bk;
</cutPoint1324>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1325>
    bk = !bk;
    ok.m3(dk, dk, dk, dk);
    boolean lb0 = false;
    dk *= -1;
    boolean lb1 = true;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        dk = dk - dk;
        bk = bk && bk;
        double ld2 = 394.13313145367465;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1325>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1326>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought9.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1();
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    dk = dk - dk;
    Thought lo2 = Thought11.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint1326>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1327>
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk);
    Thought lo1 = Thought62.getInstance(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 48.55491504113728;
    bk = !bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint1327>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1328>
    dk *= -1;
    dk = dk - dk;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 891.402047364347;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    Thought lo2 = Thought84.getInstance();
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    double ld3 = 896.5136481273908;
    dk = dk + dk;
    dk = dk - dk;
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    on -= dk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld4 = 13.434501667310924;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1328>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1329>
    bk = ok.m2();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought91.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought49.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    dk = dk + dk;
    dk = dk - dk;
    bk = dk > dk;
    boolean lb2 = true;
    boolean lb3 = false;
</cutPoint1329>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought38 extends Thought{
private static ArrayList<Thought38> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 815.9664562196333;
private double fd1 = 367.96843182029136;
private Thought fo0 = null;
private Thought fo1 = null;
Thought38 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought38 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought38 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought38 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought38 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought38 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought38 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought38 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought38 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought38 instance = new Thought38 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought38 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought38 instance = new Thought38 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought38 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought38 instance = new Thought38 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought38 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought38 instance = new Thought38 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought38 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought38 instance = new Thought38 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought38 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought38 instance = new Thought38 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought38 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought38 instance = new Thought38 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought38 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought38 instance = new Thought38 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1330>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = true;
    bk = bk && bk;
    double ld2 = 398.9518029786192;
    dk = dk - dk;
    dk *= -1;
    dk = ok.m3();
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
</cutPoint1330>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1331>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    on += dk;
    dk = dk + dk;
    bk = dk < dk;
    bk = bk || bk;
    double ld0 = 937.4833620778704;
    boolean lb1 = true;
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    if (bk) {
        dk *= -1;
        dk = dk + dk;
        dk *= -1;
</cutPoint1331>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1332>
    double ld0 = 972.4852793283912;
    double ld1 = 968.1793476329967;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
</cutPoint1332>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1333>
    double ld0 = 303.9136344788265;
    Thought lo1 = Thought99.getInstance();
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        Thought lo2 = Thought26.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        } else if (bk) {
        } else {
</cutPoint1333>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1334>
    double ld0 = 533.3911210791895;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = false;
    bk = !bk;
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 778.1754284711567;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
</cutPoint1334>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1335>
    dk *= -1;
    boolean lb0 = false;
    boolean lb1 = true;
    double ld2 = 979.4400541773622;
    bk = bk && bk;
    bk = bk && bk;
    dk *= -1;
        bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    bk = bk && bk;
    dk *= -1;
    Thought lo3 = Thought40.getInstance(ok, ok, ok, ok);
    Thought lo4 = Thought50.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    bk = ok.m2();
    Thought lo5 = Thought3.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb6 = true;
    dk = dk + dk;
    boolean lb7 = false;
    dk *= -1;
    Thought lo8 = Thought98.getInstance(bk, bk, bk, bk);
    Thought lo9 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1335>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1336>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        dk *= -1;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk > dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        boolean lb0 = false;
        dk = dk + dk;
        boolean lb1 = false;
        dk = dk - dk;
        bk = bk && bk;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint1336>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1337>
    boolean lb0 = true;
    boolean lb1 = false;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought93.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk *= -1;
    bk = !bk;
    bk = dk > dk;
    dk *= -1;
    Thought lo3 = Thought85.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1337>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1338>
    double ld0 = 895.3659992276298;
    bk = !bk;
    bk = dk > dk;
    ok.m2();
    bk = bk || bk;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    bk = !bk;
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
</cutPoint1338>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1339>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought46.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 234.57771172595653;
    on += dk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk && bk;
    boolean lb2 = true;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo3 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1339>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1340>
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
        dk = dk - dk;
    bk = bk || bk;
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        boolean lb2 = false;
        dk = dk + dk;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        double ld3 = 854.4023592922027;
        dk *= -1;
        bk = bk && bk;
        bk = dk > dk;
        bk = bk && bk;
</cutPoint1340>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1341>
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    dk = dk + dk;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
        ok.m2(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought37.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought14.getInstance();
    bk = !bk;
    double ld2 = 210.27893120492084;
    bk = bk || bk;
    dk = dk - dk;
    bk = bk || bk;
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
</cutPoint1341>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1342>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought85.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    Thought lo3 = Thought81.getInstance();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld4 = 582.102498642921;
</cutPoint1342>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1343>
    Thought lo0 = Thought85.getInstance(bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    dk = dk + dk;
    boolean lb1 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    dk *= -1;
</cutPoint1343>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1344>
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    bk = bk || bk;
    boolean lb0 = false;
    Thought lo1 = Thought2.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk);
    boolean lb3 = true;
    dk = dk - dk;
    boolean lb4 = false;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1344>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1345>
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb0 = false;
        on -= dk;
        bk = dk < dk;
        for(int j=0; j<10; j++){
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk < dk;
            dk = dk + dk;
            ok.m2();
            bk = bk && bk;
            Thought lo1 = Thought97.getInstance(dk, dk, dk, dk);
            bk = dk < dk;
            ok.m1(bk, bk, bk, bk);
            dk *= -1;
            bk = bk || bk;
            boolean lb2 = true;
</cutPoint1345>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1346>
    bk = dk < dk;
    dk = dk - dk;
    double ld0 = 229.05753340548577;
    double ld1 = 133.5542401005024;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    double ld3 = 927.5759718469121;
    bk = dk < dk;
    boolean lb4 = true;
    boolean lb5 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld6 = 952.043783476605;
    bk = dk > dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1346>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1347>
    dk = dk + dk;
    dk = ok.m3();
    bk = dk < dk;
    on += dk;
    Thought lo0 = Thought82.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    bk = bk || bk;
</cutPoint1347>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1348>
    Thought lo0 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 974.0583728655731;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    Thought lo2 = Thought84.getInstance();
    boolean lb3 = true;
</cutPoint1348>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1349>
    ok.m1(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    bk = dk < dk;
    Thought lo1 = Thought47.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk < dk;
    bk = bk || bk;
    dk = dk + dk;
    bk = bk || bk;
</cutPoint1349>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1350>
    Thought lo0 = Thought22.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    boolean lb1 = true;
    dk = dk + dk;
    Thought lo2 = Thought96.getInstance();
    dk *= -1;
    bk = bk && bk;
    Thought lo3 = Thought48.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought23.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1350>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1351>
    bk = bk && bk;
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    if (bk) {
        bk = !bk;
        ok.m1(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = false;
        bk = bk || bk;
        on += dk;
</cutPoint1351>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1352>
    for(int j=0; j<10; j++){
        double ld0 = 445.13668678745444;
        ok = ok.m4();
        dk *= -1;
        boolean lb1 = false;
        bk = dk > dk;
        dk = dk + dk;
        }
    bk = dk > dk;
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    bk = dk > dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 754.4699360551333;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    boolean lb4 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
</cutPoint1352>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1353>
    ok = ok.m4();
    Thought lo0 = Thought74.getInstance(dk, dk, dk, dk);
    double ld1 = 71.86159370828989;
    bk = ok.m2(bk, bk, bk, bk);
    double ld2 = 194.36828941741726;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    on -= dk;
    boolean lb3 = false;
    on += dk;
    bk = dk < dk;
</cutPoint1353>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1354>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 223.09885762199852;
    dk = dk - dk;
    double ld2 = 877.1986300345889;
    boolean lb3 = true;
    ok.m1();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    boolean lb4 = false;
    Thought lo5 = Thought25.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 307.7822013148811;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = dk > dk;
    bk = bk || bk;
</cutPoint1354>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1355>
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
</cutPoint1355>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1356>
    dk = dk + dk;
    dk = dk + dk;
    bk = dk > dk;
    on += dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    boolean lb0 = false;
    Thought lo1 = Thought86.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    ok.m2(bk, bk, bk, bk);
</cutPoint1356>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1357>
    on += dk;
    dk = dk - dk;
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 588.1807470629354;
    bk = !bk;
    boolean lb2 = true;
    bk = !bk;
    double ld3 = 12.422483292486394;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb4 = false;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        ok.m3();
        boolean lb5 = true;
        boolean lb6 = true;
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint1357>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1358>
    bk = dk > dk;
    bk = !bk;
    Thought lo0 = Thought29.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk < dk;
    on += dk;
    dk = dk + dk;
    bk = dk < dk;
</cutPoint1358>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1359>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    dk = dk + dk;
    bk = bk && bk;
    boolean lb0 = false;
    double ld1 = 667.2944592417767;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = dk > dk;
</cutPoint1359>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1360>
    on -= dk;
    Thought lo0 = Thought58.getInstance();
    double ld1 = 264.49350472362715;
    dk *= -1;
        bk = !bk;
    dk *= -1;
    double ld2 = 870.2774055800605;
    ok.m3(dk, dk, dk, dk);
    boolean lb3 = true;
    bk = dk > dk;
    dk = dk - dk;
    boolean lb4 = true;
    double ld5 = 323.04266367414186;
</cutPoint1360>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1361>
    Thought lo0 = Thought32.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld1 = 612.9163931616478;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        dk = dk + dk;
</cutPoint1361>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1362>
    ok.m3();
    dk *= -1;
    bk = bk && bk;
    bk = dk > dk;
    dk = dk + dk;
    boolean lb0 = true;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    dk = dk - dk;
        double ld1 = 366.4584913891864;
    bk = dk < dk;
    boolean lb2 = true;
    Thought lo3 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
</cutPoint1362>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1363>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = true;
    dk = dk - dk;
    bk = bk || bk;
    bk = !bk;
        Thought lo2 = Thought74.getInstance(ok, ok, ok, ok);
    double ld3 = 666.4945343980776;
    dk *= -1;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 485.99515121449167;
    ok = ok.m4();
</cutPoint1363>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1364>
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought3.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    boolean lb2 = true;
    Thought lo3 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = dk > dk;
    Thought lo4 = Thought87.getInstance(ok, ok, ok, ok);
    boolean lb5 = false;
    boolean lb6 = false;
    dk = dk - dk;
    Thought lo7 = Thought89.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    ok = ok.m4();
    bk = bk && bk;
    on += dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    dk = dk - dk;
    boolean lb8 = true;
    Thought lo9 = Thought92.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1364>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought39 extends Thought{
private static ArrayList<Thought39> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 992.7586317903381;
private double fd1 = 721.0635316579834;
private Thought fo0 = null;
private Thought fo1 = null;
Thought39 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought39 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought39 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought39 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought39 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought39 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought39 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought39 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought39 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought39 instance = new Thought39 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought39 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought39 instance = new Thought39 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought39 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought39 instance = new Thought39 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought39 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought39 instance = new Thought39 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought39 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought39 instance = new Thought39 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought39 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought39 instance = new Thought39 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought39 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought39 instance = new Thought39 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought39 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought39 instance = new Thought39 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1365>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = !bk;
    bk = dk < dk;
    Thought lo0 = Thought66.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    double ld1 = 224.9150522960324;
    Thought lo2 = Thought47.getInstance(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought55.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint1365>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1366>
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk *= -1;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    Thought lo1 = Thought87.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
</cutPoint1366>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1367>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    on -= dk;
    boolean lb0 = false;
    boolean lb1 = false;
</cutPoint1367>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1368>
    bk = dk < dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    dk = dk - dk;
    dk *= -1;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4();
    Thought lo0 = Thought93.getInstance(dk, dk, dk, dk);
    boolean lb1 = true;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint1368>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1369>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 725.0653997609741;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = false;
    bk = !bk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb2 = false;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3();
    bk = !bk;
    bk = !bk;
    bk = bk || bk;
    dk = dk - dk;
    Thought lo3 = Thought71.getInstance(dk, dk, dk, dk);
    Thought lo4 = Thought2.getInstance(bk, bk, bk, bk);
    boolean lb5 = true;
    if (bk) {
        dk = dk + dk;
        bk = bk && bk;
        bk = dk < dk;
        dk *= -1;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1369>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1370>
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo0 = Thought89.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m3();
    dk = dk + dk;
    on += dk;
    bk = dk < dk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    ok.m1(bk, bk, bk, bk);
</cutPoint1370>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1371>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought31.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    double ld4 = 812.0341154374591;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
    Thought lo5 = Thought56.getInstance(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb6 = true;
    dk *= -1;
    bk = dk < dk;
    boolean lb7 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb8 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    on += dk;
    dk = dk - dk;
    bk = bk || bk;
</cutPoint1371>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1372>
    Thought lo0 = Thought53.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    for(int j=0; j<10; j++){
        bk = !bk;
        Thought lo1 = Thought91.getInstance();
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        double ld2 = 422.9648948491883;
        dk = dk + dk;
        bk = dk > dk;
        ok = ok.m4(bk, bk, bk, bk);
        dk *= -1;
</cutPoint1372>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1373>
    dk *= -1;
    bk = !bk;
    dk *= -1;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought59.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = !bk;
    if (bk) {
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        boolean lb1 = false;
        boolean lb2 = false;
        boolean lb3 = true;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = true;
</cutPoint1373>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1374>
    bk = bk && bk;
    dk = dk - dk;
    bk = dk < dk;
    double ld0 = 140.4813329782291;
    double ld1 = 409.36660427153964;
    dk = dk - dk;
        bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        Thought lo2 = Thought98.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint1374>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1375>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 114.63811681458755;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld1 = 279.9173755361606;
    boolean lb2 = false;
    dk = dk + dk;
    if (bk) {
        ok = ok.m4();
        Thought lo3 = Thought59.getInstance(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint1375>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1376>
    bk = dk > dk;
    boolean lb0 = true;
    bk = !bk;
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    Thought lo1 = Thought71.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld2 = 553.2635910284678;
</cutPoint1376>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1377>
    dk = ok.m3();
    for(int j=0; j<10; j++){
        dk = dk - dk;
        bk = ok.m2(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb0 = false;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 967.4175779289623;
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok);
        dk = dk + dk;
        bk = bk && bk;
        Thought lo2 = Thought54.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3();
        boolean lb3 = false;
</cutPoint1377>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1378>
    on += dk;
    boolean lb0 = true;
    bk = dk > dk;
    bk = !bk;
    boolean lb1 = false;
    Thought lo2 = Thought26.getInstance(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo3 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk && bk;
    dk *= -1;
    Thought lo4 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
</cutPoint1378>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1379>
    bk = bk || bk;
    bk = !bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1();
    bk = dk < dk;
    double ld0 = 871.2578455213464;
        ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    Thought lo2 = Thought74.getInstance(ok, ok, ok, ok);
    Thought lo3 = Thought70.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    Thought lo4 = Thought68.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb5 = true;
</cutPoint1379>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1380>
    double ld0 = 842.5899641699955;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    for(int j=0; j<10; j++){
        Thought lo2 = Thought30.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = false;
        ok = ok.m4();
        dk *= -1;
        Thought lo4 = Thought75.getInstance(dk, dk, dk, dk);
        boolean lb5 = true;
        ok.m3(bk, bk, bk, bk);
        bk = !bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        Thought lo6 = Thought22.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok);
        bk = bk || bk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk = dk + dk;
        bk = ok.m2();
        bk = dk > dk;
</cutPoint1380>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1381>
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo0 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk - dk;
    bk = bk && bk;
    double ld2 = 431.3066982105884;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought9.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    boolean lb5 = false;
</cutPoint1381>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1382>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo1 = Thought70.getInstance(ok, ok, ok, ok);
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 565.943094943944;
    ok.m1();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb4 = false;
    dk = dk - dk;
    double ld5 = 644.1933065218999;
</cutPoint1382>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1383>
    if (bk) {
        bk = !bk;
        Thought lo0 = Thought15.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought56.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld2 = 487.2269883868969;
        ok = ok.m4(ok, ok, ok, ok);
        double ld3 = 709.9827703350891;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk = dk + dk;
        bk = ok.m2();
        ok = ok.m4(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        dk *= -1;
        bk = dk > dk;
        for(int j=0; j<10; j++){
            bk = !bk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb4 = true;
            bk = !bk;
            double ld5 = 397.9455967604904;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            Thought lo6 = Thought37.getInstance(ok, ok, ok, ok);
</cutPoint1383>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1384>
    bk = !bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    Thought lo0 = Thought56.getInstance(dk, dk, dk, dk);
    boolean lb1 = false;
    double ld2 = 52.861604932587845;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld3 = 616.2981447775946;
    bk = !bk;
    boolean lb4 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1384>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1385>
    dk = dk - dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    boolean lb0 = true;
    bk = bk || bk;
    bk = dk < dk;
    bk = bk && bk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk);
    bk = dk < dk;
    if (bk) {
        Thought lo1 = Thought82.getInstance(bk, bk, bk, bk);
        boolean lb2 = false;
        bk = bk && bk;
        Thought lo3 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
</cutPoint1385>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1386>
    dk = dk + dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = false;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    double ld2 = 649.0861626708169;
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    boolean lb3 = true;
        Thought lo4 = Thought77.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld5 = 700.5263616018386;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        Thought lo6 = Thought99.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
</cutPoint1386>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1387>
    bk = bk && bk;
    boolean lb0 = true;
    bk = dk > dk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought18.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    on += dk;
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
</cutPoint1387>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1388>
    dk = dk + dk;
    dk *= -1;
    dk *= -1;
    boolean lb0 = true;
    bk = bk || bk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    Thought lo2 = Thought62.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk < dk;
    Thought lo3 = Thought0.getInstance(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought56.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk + dk;
    bk = dk < dk;
</cutPoint1388>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1389>
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
        ok = ok.m4();
    dk = dk - dk;
    double ld0 = 533.3686535274053;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 220.44037649243015;
</cutPoint1389>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1390>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    dk = dk - dk;
    Thought lo0 = Thought19.getInstance(dk, dk, dk, dk);
    Thought lo1 = Thought3.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint1390>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1391>
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk < dk;
    double ld0 = 510.729750075613;
    on -= dk;
    dk *= -1;
    double ld1 = 186.58775080842432;
    if (bk) {
        bk = !bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        boolean lb2 = true;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1391>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1392>
    bk = dk > dk;
    bk = !bk;
    dk *= -1;
    if (bk) {
        ok = ok.m4();
        bk = dk > dk;
        boolean lb0 = true;
        boolean lb1 = false;
        dk *= -1;
        boolean lb2 = false;
        bk = !bk;
        on += dk;
        bk = !bk;
        Thought lo3 = Thought19.getInstance(dk, dk, dk, dk);
</cutPoint1392>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1393>
    bk = !bk;
    boolean lb0 = false;
        double ld1 = 919.8259304262966;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint1393>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1394>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought75.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    Thought lo1 = Thought75.getInstance(bk, bk, bk, bk);
    boolean lb2 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
        on -= dk;
    on += dk;
    bk = bk && bk;
    bk = bk && bk;
    Thought lo4 = Thought25.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 253.27938557492087;
    for(int j=0; j<10; j++){
        dk *= -1;
        ok = ok.m4();
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1394>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1395>
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought13.getInstance();
    Thought lo1 = Thought6.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    ok.m1(bk, bk, bk, bk);
    double ld2 = 171.59034180685296;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo4 = Thought40.getInstance(ok, ok, ok, ok);
    on += dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint1395>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1396>
    double ld0 = 936.1569591030512;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    on -= dk;
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought83.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo4 = Thought92.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
        dk = ok.m3(bk, bk, bk, bk);
    </cutPoint1396>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1397>
    dk = dk + dk;
    double ld0 = 858.1979747424875;
    Thought lo1 = Thought8.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 886.5395983961886;
    dk = dk + dk;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    dk *= -1;
</cutPoint1397>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1398>
    Thought lo0 = Thought85.getInstance(ok, ok, ok, ok);
    on += dk;
    bk = !bk;
    double ld1 = 624.9200752683681;
    double ld2 = 61.061313284017515;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld3 = 684.4388872890734;
    dk = dk - dk;
</cutPoint1398>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1399>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    Thought lo2 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
        bk = dk > dk;
    Thought lo3 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint1399>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought40 extends Thought{
private static ArrayList<Thought40> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 990.0411611531508;
private double fd1 = 712.9158998488402;
private Thought fo0 = null;
private Thought fo1 = null;
Thought40 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought40 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought40 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought40 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought40 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought40 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought40 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought40 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought40 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought40 instance = new Thought40 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought40 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought40 instance = new Thought40 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought40 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought40 instance = new Thought40 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought40 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought40 instance = new Thought40 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought40 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought40 instance = new Thought40 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought40 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought40 instance = new Thought40 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought40 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought40 instance = new Thought40 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought40 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought40 instance = new Thought40 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1400>
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    double ld0 = 416.2325923452279;
    ok.m1(ok, ok, ok, ok);
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = dk > dk;
    bk = dk > dk;
    double ld3 = 48.929792947482646;
    dk = dk - dk;
    ok = ok.m4();
    if (bk) {
</cutPoint1400>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1401>
    bk = bk || bk;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought60.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    bk = dk > dk;
</cutPoint1401>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1402>
    if (bk) {
        dk = ok.m3();
        Thought lo0 = Thought99.getInstance(dk, dk, dk, dk);
        Thought lo1 = Thought72.getInstance(bk, bk, bk, bk);
        double ld2 = 933.6295606714726;
        dk *= -1;
        bk = !bk;
        dk *= -1;
        boolean lb3 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        bk = !bk;
        bk = dk > dk;
        Thought lo4 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        boolean lb5 = true;
        bk = bk && bk;
        bk = !bk;
        if (bk) {
            Thought lo6 = Thought94.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk || bk;
            boolean lb7 = true;
            bk = dk > dk;
            bk = bk && bk;
            bk = ok.m2(ok, ok, ok, ok);
            dk *= -1;
</cutPoint1402>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1403>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 313.3020167591711;
    ok.m3();
    bk = dk > dk;
    bk = dk > dk;
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = bk || bk;
    Thought lo1 = Thought84.getInstance();
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk);
    boolean lb2 = false;
    double ld3 = 35.12406537591521;
    bk = ok.m2(bk, bk, bk, bk);
    </cutPoint1403>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1404>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo0 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    dk *= -1;
        bk = bk || bk;
    dk = dk - dk;
    on += dk;
    bk = !bk;
    bk = bk && bk;
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    boolean lb1 = true;
    double ld2 = 98.11565209459958;
    on -= dk;
    double ld3 = 95.62953406559201;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1404>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1405>
    dk = dk + dk;
    bk = ok.m2();
    dk = dk - dk;
    dk = dk + dk;
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought64.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk + dk;
    dk = dk + dk;
        Thought lo2 = Thought87.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    boolean lb3 = true;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = bk && bk;
    on += dk;
    ok = ok.m4();
    boolean lb5 = false;
</cutPoint1405>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1406>
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 934.2156251347462;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 221.79476507936428;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    on += dk;
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    for(int j=0; j<10; j++){
        ok.m1();
        Thought lo3 = Thought9.getInstance(dk, dk, dk, dk);
        on -= dk;
        ok.m1(bk, bk, bk, bk);
        Thought lo4 = Thought69.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        boolean lb5 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo6 = Thought21.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb7 = false;
        dk = ok.m3();
        dk = ok.m3(dk, dk, dk, dk);
</cutPoint1406>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1407>
    dk *= -1;
        double ld0 = 45.608717562921065;
    boolean lb1 = false;
    ok.m3(bk, bk, bk, bk);
    on -= dk;
    on -= dk;
    boolean lb2 = false;
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 485.72030414843323;
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1407>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1408>
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    double ld1 = 962.4160117688913;
    bk = bk || bk;
    boolean lb2 = false;
    bk = bk && bk;
    dk = dk + dk;
</cutPoint1408>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1409>
    Thought lo0 = Thought27.getInstance();
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    boolean lb1 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    on -= dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1409>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1410>
    Thought lo0 = Thought67.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 148.21477881907072;
    on += dk;
    dk *= -1;
    boolean lb2 = false;
    dk *= -1;
    boolean lb3 = false;
    ok = ok.m4();
        dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb4 = true;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint1410>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1411>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = true;
    dk = dk + dk;
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3();
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint1411>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1412>
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    Thought lo0 = Thought92.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo1 = Thought57.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    Thought lo2 = Thought84.getInstance();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb3 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint1412>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1413>
    dk = dk + dk;
    bk = dk < dk;
    on -= dk;
    bk = dk < dk;
    bk = bk && bk;
    if (bk) {
        bk = dk > dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld0 = 427.58067245801413;
        ok.m2(ok, ok, ok, ok);
        bk = dk > dk;
        on += dk;
</cutPoint1413>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1414>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    boolean lb0 = false;
    double ld1 = 650.1680665428789;
    boolean lb2 = true;
    Thought lo3 = Thought86.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    boolean lb4 = false;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb5 = true;
    boolean lb6 = true;
    boolean lb7 = true;
    Thought lo8 = Thought99.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1414>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1415>
    on += dk;
    dk = dk - dk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        dk = dk + dk;
        dk *= -1;
        if (bk) {
            Thought lo0 = Thought77.getInstance();
            dk = ok.m3(dk, dk, dk, dk);
            dk = ok.m3(bk, bk, bk, bk);
            ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            Thought lo1 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = dk + dk;
            ok = ok.m4(ok, ok, ok, ok);
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4();
</cutPoint1415>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1416>
    dk = dk + dk;
    bk = bk || bk;
    boolean lb0 = false;
    ok.m2(dk, dk, dk, dk);
    Thought lo1 = Thought96.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    on -= dk;
    bk = !bk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 523.1232137892908;
    bk = bk || bk;
    boolean lb3 = false;
</cutPoint1416>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1417>
    if (bk) {
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld0 = 115.47087834083099;
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        bk = !bk;
        bk = bk || bk;
        dk = dk + dk;
        double ld1 = 854.7710614502051;
        boolean lb2 = true;
        boolean lb3 = true;
        ok = ok.m4();
        bk = bk && bk;
        ok.m2(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint1417>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1418>
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    ok.m1(ok, ok, ok, ok);
    dk *= -1;
    boolean lb1 = true;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    on -= dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
</cutPoint1418>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1419>
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 968.2093437267603;
    boolean lb1 = false;
    bk = dk > dk;
    dk = dk + dk;
    on += dk;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    Thought lo3 = Thought73.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = true;
    bk = bk || bk;
    bk = ok.m2();
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1419>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1420>
    dk = dk - dk;
    Thought lo0 = Thought96.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb1 = false;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    on -= dk;
    bk = !bk;
    Thought lo2 = Thought39.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
    dk = dk + dk;
    double ld3 = 197.4601587283842;
    bk = !bk;
    dk *= -1;
    bk = !bk;
    bk = !bk;
    dk = dk - dk;
    bk = bk || bk;
    dk = dk + dk;
    dk = dk - dk;
    bk = bk || bk;
    bk = ok.m2();
    Thought lo4 = Thought61.getInstance(dk, dk, dk, dk);
</cutPoint1420>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1421>
    dk = dk - dk;
    dk = dk + dk;
    boolean lb0 = true;
    bk = bk && bk;
    boolean lb1 = true;
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    if (bk) {
        } else {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        on -= dk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        double ld2 = 974.02426552949;
</cutPoint1421>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1422>
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    Thought lo0 = Thought94.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = false;
    bk = bk && bk;
    boolean lb2 = false;
    bk = bk && bk;
    on -= dk;
    boolean lb3 = true;
    dk = dk + dk;
    on -= dk;
</cutPoint1422>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1423>
    ok = ok.m4();
    boolean lb0 = false;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb1 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought98.getInstance();
        boolean lb3 = true;
        boolean lb4 = true;
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        ok.m2(bk, bk, bk, bk);
        bk = !bk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1423>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1424>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = dk < dk;
    bk = dk > dk;
    on += dk;
    double ld0 = 473.67550036092393;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1424>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1425>
    bk = dk < dk;
    double ld0 = 598.2609235860524;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = bk || bk;
    Thought lo2 = Thought15.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb3 = true;
    boolean lb4 = false;
    double ld5 = 616.5368923806935;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo6 = Thought73.getInstance(ok, ok, ok, ok);
</cutPoint1425>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1426>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo0 = Thought91.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk - dk;
    bk = !bk;
    dk *= -1;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo1 = Thought93.getInstance(ok, ok, ok, ok);
    if (bk) {
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1426>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1427>
    bk = bk || bk;
    dk = dk - dk;
    if (bk) {
        bk = bk && bk;
        } else {
        bk = bk && bk;
        boolean lb0 = true;
        dk *= -1;
        dk = dk + dk;
        boolean lb1 = true;
        bk = bk && bk;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk > dk;
        bk = dk > dk;
        boolean lb2 = true;
        dk = ok.m3(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        dk = dk + dk;
        dk = dk - dk;
        bk = dk < dk;
        boolean lb3 = false;
        boolean lb4 = false;
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint1427>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1428>
    bk = dk < dk;
    Thought lo0 = Thought73.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 826.627240870116;
    ok = ok.m4();
        Thought lo3 = Thought55.getInstance(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo4 = Thought59.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1428>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1429>
    double ld0 = 217.68392218799556;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    on -= dk;
    bk = dk < dk;
    on -= dk;
    boolean lb1 = true;
</cutPoint1429>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1430>
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    boolean lb2 = false;
    boolean lb3 = false;
    boolean lb4 = true;
    bk = dk < dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    bk = bk || bk;
</cutPoint1430>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1431>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought80.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    on -= dk;
    boolean lb2 = true;
    boolean lb3 = false;
        dk = dk + dk;
    boolean lb4 = false;
    boolean lb5 = false;
    bk = !bk;
    Thought lo6 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo7 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb8 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
</cutPoint1431>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1432>
    boolean lb0 = false;
    Thought lo1 = Thought48.getInstance();
    dk = dk + dk;
    bk = bk || bk;
    on += dk;
        ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    boolean lb2 = false;
    Thought lo3 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    dk *= -1;
</cutPoint1432>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1433>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    on -= dk;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
        dk *= -1;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = bk || bk;
        boolean lb0 = true;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 794.5583213606205;
    double ld2 = 434.63090879588896;
    dk = dk + dk;
</cutPoint1433>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1434>
    dk = dk - dk;
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    dk = dk + dk;
    boolean lb0 = true;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought21.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought93.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = true;
</cutPoint1434>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought41 extends Thought{
private static ArrayList<Thought41> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 872.1825591638571;
private double fd1 = 948.8909618733835;
private Thought fo0 = null;
private Thought fo1 = null;
Thought41 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought41 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought41 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought41 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought41 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought41 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought41 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought41 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought41 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought41 instance = new Thought41 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought41 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought41 instance = new Thought41 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought41 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought41 instance = new Thought41 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought41 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought41 instance = new Thought41 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought41 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought41 instance = new Thought41 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought41 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought41 instance = new Thought41 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought41 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought41 instance = new Thought41 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought41 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought41 instance = new Thought41 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1435>
    bk = bk || bk;
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        on -= dk;
        bk = !bk;
        double ld0 = 62.3704755519937;
        bk = !bk;
        double ld1 = 151.17954061788996;
        double ld2 = 46.98476888909432;
        bk = !bk;
        bk = !bk;
        boolean lb3 = true;
        boolean lb4 = true;
        ok.m3(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo5 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4();
        Thought lo6 = Thought88.getInstance(dk, dk, dk, dk);
        boolean lb7 = false;
        double ld8 = 341.979407769102;
        bk = bk && bk;
        dk = dk - dk;
        on -= dk;
        bk = dk < dk;
</cutPoint1435>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1436>
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb0 = false;
        on -= dk;
        bk = dk < dk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld2 = 617.2851471376258;
        for(int j=0; j<10; j++){
            Thought lo3 = Thought39.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok);
            Thought lo4 = Thought31.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
            on -= dk;
            boolean lb5 = true;
</cutPoint1436>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1437>
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4();
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
        dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint1437>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1438>
    dk = dk + dk;
    double ld0 = 884.8275535392478;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    double ld2 = 935.7006558094198;
    for(int j=0; j<10; j++){
        Thought lo3 = Thought36.getInstance(ok, ok, ok, ok);
        bk = dk > dk;
</cutPoint1438>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1439>
    bk = !bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4();
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1439>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1440>
    boolean lb0 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought35.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    ok.m3();
    ok.m1(dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb2 = false;
    dk = dk + dk;
    bk = !bk;
</cutPoint1440>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1441>
        bk = ok.m2(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    double ld0 = 846.0829188714108;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4();
    dk *= -1;
    Thought lo1 = Thought49.getInstance(dk, dk, dk, dk);
    double ld2 = 47.73989992495694;
    dk *= -1;
    bk = bk || bk;
</cutPoint1441>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1442>
    double ld0 = 444.59755768927573;
    Thought lo1 = Thought24.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 987.6863207681624;
    ok.m3(ok, ok, ok, ok);
    Thought lo3 = Thought82.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    bk = bk || bk;
    bk = dk < dk;
    bk = bk && bk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
</cutPoint1442>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1443>
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 829.3620926648119;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    Thought lo4 = Thought0.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint1443>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1444>
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb0 = false;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    Thought lo1 = Thought11.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
</cutPoint1444>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1445>
    boolean lb0 = false;
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
    double ld1 = 33.25541454234601;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    if (bk) {
        on -= dk;
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld3 = 663.4509126207593;
        } else if (bk) {
</cutPoint1445>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1446>
    dk = dk + dk;
    on += dk;
    Thought lo0 = Thought76.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk > dk;
    bk = dk > dk;
    if (bk) {
        Thought lo3 = Thought10.getInstance(ok, ok, ok, ok);
        boolean lb4 = false;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = !bk;
</cutPoint1446>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1447>
    bk = dk < dk;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb0 = false;
    bk = ok.m2(bk, bk, bk, bk);
    double ld1 = 660.7077922351872;
    bk = dk < dk;
    bk = dk < dk;
        dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    Thought lo3 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    on -= dk;
    boolean lb4 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
</cutPoint1447>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1448>
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = true;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1();
    on += dk;
    dk *= -1;
    bk = dk > dk;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    double ld1 = 296.00192924744505;
    ok = ok.m4(bk, bk, bk, bk);
    double ld2 = 231.47981811098302;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1448>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1449>
    Thought lo0 = Thought51.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought92.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = !bk;
    dk = dk - dk;
    dk *= -1;
    boolean lb3 = true;
    double ld4 = 612.1333197722621;
    boolean lb5 = false;
    ok.m3();
        double ld6 = 318.97721150064257;
    bk = dk < dk;
    boolean lb7 = false;
</cutPoint1449>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1450>
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb0 = false;
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk = dk - dk;
    double ld1 = 777.5842524058569;
    dk *= -1;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
</cutPoint1450>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1451>
    bk = dk > dk;
    dk = dk + dk;
    on += dk;
    on += dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo0 = Thought65.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought37.getInstance();
    bk = bk && bk;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
</cutPoint1451>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1452>
    Thought lo0 = Thought67.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = bk && bk;
    bk = bk || bk;
    dk *= -1;
    bk = dk > dk;
    boolean lb2 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo3 = Thought48.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 681.928037880618;
    dk = ok.m3();
    double ld5 = 147.19469944883042;
    boolean lb6 = true;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    if (bk) {
        Thought lo7 = Thought51.getInstance(bk, bk, bk, bk);
        double ld8 = 342.7216392445522;
</cutPoint1452>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1453>
    bk = !bk;
        dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    double ld0 = 554.2676214383347;
    bk = !bk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    boolean lb1 = true;
    dk *= -1;
    bk = dk < dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    boolean lb2 = false;
</cutPoint1453>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1454>
    Thought lo0 = Thought29.getInstance(ok, ok, ok, ok);
    if (bk) {
        boolean lb1 = false;
        Thought lo2 = Thought58.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        boolean lb3 = false;
        dk *= -1;
        dk = dk - dk;
        dk = dk + dk;
        boolean lb4 = false;
        dk = dk + dk;
        bk = dk > dk;
        bk = dk < dk;
        Thought lo5 = Thought92.getInstance();
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo6 = Thought32.getInstance(bk, bk, bk, bk);
        dk *= -1;
        bk = !bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        dk = dk + dk;
        boolean lb7 = false;
        bk = dk < dk;
</cutPoint1454>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1455>
    bk = bk && bk;
    boolean lb0 = true;
    bk = dk > dk;
    dk = dk - dk;
    bk = dk < dk;
    bk = bk || bk;
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    bk = dk < dk;
</cutPoint1455>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1456>
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    if (bk) {
        on += dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        on += dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought93.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok);
        boolean lb3 = false;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk = dk - dk;
        ok = ok.m4();
</cutPoint1456>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1457>
        Thought lo0 = Thought60.getInstance(dk, dk, dk, dk);
    double ld1 = 724.8006026598435;
    dk = ok.m3(bk, bk, bk, bk);
    double ld2 = 196.5083409003975;
    Thought lo3 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
    boolean lb4 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb5 = true;
</cutPoint1457>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1458>
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    bk = ok.m2();
    dk = dk + dk;
    boolean lb0 = true;
    on += dk;
    Thought lo1 = Thought5.getInstance(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = dk > dk;
        on += dk;
    double ld2 = 320.67283350196834;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1458>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1459>
    dk = dk + dk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
        bk = dk > dk;
    boolean lb0 = false;
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
    dk *= -1;
    dk *= -1;
    Thought lo3 = Thought65.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    double ld4 = 564.355031170555;
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1459>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1460>
    dk = dk + dk;
        ok = ok.m4();
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk);
    Thought lo0 = Thought65.getInstance(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        Thought lo1 = Thought63.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb2 = false;
        dk *= -1;
        Thought lo3 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb4 = true;
        bk = bk || bk;
        on += dk;
        bk = !bk;
        Thought lo5 = Thought54.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld6 = 217.40345564653174;
        ok.m2(ok, ok, ok, ok);
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld7 = 964.3943703988919;
        dk = ok.m3();
</cutPoint1460>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1461>
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    ok.m3(ok, ok, ok, ok);
    boolean lb1 = false;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    Thought lo2 = Thought25.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
</cutPoint1461>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1462>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    dk = dk - dk;
    boolean lb0 = true;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3();
    ok.m2(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo1 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 248.556556084792;
    bk = dk < dk;
    double ld3 = 24.55665439418095;
    dk *= -1;
</cutPoint1462>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1463>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought12.getInstance();
    ok.m2(dk, dk, dk, dk);
    bk = !bk;
    ok.m3(bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = true;
    bk = bk || bk;
    double ld2 = 457.32357661523685;
    bk = dk > dk;
    boolean lb3 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = false;
    boolean lb5 = true;
    boolean lb6 = true;
    boolean lb7 = true;
    bk = dk < dk;
    bk = bk && bk;
    bk = dk > dk;
    dk = dk - dk;
    double ld8 = 432.9218563487541;
    boolean lb9 = false;
    on -= dk;
</cutPoint1463>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1464>
    boolean lb0 = true;
    on -= dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    on += dk;
    dk = dk - dk;
    dk = dk - dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo1 = Thought0.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    bk = !bk;
    on -= dk;
    bk = bk || bk;
    Thought lo2 = Thought87.getInstance(bk, bk, bk, bk);
</cutPoint1464>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1465>
    double ld0 = 983.2481743951492;
    boolean lb1 = true;
    double ld2 = 970.3057682105297;
    Thought lo3 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    Thought lo5 = Thought81.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld6 = 963.7693127700893;
    bk = !bk;
</cutPoint1465>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1466>
    ok.m1(ok, ok, ok, ok);
    bk = !bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2();
    boolean lb0 = true;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought2.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    double ld2 = 519.0899940946767;
    dk = dk + dk;
</cutPoint1466>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1467>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    boolean lb0 = true;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo1 = Thought37.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought56.getInstance();
    bk = bk || bk;
    bk = dk < dk;
    boolean lb3 = false;
    Thought lo4 = Thought15.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 520.1296392361007;
</cutPoint1467>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1468>
        on -= dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok);
    double ld0 = 904.9455128121228;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
</cutPoint1468>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1469>
    ok = ok.m4();
    bk = !bk;
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb1 = true;
    on -= dk;
    on += dk;
    ok.m3(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld2 = 794.9133174080629;
    boolean lb3 = true;
    ok = ok.m4();
</cutPoint1469>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought42 extends Thought{
private static ArrayList<Thought42> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 610.7647437154992;
private double fd1 = 749.2496064184223;
private Thought fo0 = null;
private Thought fo1 = null;
Thought42 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought42 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought42 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought42 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought42 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought42 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought42 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought42 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought42 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought42 instance = new Thought42 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought42 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought42 instance = new Thought42 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought42 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought42 instance = new Thought42 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought42 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought42 instance = new Thought42 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought42 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought42 instance = new Thought42 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought42 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought42 instance = new Thought42 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought42 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought42 instance = new Thought42 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought42 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought42 instance = new Thought42 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1470>
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought49.getInstance(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
        bk = dk > dk;
        dk = dk + dk;
    boolean lb1 = false;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint1470>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1471>
    bk = bk && bk;
    ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = !bk;
</cutPoint1471>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1472>
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo0 = Thought48.getInstance(dk, dk, dk, dk);
    Thought lo1 = Thought72.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    double ld2 = 168.24374273410228;
    on += dk;
    dk *= -1;
    dk = dk - dk;
    bk = dk < dk;
    double ld3 = 39.40562693554768;
    boolean lb4 = false;
    boolean lb5 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    Thought lo6 = Thought55.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb7 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1472>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1473>
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld0 = 353.6934570317671;
    ok.m1();
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb1 = true;
    boolean lb2 = true;
    on -= dk;
    on += dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
</cutPoint1473>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1474>
        bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought27.getInstance();
    dk *= -1;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    Thought lo1 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1474>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1475>
    dk = dk + dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 411.4588239977731;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    ok = ok.m4();
</cutPoint1475>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1476>
    bk = bk || bk;
    double ld0 = 369.6274970928603;
    bk = bk || bk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    double ld1 = 846.7922974675392;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    double ld2 = 790.6052671677602;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    boolean lb3 = false;
    double ld4 = 325.74827132644083;
    bk = dk < dk;
    boolean lb5 = false;
    Thought lo6 = Thought14.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo7 = Thought50.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo8 = Thought34.getInstance();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint1476>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1477>
    on += dk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought85.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 762.8677541367649;
    bk = dk < dk;
    bk = dk < dk;
    bk = bk && bk;
    double ld2 = 859.4736618890691;
    Thought lo3 = Thought93.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1477>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1478>
    double ld0 = 186.08499170371192;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = bk && bk;
    boolean lb3 = false;
    boolean lb4 = false;
    boolean lb5 = false;
    ok.m1();
    bk = bk && bk;
    Thought lo6 = Thought27.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
</cutPoint1478>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1479>
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
    Thought lo0 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    double ld1 = 981.2840785574916;
    bk = dk < dk;
    on += dk;
    boolean lb2 = false;
    dk = dk - dk;
    Thought lo3 = Thought7.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo4 = Thought14.getInstance();
    dk = dk - dk;
    bk = bk || bk;
</cutPoint1479>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1480>
    Thought lo0 = Thought23.getInstance(dk, dk, dk, dk);
    double ld1 = 301.1095141353619;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb2 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb3 = false;
    double ld4 = 919.5484772242434;
    ok.m1();
    dk = dk + dk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    Thought lo5 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = bk && bk;
</cutPoint1480>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1481>
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    on -= dk;
    double ld0 = 811.8140267554597;
    bk = !bk;
    on += dk;
        dk = ok.m3();
    boolean lb1 = true;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        double ld2 = 330.6312411760883;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1481>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1482>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought8.getInstance(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 651.6511797114472;
    dk *= -1;
    Thought lo2 = Thought34.getInstance(bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    bk = dk > dk;
    on -= dk;
    dk = dk + dk;
    Thought lo3 = Thought25.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk - dk;
    if (bk) {
        bk = !bk;
        boolean lb4 = true;
        boolean lb5 = true;
</cutPoint1482>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1483>
    double ld0 = 330.49648777451677;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought89.getInstance();
    on += dk;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        boolean lb2 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo4 = Thought62.getInstance(ok, ok, ok, ok);
        on += dk;
</cutPoint1483>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1484>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok.m3();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    double ld1 = 563.1717662455609;
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    double ld2 = 676.0765392493323;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld3 = 420.44026451581027;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    dk = dk - dk;
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb4 = false;
    double ld5 = 318.8394025489336;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1484>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1485>
        on += dk;
    on -= dk;
    bk = bk && bk;
    boolean lb0 = true;
    ok.m2();
    bk = bk && bk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
    on -= dk;
    dk *= -1;
</cutPoint1485>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1486>
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought77.getInstance(bk, bk, bk, bk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    Thought lo1 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    boolean lb2 = false;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb3 = false;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = bk || bk;
        ok.m1();
        bk = dk < dk;
        dk = dk - dk;
</cutPoint1486>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1487>
    dk = dk + dk;
    dk = dk + dk;
    boolean lb0 = false;
    boolean lb1 = false;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    boolean lb3 = false;
    bk = dk < dk;
    bk = bk || bk;
    on += dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    double ld4 = 701.2402295464286;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
    if (bk) {
        ok.m1(dk, dk, dk, dk);
</cutPoint1487>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1488>
    bk = dk > dk;
    double ld0 = 411.3531591735979;
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    boolean lb1 = true;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld2 = 816.601879358209;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1488>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1489>
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    double ld0 = 815.3469627762189;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought77.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb2 = true;
    bk = dk > dk;
    dk *= -1;
    bk = dk < dk;
        boolean lb3 = true;
    bk = dk < dk;
    double ld4 = 52.33861511738211;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint1489>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1490>
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    on -= dk;
    ok = ok.m4();
    bk = bk && bk;
    dk *= -1;
    double ld0 = 544.9213710633139;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = true;
</cutPoint1490>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1491>
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 377.9981507379514;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 452.41898871219047;
    dk = ok.m3(ok, ok, ok, ok);
    double ld2 = 810.8135984847193;
    boolean lb3 = true;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
</cutPoint1491>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1492>
    bk = bk && bk;
    bk = dk < dk;
    bk = bk || bk;
    boolean lb0 = true;
    bk = !bk;
    boolean lb1 = true;
    dk = dk + dk;
    bk = dk < dk;
    dk = ok.m3();
    bk = !bk;
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    Thought lo2 = Thought16.getInstance(bk, bk, bk, bk);
    bk = !bk;
    boolean lb3 = true;
    Thought lo4 = Thought97.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld5 = 123.36407608204921;
    boolean lb6 = false;
    if (bk) {
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        double ld7 = 307.3787616180644;
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        double ld8 = 834.1328209536288;
</cutPoint1492>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1493>
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    bk = !bk;
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
</cutPoint1493>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1494>
    dk *= -1;
    Thought lo0 = Thought91.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    if (bk) {
        ok.m1(ok, ok, ok, ok);
</cutPoint1494>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1495>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
</cutPoint1495>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1496>
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought44.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = dk + dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk + dk;
    boolean lb2 = false;
    if (bk) {
</cutPoint1496>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1497>
    bk = bk || bk;
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4();
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 253.9658081061368;
    Thought lo1 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = !bk;
        bk = !bk;
    boolean lb2 = false;
    on += dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought20.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo4 = Thought85.getInstance(ok, ok, ok, ok);
    Thought lo5 = Thought62.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo6 = Thought46.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = !bk;
</cutPoint1497>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1498>
    Thought lo0 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought30.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    boolean lb2 = false;
    bk = bk && bk;
        on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 392.055670237606;
    bk = !bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld4 = 544.8254609635674;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
        dk *= -1;
    dk *= -1;
    bk = !bk;
</cutPoint1498>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1499>
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
    boolean lb0 = false;
    bk = !bk;
    dk = dk - dk;
    bk = bk && bk;
    bk = bk && bk;
    boolean lb1 = false;
    bk = bk || bk;
    bk = dk > dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint1499>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1500>
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 88.87451280655132;
    Thought lo1 = Thought97.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    double ld2 = 869.8289066060217;
    dk *= -1;
    Thought lo3 = Thought56.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        for(int j=0; j<10; j++){
            double ld4 = 323.64519579477417;
            ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
            Thought lo5 = Thought94.getInstance();
            bk = bk || bk;
</cutPoint1500>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1501>
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought74.getInstance(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = dk < dk;
    dk = dk - dk;
    boolean lb1 = true;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought84.getInstance();
    on += dk;
    bk = bk || bk;
    bk = !bk;
    dk = dk + dk;
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    boolean lb3 = false;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo4 = Thought90.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1501>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1502>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo0 = Thought81.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    Thought lo1 = Thought38.getInstance(bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 345.8466077310051;
    dk = dk + dk;
    boolean lb3 = true;
</cutPoint1502>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1503>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought20.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = false;
    bk = dk > dk;
    bk = ok.m2();
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
</cutPoint1503>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1504>
    double ld0 = 376.21063296546475;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 500.39041662955196;
    Thought lo2 = Thought92.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 289.2229718466328;
</cutPoint1504>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought43 extends Thought{
private static ArrayList<Thought43> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 835.0912454443652;
private double fd1 = 787.5077740417615;
private Thought fo0 = null;
private Thought fo1 = null;
Thought43 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought43 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought43 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought43 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought43 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought43 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought43 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought43 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought43 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought43 instance = new Thought43 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought43 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought43 instance = new Thought43 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought43 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought43 instance = new Thought43 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought43 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought43 instance = new Thought43 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought43 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought43 instance = new Thought43 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought43 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought43 instance = new Thought43 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought43 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought43 instance = new Thought43 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought43 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought43 instance = new Thought43 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1505>
    bk = dk > dk;
    on -= dk;
    boolean lb0 = true;
    Thought lo1 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk *= -1;
    dk = dk + dk;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    boolean lb4 = true;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    Thought lo5 = Thought64.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    Thought lo6 = Thought47.getInstance();
    ok.m2(dk, dk, dk, dk);
    on += dk;
    bk = dk < dk;
    Thought lo7 = Thought57.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    double ld8 = 749.8419784633176;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb9 = true;
</cutPoint1505>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1506>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk || bk;
    bk = bk && bk;
    dk *= -1;
    double ld2 = 259.5914892980865;
    dk = ok.m3(dk, dk, dk, dk);
    double ld3 = 372.1891791686106;
    dk = dk + dk;
    bk = bk || bk;
    ok.m2(bk, bk, bk, bk);
    Thought lo4 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
</cutPoint1506>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1507>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    dk = dk + dk;
    bk = !bk;
    dk = dk - dk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk);
    double ld0 = 562.185712565995;
    Thought lo1 = Thought38.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        bk = !bk;
</cutPoint1507>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1508>
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo0 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    dk = dk + dk;
    bk = bk && bk;
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    bk = bk || bk;
    double ld2 = 590.9434553236584;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        for(int j=0; j<10; j++){
</cutPoint1508>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1509>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 278.6920665490292;
    ok.m1();
    on -= dk;
    boolean lb1 = true;
    ok.m1(dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    on += dk;
    Thought lo2 = Thought47.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 37.189609276048856;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1509>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1510>
    if (bk) {
        boolean lb0 = false;
        dk = dk + dk;
        Thought lo1 = Thought94.getInstance();
        double ld2 = 686.9324127488401;
        bk = dk > dk;
        dk *= -1;
        bk = !bk;
        double ld3 = 107.19246994216647;
        ok.m1(dk, dk, dk, dk);
        bk = !bk;
</cutPoint1510>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1511>
    boolean lb0 = false;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    double ld1 = 754.4769073068604;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 768.0271517355412;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    boolean lb3 = false;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    ok = ok.m4();
    if (bk) {
        bk = dk < dk;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint1511>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1512>
    on -= dk;
    bk = dk < dk;
    bk = dk > dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint1512>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1513>
    bk = dk < dk;
    dk = dk - dk;
    boolean lb0 = false;
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    double ld1 = 722.8528576015191;
    on -= dk;
    for(int j=0; j<10; j++){
        bk = bk || bk;
        ok.m1(dk, dk, dk, dk);
        for(int j=0; j<10; j++){
            ok = ok.m4(bk, bk, bk, bk);
            on -= dk;
            double ld2 = 123.70450191603129;
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
            double ld3 = 539.4501066260163;
            bk = !bk;
            bk = dk < dk;
            dk *= -1;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1513>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1514>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought2.getInstance();
    bk = !bk;
    bk = !bk;
        bk = !bk;
    bk = dk > dk;
    ok.m1(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo1 = Thought39.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    bk = dk < dk;
</cutPoint1514>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1515>
    bk = !bk;
    dk *= -1;
    double ld0 = 956.7383634521393;
    Thought lo1 = Thought4.getInstance(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    double ld2 = 21.590728715201514;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    double ld3 = 189.61020334786255;
    bk = dk < dk;
</cutPoint1515>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1516>
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    boolean lb0 = true;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    dk = dk - dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    double ld1 = 162.82827417304645;
    ok.m2();
    ok.m1(dk, dk, dk, dk);
</cutPoint1516>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1517>
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    double ld0 = 610.1757935678531;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld2 = 264.6588739579905;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    dk *= -1;
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    bk = bk || bk;
    boolean lb3 = true;
    for(int j=0; j<10; j++){
        bk = dk < dk;
        bk = ok.m2(dk, dk, dk, dk);
        bk = dk < dk;
        bk = bk && bk;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1517>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1518>
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3();
    dk = dk + dk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    on += dk;
</cutPoint1518>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1519>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = false;
    boolean lb1 = false;
    boolean lb2 = true;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld3 = 87.61479635265846;
    double ld4 = 123.12101717950438;
    dk *= -1;
    boolean lb5 = false;
    on -= dk;
    Thought lo6 = Thought28.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo7 = Thought9.getInstance();
    Thought lo8 = Thought16.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld9 = 852.2244042809992;
</cutPoint1519>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1520>
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = dk > dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought53.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    if (bk) {
        dk = dk + dk;
        dk = dk + dk;
        bk = bk && bk;
        bk = ok.m2(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        boolean lb1 = false;
        dk = dk - dk;
        boolean lb2 = false;
        dk *= -1;
        double ld3 = 42.08106713554997;
        if (bk) {
            bk = dk < dk;
            bk = !bk;
</cutPoint1520>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1521>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    bk = dk > dk;
    double ld0 = 755.5507017120651;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought14.getInstance(ok, ok, ok, ok);
    double ld2 = 5.187591578030563;
    bk = dk > dk;
    boolean lb3 = true;
    Thought lo4 = Thought29.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    dk *= -1;
    double ld5 = 992.1384564595966;
</cutPoint1521>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1522>
    dk *= -1;
    on -= dk;
    bk = bk && bk;
    Thought lo0 = Thought77.getInstance(bk, bk, bk, bk);
    Thought lo1 = Thought95.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    on += dk;
    dk = dk - dk;
    bk = bk && bk;
    dk = dk - dk;
    on -= dk;
    double ld3 = 832.8086395730819;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    bk = bk || bk;
</cutPoint1522>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1523>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 969.8715729326406;
    double ld1 = 631.1718705078401;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    on -= dk;
    ok.m1(dk, dk, dk, dk);
    dk = dk + dk;
        boolean lb2 = true;
</cutPoint1523>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1524>
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb0 = false;
    double ld1 = 669.5371893318412;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok);
    boolean lb3 = false;
    double ld4 = 9.889023312948888;
    double ld5 = 927.55484365509;
    bk = bk && bk;
    dk = dk - dk;
    bk = bk && bk;
    boolean lb6 = true;
    Thought lo7 = Thought95.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    bk = !bk;
    boolean lb8 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    bk = bk && bk;
</cutPoint1524>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1525>
    boolean lb0 = true;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb1 = false;
    boolean lb2 = true;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk > dk;
    on += dk;
    boolean lb3 = true;
    boolean lb4 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo5 = Thought97.getInstance(ok, ok, ok, ok);
</cutPoint1525>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1526>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    double ld0 = 552.9203601476746;
    Thought lo1 = Thought32.getInstance(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1526>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1527>
    bk = dk > dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    boolean lb0 = true;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought46.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint1527>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1528>
    boolean lb0 = true;
    bk = bk || bk;
    bk = bk || bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    bk = dk > dk;
    dk *= -1;
    bk = dk > dk;
</cutPoint1528>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1529>
    bk = ok.m2();
    bk = dk < dk;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought11.getInstance(bk, bk, bk, bk);
    Thought lo2 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    dk = dk - dk;
    boolean lb3 = true;
    dk *= -1;
    boolean lb4 = false;
    boolean lb5 = true;
    bk = bk && bk;
    double ld6 = 705.4233735124927;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = !bk;
    boolean lb7 = false;
    bk = !bk;
    Thought lo8 = Thought29.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo9 = Thought28.getInstance(dk, dk, dk, dk);
</cutPoint1529>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1530>
    ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    boolean lb0 = false;
    bk = bk && bk;
    boolean lb1 = true;
    Thought lo2 = Thought53.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = dk > dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk = dk - dk;
        bk = bk || bk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk || bk;
        dk *= -1;
</cutPoint1530>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1531>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = true;
    boolean lb1 = false;
    bk = bk || bk;
    Thought lo2 = Thought50.getInstance();
    ok.m3(dk, dk, dk, dk);
    Thought lo3 = Thought80.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    ok.m3(dk, dk, dk, dk);
</cutPoint1531>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1532>
    bk = bk || bk;
    on -= dk;
    boolean lb0 = true;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld1 = 478.48979778166927;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1532>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1533>
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 369.95045155324243;
    double ld1 = 183.31131292001487;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    dk = dk - dk;
    bk = dk > dk;
    bk = !bk;
    bk = dk < dk;
    boolean lb2 = false;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld3 = 500.65109102442756;
    boolean lb4 = false;
</cutPoint1533>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1534>
    boolean lb0 = false;
    bk = bk || bk;
    on += dk;
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = false;
    boolean lb2 = true;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    boolean lb3 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint1534>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1535>
    bk = dk > dk;
    dk = dk + dk;
    boolean lb0 = false;
    ok.m2();
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
    dk *= -1;
    Thought lo1 = Thought47.getInstance(dk, dk, dk, dk);
    boolean lb2 = true;
    Thought lo3 = Thought90.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    double ld4 = 14.772013569408086;
    bk = !bk;
    dk *= -1;
    bk = bk && bk;
    dk *= -1;
    bk = !bk;
    dk *= -1;
    bk = dk < dk;
    bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint1535>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1536>
    boolean lb0 = true;
    dk *= -1;
    bk = bk || bk;
    Thought lo1 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
        bk = !bk;
    dk = dk + dk;
    double ld2 = 107.14817339188248;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    on += dk;
    dk = ok.m3(dk, dk, dk, dk);
    on -= dk;
    Thought lo3 = Thought71.getInstance(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1536>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1537>
    on -= dk;
    bk = dk < dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    Thought lo1 = Thought24.getInstance(ok, ok, ok, ok);
    bk = !bk;
    boolean lb2 = true;
    bk = bk && bk;
    Thought lo3 = Thought92.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    double ld4 = 816.8268727916012;
    dk *= -1;
    dk *= -1;
    dk *= -1;
</cutPoint1537>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1538>
    bk = !bk;
    dk = ok.m3();
    boolean lb0 = false;
    bk = bk && bk;
    boolean lb1 = true;
    bk = dk < dk;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo2 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld3 = 999.4326735478613;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    bk = !bk;
        boolean lb4 = true;
    dk = dk - dk;
    bk = !bk;
</cutPoint1538>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1539>
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
    dk = dk - dk;
    Thought lo1 = Thought58.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo2 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld3 = 614.28039097487;
</cutPoint1539>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought44 extends Thought{
private static ArrayList<Thought44> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 521.5775050729861;
private double fd1 = 7.38977600341222;
private Thought fo0 = null;
private Thought fo1 = null;
Thought44 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought44 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought44 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought44 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought44 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought44 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought44 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought44 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought44 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought44 instance = new Thought44 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought44 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought44 instance = new Thought44 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought44 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought44 instance = new Thought44 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought44 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought44 instance = new Thought44 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought44 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought44 instance = new Thought44 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought44 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought44 instance = new Thought44 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought44 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought44 instance = new Thought44 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought44 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought44 instance = new Thought44 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1540>
    dk *= -1;
        boolean lb0 = true;
    ok = ok.m4();
    Thought lo1 = Thought35.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
    boolean lb2 = true;
    bk = !bk;
    double ld3 = 957.5299640106603;
    dk *= -1;
    bk = !bk;
    on += dk;
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb4 = false;
    dk *= -1;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk - dk;
    bk = !bk;
</cutPoint1540>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1541>
    bk = !bk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought43.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        bk = bk || bk;
        dk = dk - dk;
        ok.m1(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        bk = !bk;
        bk = bk && bk;
        on += dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb2 = true;
</cutPoint1541>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1542>
    double ld0 = 751.157281554127;
    Thought lo1 = Thought12.getInstance(ok, ok, ok, ok);
    Thought lo2 = Thought92.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk);
    Thought lo3 = Thought55.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    on -= dk;
    boolean lb4 = true;
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld5 = 569.3575994378058;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
        boolean lb6 = true;
        dk = dk + dk;
        dk *= -1;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1542>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1543>
    boolean lb0 = false;
    dk = ok.m3();
    bk = !bk;
    double ld1 = 48.527333738360504;
    ok.m1(dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    dk *= -1;
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo3 = Thought97.getInstance(bk, bk, bk, bk);
    boolean lb4 = false;
</cutPoint1543>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1544>
        bk = dk < dk;
    bk = bk && bk;
        dk *= -1;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought13.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = dk < dk;
    Thought lo1 = Thought32.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    bk = bk && bk;
        dk = dk + dk;
</cutPoint1544>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1545>
    dk *= -1;
    boolean lb0 = true;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = true;
    Thought lo2 = Thought87.getInstance();
    dk = dk - dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought79.getInstance(bk, bk, bk, bk);
</cutPoint1545>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1546>
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 657.1677906140868;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought87.getInstance(ok, ok, ok, ok);
    Thought lo2 = Thought10.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
</cutPoint1546>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1547>
    bk = dk > dk;
    dk = dk - dk;
    Thought lo0 = Thought6.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    on += dk;
    dk = dk - dk;
    dk = dk + dk;
    bk = dk < dk;
    bk = dk < dk;
        if (bk) {
        bk = dk < dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld2 = 172.00777235948578;
        on -= dk;
        bk = dk > dk;
        bk = !bk;
        dk = dk + dk;
</cutPoint1547>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1548>
    dk = dk + dk;    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);    dk = dk - dk;    Thought lo0 = Thought54.getInstance(ok, ok, ok, ok);    on += dk;    bk = bk && bk;    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);    bk = ok.m2();    ok.m2(dk, dk, dk, dk);    ok = ok.m4(bk, bk, bk, bk);    boolean lb1 = false;    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);    bk = bk && bk;    if (bk) {        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);        bk = bk && bk;        boolean lb2 = true;        double ld3 = 665.9786180974941;    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);    bk = ok.m2(bk, bk, bk, bk);    bk = dk < dk;    ok = ok.m4();    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);    on += dk;    on -= dk;    bk = bk && bk;</cutPoint1548>Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1549>
    bk = bk || bk;
    bk = bk && bk;
    bk = bk && bk;
    bk = bk || bk;
    on -= dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1549>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1550>
    double ld0 = 829.484887652212;
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    Thought lo1 = Thought24.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought32.getInstance(ok, ok, ok, ok);
    boolean lb3 = true;
    boolean lb4 = true;
    bk = dk > dk;
    bk = dk > dk;
    double ld5 = 808.2520431536266;
    double ld6 = 752.7646417914627;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo7 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    for(int j=0; j<10; j++){
        double ld8 = 720.2631349881444;
        bk = bk || bk;
</cutPoint1550>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1551>
    dk = dk - dk;
    boolean lb0 = false;
    boolean lb1 = false;
    boolean lb2 = false;
    boolean lb3 = false;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb4 = true;
    bk = bk || bk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb5 = true;
    for(int j=0; j<10; j++){
        boolean lb6 = true;
        bk = bk && bk;
        dk = dk - dk;
        ok.m1();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        Thought lo7 = Thought78.getInstance(ok, ok, ok, ok);
        boolean lb8 = true;
        bk = bk && bk;
        dk = dk + dk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1551>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1552>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok.m3();
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    dk = dk + dk;
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb0 = true;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    bk = dk < dk;
</cutPoint1552>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1553>
        ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    on += dk;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4();
    dk = dk + dk;
    on -= dk;
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1553>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1554>
    double ld0 = 933.6716704930149;
    dk *= -1;
    dk = dk + dk;
    boolean lb1 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought6.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    on += dk;
    boolean lb3 = false;
    bk = bk && bk;
    Thought lo4 = Thought93.getInstance(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb5 = true;
    bk = dk > dk;
    boolean lb6 = true;
    bk = dk > dk;
    ok.m1();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1554>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1555>
    bk = bk && bk;
    Thought lo0 = Thought93.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    bk = bk || bk;
    Thought lo1 = Thought22.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought16.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
        double ld3 = 196.02246174907643;
    ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld4 = 895.9516083689456;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1555>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1556>
    dk = dk + dk;
    dk *= -1;
    boolean lb0 = true;
    dk = dk + dk;
    boolean lb1 = true;
    if (bk) {
        boolean lb2 = true;
        Thought lo3 = Thought61.getInstance(dk, dk, dk, dk);
        Thought lo4 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld5 = 710.4494907141635;
        bk = ok.m2(bk, bk, bk, bk);
        dk *= -1;
        Thought lo6 = Thought93.getInstance();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            bk = bk && bk;
            bk = bk && bk;
            double ld7 = 755.9622446595166;
            dk = ok.m3(ok, ok, ok, ok);
            Thought lo8 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = ok.m2(dk, dk, dk, dk);
            bk = dk < dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            on += dk;
</cutPoint1556>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1557>
    bk = bk || bk;
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb0 = true;
    Thought lo1 = Thought58.getInstance();
    dk = dk + dk;
    bk = bk && bk;
    bk = bk && bk;
    bk = dk < dk;
    boolean lb2 = false;
</cutPoint1557>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1558>
    Thought lo0 = Thought93.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    Thought lo1 = Thought51.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    Thought lo3 = Thought1.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m2(dk, dk, dk, dk);
    Thought lo4 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    Thought lo5 = Thought21.getInstance();
    Thought lo6 = Thought64.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
    bk = bk && bk;
    boolean lb7 = false;
    dk = dk + dk;
    boolean lb8 = true;
    boolean lb9 = true;
    boolean lb10 = false;
</cutPoint1558>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1559>
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    Thought lo0 = Thought35.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought59.getInstance(bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    double ld2 = 11.911876079635082;
</cutPoint1559>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1560>
    bk = bk || bk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    bk = bk || bk;
    dk = dk + dk;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought2.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    on += dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = bk && bk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1560>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1561>
    double ld0 = 414.9427797296358;
    bk = bk || bk;
    boolean lb1 = false;
    boolean lb2 = true;
    dk *= -1;
    bk = !bk;
    boolean lb3 = false;
    boolean lb4 = true;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2();
    bk = bk || bk;
    boolean lb5 = true;
    boolean lb6 = false;
    bk = bk && bk;
    boolean lb7 = true;
    bk = bk && bk;
    on += dk;
    bk = !bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    if (bk) {
        bk = dk < dk;
        double ld8 = 417.8999997335501;
        bk = dk < dk;
        on -= dk;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1561>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1562>
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought88.getInstance(bk, bk, bk, bk);
    bk = ok.m2();
    bk = bk && bk;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    double ld1 = 392.65921186919843;
    Thought lo2 = Thought98.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb3 = false;
    on -= dk;
</cutPoint1562>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1563>
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo1 = Thought82.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo2 = Thought51.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok.m2(dk, dk, dk, dk);
        bk = dk < dk;
        dk = dk - dk;
        dk = dk + dk;
        dk = dk - dk;
        }
    on -= dk;
    dk = dk + dk;
    boolean lb3 = true;
    dk *= -1;
    Thought lo4 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld5 = 932.3045846334727;
    double ld6 = 642.0721482340239;
    bk = dk > dk;
    bk = ok.m2();
</cutPoint1563>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1564>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    Thought lo1 = Thought60.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    Thought lo2 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    boolean lb3 = false;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo4 = Thought21.getInstance(dk, dk, dk, dk);
    boolean lb5 = false;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1564>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1565>
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    bk = ok.m2();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
        on += dk;
    boolean lb0 = false;
    double ld1 = 95.16236595280412;
    dk *= -1;
    double ld2 = 611.3561889575919;
    if (bk) {
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        double ld3 = 288.0865115073234;
        on += dk;
        Thought lo4 = Thought60.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld5 = 216.71796344085865;
        bk = dk < dk;
        ok.m2(dk, dk, dk, dk);
        dk *= -1;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1565>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1566>
    Thought lo0 = Thought17.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    double ld1 = 939.0567311697769;
    ok = ok.m4();
        dk *= -1;
    on -= dk;
    dk = dk - dk;
    bk = dk > dk;
    bk = bk && bk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint1566>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1567>
    dk = dk - dk;
    for(int j=0; j<10; j++){
        }
    on += dk;
    bk = ok.m2(ok, ok, ok, ok);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    dk = dk - dk;
    dk = ok.m3();
    bk = bk || bk;
    on -= dk;
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
</cutPoint1567>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1568>
    bk = bk && bk;
    on += dk;
    dk = dk - dk;
    boolean lb0 = true;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
        bk = bk || bk;
        boolean lb1 = false;
        } else if (bk) {
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        ok.m2(bk, bk, bk, bk);
        bk = dk > dk;
        dk = ok.m3();
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            dk = ok.m3(ok, ok, ok, ok);
            dk *= -1;
            boolean lb2 = true;
            boolean lb3 = false;
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk && bk;
</cutPoint1568>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1569>
    bk = bk && bk;
    bk = dk < dk;
    on += dk;
    if (bk) {
        dk = dk - dk;
        boolean lb0 = false;
        on -= dk;
        bk = !bk;
        if (bk) {
            bk = bk || bk;
            ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk || bk;
            bk = !bk;
            bk = dk > dk;
            dk = dk - dk;
</cutPoint1569>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1570>
    dk *= -1;
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    Thought lo0 = Thought91.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought70.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld2 = 303.30975097103374;
</cutPoint1570>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1571>
    bk = !bk;
    ok.m1(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = bk || bk;
    double ld1 = 515.6752654796117;
    boolean lb2 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    Thought lo4 = Thought69.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb5 = false;
    bk = ok.m2();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 847.7223801948829;
    boolean lb7 = false;
    bk = ok.m2(ok, ok, ok, ok);
    on += dk;
    bk = dk > dk;
</cutPoint1571>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1572>
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
            ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    on -= dk;
    Thought lo0 = Thought38.getInstance();
    Thought lo1 = Thought61.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1572>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1573>
    bk = bk && bk;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    dk = dk - dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 190.4861604838061;
        bk = bk || bk;
    dk *= -1;
    boolean lb2 = true;
    boolean lb3 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1573>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1574>
    dk = dk - dk;
    double ld0 = 906.8376561373034;
    bk = bk || bk;
    dk = dk + dk;
    double ld1 = 44.49711811833228;
    bk = !bk;
    double ld2 = 989.2731839962661;
        dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    </cutPoint1574>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought45 extends Thought{
private static ArrayList<Thought45> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 292.0007409694855;
private double fd1 = 202.12244275223668;
private Thought fo0 = null;
private Thought fo1 = null;
Thought45 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought45 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought45 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought45 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought45 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought45 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought45 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought45 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought45 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought45 instance = new Thought45 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought45 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought45 instance = new Thought45 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought45 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought45 instance = new Thought45 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought45 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought45 instance = new Thought45 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought45 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought45 instance = new Thought45 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought45 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought45 instance = new Thought45 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought45 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought45 instance = new Thought45 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought45 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought45 instance = new Thought45 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1575>
    double ld0 = 70.6792538727884;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok.m3();
    bk = !bk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    Thought lo1 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint1575>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1576>
    Thought lo0 = Thought84.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    for(int j=0; j<10; j++){
        boolean lb1 = false;
        dk = dk + dk;
        dk *= -1;
        dk = dk + dk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk *= -1;
        double ld2 = 228.5835079026644;
        dk = dk + dk;
        boolean lb3 = false;
        bk = dk < dk;
        }
    on += dk;
    bk = bk && bk;
    double ld4 = 347.89796387437065;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    Thought lo5 = Thought26.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld6 = 574.9788975893421;
    double ld7 = 633.0543691450017;
    double ld8 = 339.30533347266373;
    Thought lo9 = Thought55.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    dk *= -1;
</cutPoint1576>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1577>
    bk = !bk;
    dk *= -1;
    double ld0 = 100.25203412009218;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    boolean lb1 = true;
    bk = ok.m2();
    if (bk) {
        on += dk;
        } else {
        boolean lb2 = true;
        bk = bk && bk;
        bk = !bk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
</cutPoint1577>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1578>
    bk = !bk;
    dk = dk - dk;
    double ld0 = 163.78409308611472;
    double ld1 = 359.8439494034986;
    Thought lo2 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    dk *= -1;
</cutPoint1578>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1579>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought69.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    on -= dk;
    bk = bk || bk;
</cutPoint1579>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1580>
    dk = dk + dk;
    boolean lb0 = true;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        on -= dk;
        Thought lo1 = Thought31.getInstance(bk, bk, bk, bk);
        ok = ok.m4();
        dk = dk - dk;
        on += dk;
        boolean lb2 = true;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb4 = true;
        dk = ok.m3(dk, dk, dk, dk);
        dk = dk + dk;
        on += dk;
        boolean lb5 = true;
        bk = bk && bk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1580>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1581>
    double ld0 = 819.5698488495581;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk && bk;
    double ld1 = 90.44236464120686;
    dk = dk - dk;
    Thought lo2 = Thought32.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo3 = Thought5.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
</cutPoint1581>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1582>
    boolean lb0 = true;
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    boolean lb1 = true;
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    Thought lo3 = Thought57.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    Thought lo4 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    dk = dk + dk;
    Thought lo5 = Thought16.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb6 = false;
    bk = bk && bk;
    Thought lo7 = Thought44.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    double ld8 = 159.08446116391065;
    if (bk) {
</cutPoint1582>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1583>
    dk *= -1;
    bk = dk > dk;
    bk = bk || bk;
    boolean lb0 = false;
    bk = dk < dk;
    bk = bk && bk;
    double ld1 = 359.368388932968;
    bk = dk < dk;
    dk *= -1;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = ok.m2(bk, bk, bk, bk);
        bk = dk > dk;
        ok = ok.m4();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb2 = true;
        }
    bk = dk > dk;
    bk = !bk;
    bk = dk > dk;
    Thought lo3 = Thought73.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld4 = 1000.7766000970053;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
</cutPoint1583>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1584>
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo0 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb1 = false;
    boolean lb2 = false;
    boolean lb3 = true;
    bk = bk || bk;
    Thought lo4 = Thought50.getInstance();
    boolean lb5 = false;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    double ld6 = 385.99747283505945;
    dk = dk - dk;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb7 = true;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1584>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1585>
    dk = dk + dk;
    bk = !bk;
    bk = bk || bk;
    Thought lo0 = Thought14.getInstance(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    double ld1 = 211.57386841187625;
    double ld2 = 744.1344468214152;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 413.13301782727723;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    Thought lo4 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = true;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld6 = 53.41217036401938;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
</cutPoint1585>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1586>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 409.4253333368989;
        if (bk) {
        bk = dk > dk;
        bk = dk > dk;
        ok = ok.m4(bk, bk, bk, bk);
        on -= dk;
        Thought lo1 = Thought31.getInstance();
        bk = !bk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        bk = bk && bk;
        boolean lb2 = true;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        Thought lo3 = Thought96.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1586>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1587>
    bk = dk < dk;
    double ld0 = 232.81550375806077;
    double ld1 = 685.7915441768631;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk - dk;
    Thought lo2 = Thought56.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    bk = dk > dk;
    bk = bk && bk;
    boolean lb3 = false;
    dk *= -1;
    on += dk;
    ok = ok.m4();
    Thought lo4 = Thought56.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1587>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1588>
    ok.m1(dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb0 = true;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo1 = Thought25.getInstance();
    Thought lo2 = Thought43.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo3 = Thought68.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    dk *= -1;
    boolean lb5 = false;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
</cutPoint1588>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1589>
    ok.m2();
    Thought lo0 = Thought42.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought46.getInstance(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    dk = dk + dk;
    Thought lo2 = Thought57.getInstance(dk, dk, dk, dk);
    Thought lo3 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk > dk;
    double ld4 = 48.89568801170671;
    dk = dk + dk;
    bk = !bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 612.4659557370545;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1589>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1590>
    bk = dk > dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk *= -1;
        Thought lo0 = Thought73.getInstance(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        }
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint1590>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1591>
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo0 = Thought66.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo1 = Thought30.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought88.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    on -= dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    if (bk) {
        for(int j=0; j<10; j++){
            bk = ok.m2(ok, ok, ok, ok);
            double ld3 = 981.8858290814878;
            boolean lb4 = false;
            bk = bk && bk;
            on += dk;
            boolean lb5 = true;
            double ld6 = 8.4810730926932;
            double ld7 = 488.2683392990801;
            dk = dk + dk;
            double ld8 = 344.89925276025235;
</cutPoint1591>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1592>
    Thought lo0 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 431.01322460040575;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    bk = bk || bk;
        bk = dk > dk;
    on -= dk;
    bk = !bk;
    Thought lo2 = Thought64.getInstance(bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    bk = ok.m2();
    bk = bk && bk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    on += dk;
    boolean lb3 = true;
    dk = dk - dk;
    </cutPoint1592>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1593>
    bk = dk < dk;
    dk = dk - dk;
    bk = !bk;
    on += dk;
    Thought lo0 = Thought56.getInstance(ok, ok, ok, ok);
    bk = !bk;
    Thought lo1 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint1593>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1594>
    double ld0 = 675.0743593835302;
    Thought lo1 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    bk = bk || bk;
    bk = bk || bk;
    dk = dk + dk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld2 = 363.59599412089216;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo3 = Thought14.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
</cutPoint1594>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1595>
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought65.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought54.getInstance(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        double ld2 = 86.66574605444318;
        boolean lb3 = true;
        Thought lo4 = Thought87.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1595>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1596>
    Thought lo0 = Thought20.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 785.8240603250922;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    if (bk) {
        Thought lo2 = Thought91.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        on -= dk;
        dk *= -1;
        bk = bk && bk;
        bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1596>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1597>
    boolean lb0 = false;
    Thought lo1 = Thought63.getInstance(dk, dk, dk, dk);
    Thought lo2 = Thought73.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought71.getInstance(bk, bk, bk, bk);
    ok.m2();
    Thought lo4 = Thought24.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint1597>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1598>
    boolean lb0 = true;
    Thought lo1 = Thought84.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    Thought lo3 = Thought58.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = false;
    ok.m1(bk, bk, bk, bk);
    boolean lb5 = false;
    bk = bk && bk;
    dk = dk + dk;
    Thought lo6 = Thought63.getInstance();
    bk = dk > dk;
    on += dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    double ld7 = 244.08266326819313;
    dk = dk - dk;
    Thought lo8 = Thought31.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1598>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1599>
    ok = ok.m4(dk, dk, dk, dk);
    if (bk) {
        boolean lb0 = false;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        double ld1 = 514.2323110735148;
        boolean lb2 = false;
        bk = !bk;
        bk = dk > dk;
        dk *= -1;
        double ld3 = 499.04259990808026;
        boolean lb4 = true;
        ok.m3(bk, bk, bk, bk);
        ok = ok.m4();
        } else if (bk) {
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo5 = Thought92.getInstance(ok, ok, ok, ok);
        bk = !bk;
        } else {
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        if (bk) {
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = ok.m2(dk, dk, dk, dk);
            on += dk;
            bk = dk < dk;
</cutPoint1599>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1600>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo0 = Thought0.getInstance();
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = bk || bk;
        boolean lb2 = true;
    if (bk) {
        Thought lo3 = Thought8.getInstance(ok, ok, ok, ok);
        boolean lb4 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1600>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1601>
    bk = !bk;
    Thought lo0 = Thought88.getInstance(dk, dk, dk, dk);
    boolean lb1 = false;
    bk = dk > dk;
    bk = !bk;
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok.m1(bk, bk, bk, bk);
    Thought lo3 = Thought9.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    dk = dk + dk;
    double ld4 = 988.547611378685;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb5 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    Thought lo6 = Thought1.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1601>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1602>
    dk = dk - dk;
    if (bk) {
        dk *= -1;
        dk = dk + dk;
        dk = ok.m3(bk, bk, bk, bk);
        Thought lo0 = Thought79.getInstance();
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        dk = dk + dk;
        bk = bk || bk;
        bk = bk || bk;
</cutPoint1602>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1603>
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    double ld0 = 953.9235235497995;
    boolean lb1 = false;
        Thought lo2 = Thought51.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk - dk;
    boolean lb3 = true;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    double ld5 = 630.9543960868199;
    bk = dk < dk;
    Thought lo6 = Thought19.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2();
    double ld7 = 621.718496820401;
    Thought lo8 = Thought82.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo9 = Thought77.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb10 = false;
</cutPoint1603>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1604>
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = false;
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
</cutPoint1604>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1605>
    ok.m1();
    for(int j=0; j<10; j++){
        bk = bk && bk;
        Thought lo0 = Thought11.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok.m2(ok, ok, ok, ok);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = false;
        boolean lb2 = true;
        double ld3 = 353.6553157208358;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb4 = true;
        bk = bk || bk;
        bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        on += dk;
        ok = ok.m4();
        on -= dk;
        bk = bk || bk;
        bk = dk < dk;
        bk = !bk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1605>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1606>
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk > dk;
    dk *= -1;
    bk = dk < dk;
    dk *= -1;
    double ld0 = 349.8883003155079;
    double ld1 = 633.7333430889233;
    dk *= -1;
    bk = dk < dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb2 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    dk = dk - dk;
    bk = dk > dk;
    dk *= -1;
</cutPoint1606>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1607>
        double ld0 = 33.30465842112892;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    dk = ok.m3();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    dk = dk + dk;
    on += dk;
    dk = dk - dk;
    bk = bk && bk;
    on -= dk;
    bk = bk || bk;
    bk = !bk;
    Thought lo1 = Thought61.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1607>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1608>
    Thought lo0 = Thought31.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    Thought lo1 = Thought3.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    bk = dk < dk;
    dk = dk - dk;
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1608>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1609>
    bk = bk || bk;
    dk = dk - dk;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk < dk;
</cutPoint1609>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought46 extends Thought{
private static ArrayList<Thought46> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 332.14206738001604;
private double fd1 = 961.263029812224;
private Thought fo0 = null;
private Thought fo1 = null;
Thought46 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought46 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought46 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought46 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought46 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought46 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought46 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought46 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought46 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought46 instance = new Thought46 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought46 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought46 instance = new Thought46 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought46 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought46 instance = new Thought46 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought46 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought46 instance = new Thought46 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought46 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought46 instance = new Thought46 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought46 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought46 instance = new Thought46 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought46 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought46 instance = new Thought46 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought46 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought46 instance = new Thought46 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1610>
    double ld0 = 605.6377367221555;
    bk = dk < dk;
    ok.m2();
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = true;
            bk = bk && bk;
    bk = dk > dk;
    bk = !bk;
    Thought lo2 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    on -= dk;
    double ld3 = 721.1624698047118;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3();
    double ld4 = 691.5010701237746;
</cutPoint1610>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1611>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk - dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo2 = Thought37.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok.m1();
</cutPoint1611>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1612>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    bk = dk > dk;
    dk *= -1;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb1 = true;
    dk = dk + dk;
    on -= dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1612>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1613>
    bk = !bk;
        on -= dk;
    Thought lo0 = Thought94.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    boolean lb2 = true;
    dk = dk - dk;
    bk = ok.m2();
    bk = dk < dk;
    for(int j=0; j<10; j++){
        }
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb3 = true;
    boolean lb4 = false;
    bk = bk && bk;
</cutPoint1613>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1614>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    if (bk) {
        bk = !bk;
        bk = dk > dk;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        double ld0 = 355.49187935124456;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
        if (bk) {
            dk = dk + dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            dk = ok.m3(bk, bk, bk, bk);
            dk *= -1;
            dk = dk - dk;
            ok.m3();
            boolean lb1 = true;
            on += dk;
            bk = bk || bk;
</cutPoint1614>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1615>
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    dk = dk - dk;
    double ld0 = 238.28671739811585;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = !bk;
    on += dk;
    bk = bk || bk;
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3();
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok);
        dk = dk - dk;
</cutPoint1615>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1616>
    bk = dk < dk;
    boolean lb0 = true;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
    double ld1 = 797.3052854749429;
    bk = !bk;
    boolean lb2 = true;
    double ld3 = 678.9136946978928;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    Thought lo4 = Thought63.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    bk = !bk;
    bk = dk > dk;
</cutPoint1616>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1617>
    dk = dk - dk;
    dk = dk + dk;
    double ld0 = 145.50232540938697;
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = bk || bk;
    on -= dk;
    dk = dk - dk;
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    ok.m2();
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought15.getInstance(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    bk = dk > dk;
</cutPoint1617>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1618>
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    dk *= -1;
    dk = dk + dk;
    double ld0 = 275.30540905256015;
    bk = !bk;
    ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
</cutPoint1618>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1619>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    boolean lb0 = true;
    boolean lb1 = true;
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
            dk = dk - dk;
    Thought lo2 = Thought6.getInstance(bk, bk, bk, bk);
</cutPoint1619>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1620>
    dk = dk + dk;
    dk *= -1;
    boolean lb0 = true;
    dk *= -1;
    dk = ok.m3();
    boolean lb1 = false;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought13.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    bk = bk && bk;
    dk = dk + dk;
    on -= dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    if (bk) {
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1620>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1621>
    double ld0 = 7.019151865061656;
    on += dk;
        bk = dk > dk;
    boolean lb1 = false;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        dk = dk + dk;
        bk = bk && bk;
</cutPoint1621>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1622>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    double ld0 = 321.20310904794314;
    on -= dk;
    bk = bk && bk;
    dk = dk + dk;
    dk = dk + dk;
    Thought lo1 = Thought73.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    bk = dk > dk;
    Thought lo2 = Thought53.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    boolean lb4 = false;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    dk *= -1;
    bk = !bk;
</cutPoint1622>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1623>
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb0 = true;
    boolean lb1 = true;
    bk = dk < dk;
    double ld2 = 391.54365194198425;
    double ld3 = 729.7614111688735;
    double ld4 = 465.39442622840085;
    bk = dk > dk;
    bk = dk > dk;
    boolean lb5 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld6 = 603.4488173215653;
    ok.m1(bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4();
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1623>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1624>
    Thought lo0 = Thought80.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);    double ld1 = 881.975133126164;    boolean lb2 = true;    double ld3 = 253.17509213188123;    bk = bk && bk;    boolean lb4 = true;    bk = bk || bk;    dk = dk - dk;    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);    dk = dk + dk;    bk = ok.m2(dk, dk, dk, dk);    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);    Thought lo4 = Thought48.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);    ok.m1();    dk = dk + dk;    dk = dk + dk;    double ld5 = 483.77116524834844;    ok.m3(dk, dk, dk, dk);    bk = !bk;    dk = dk + dk;    boolean lb6 = false;    boolean lb7 = true;</cutPoint1624>Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1625>
    bk = dk > dk;
    bk = bk && bk;
    on += dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint1625>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1626>
    boolean lb0 = true;
    bk = bk && bk;
    double ld1 = 44.197617179288734;
    bk = dk > dk;
    boolean lb2 = false;
    on -= dk;
    Thought lo3 = Thought24.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        on += dk;
        boolean lb4 = true;
        double ld5 = 409.86043778660553;
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint1626>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1627>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought69.getInstance();
    bk = bk && bk;
    boolean lb1 = true;
    bk = dk < dk;
    on += dk;
    boolean lb2 = false;
    Thought lo3 = Thought8.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
</cutPoint1627>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1628>
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    dk = dk + dk;
    double ld1 = 921.1517469825499;
    bk = bk && bk;
    bk = bk || bk;
    bk = dk < dk;
    dk = dk + dk;
    boolean lb2 = true;
    boolean lb3 = true;
    boolean lb4 = true;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1628>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1629>
    double ld0 = 271.4932207759253;
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    bk = dk > dk;
    dk = dk - dk;
    bk = dk > dk;
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        Thought lo1 = Thought89.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        if (bk) {
            bk = bk || bk;
            ok = ok.m4();
            Thought lo2 = Thought32.getInstance(dk, dk, dk, dk);
            ok = ok.m4(bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = dk > dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk < dk;
            for(int j=0; j<10; j++){
                ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
                ok.m3(ok, ok, ok, ok);
                bk = bk && bk;
</cutPoint1629>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1630>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb0 = false;
        ok = ok.m4();
    bk = dk > dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    bk = !bk;
</cutPoint1630>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1631>
    on += dk;
    boolean lb0 = false;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    double ld1 = 662.5628873649852;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
</cutPoint1631>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1632>
    boolean lb0 = false;
    dk = dk - dk;
    bk = bk || bk;
    on += dk;
    bk = bk || bk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m3();
        dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    </cutPoint1632>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1633>
    dk = dk - dk;
    bk = dk > dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = false;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    ok.m1();
    Thought lo1 = Thought92.getInstance(dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
</cutPoint1633>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1634>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
        bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 528.5103973715429;
    boolean lb1 = false;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1634>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1635>
    boolean lb0 = true;
    bk = dk > dk;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk - dk;
        Thought lo1 = Thought30.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint1635>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1636>
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 531.7956933430021;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb1 = true;
    boolean lb2 = false;
</cutPoint1636>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1637>
    on -= dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2();
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
</cutPoint1637>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1638>
    Thought lo0 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    boolean lb1 = true;
    bk = bk || bk;
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1638>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1639>
    boolean lb0 = false;
    boolean lb1 = true;
    on += dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    dk = dk + dk;
    Thought lo2 = Thought32.getInstance();
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb3 = true;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    boolean lb4 = true;
</cutPoint1639>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1640>
    boolean lb0 = false;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        boolean lb1 = false;
        boolean lb2 = false;
        dk = dk + dk;
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        Thought lo3 = Thought32.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        double ld4 = 941.143618778529;
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk || bk;
        boolean lb5 = false;
        bk = dk > dk;
        bk = bk && bk;
</cutPoint1640>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1641>
    dk *= -1;
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    dk = dk + dk;
    double ld0 = 233.89997260184697;
    ok = ok.m4();
    double ld1 = 543.6521178153931;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    if (bk) {
        bk = ok.m2(bk, bk, bk, bk);
        bk = bk || bk;
        bk = !bk;
        dk = dk - dk;
        dk = dk - dk;
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        } else {
        double ld2 = 218.12718795417152;
        Thought lo3 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk = dk - dk;
        boolean lb4 = false;
</cutPoint1641>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1642>
    bk = bk || bk;
    bk = bk && bk;
    bk = !bk;
    dk *= -1;
    bk = !bk;
    dk = dk + dk;
    dk *= -1;
    double ld0 = 241.73124893355026;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    boolean lb1 = true;
    double ld2 = 401.7529306107355;
    bk = !bk;
    Thought lo3 = Thought15.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
</cutPoint1642>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1643>
    dk = dk - dk;
    boolean lb0 = false;
    dk *= -1;
    bk = bk && bk;
    double ld1 = 45.653961804246634;
    Thought lo2 = Thought56.getInstance();
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo4 = Thought82.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
    Thought lo5 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint1643>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1644>
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    double ld0 = 668.5905229514959;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    Thought lo1 = Thought32.getInstance(dk, dk, dk, dk);
    on += dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
        on -= dk;
</cutPoint1644>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought47 extends Thought{
private static ArrayList<Thought47> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 639.7662840273391;
private double fd1 = 283.9558116264415;
private Thought fo0 = null;
private Thought fo1 = null;
Thought47 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought47 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought47 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought47 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought47 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought47 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought47 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought47 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought47 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought47 instance = new Thought47 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought47 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought47 instance = new Thought47 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought47 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought47 instance = new Thought47 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought47 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought47 instance = new Thought47 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought47 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought47 instance = new Thought47 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought47 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought47 instance = new Thought47 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought47 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought47 instance = new Thought47 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought47 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought47 instance = new Thought47 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1645>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = !bk;
        bk = dk > dk;
    bk = bk && bk;
    bk = dk > dk;
    dk = dk + dk;
    dk = dk - dk;
    Thought lo0 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1645>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1646>
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    bk = bk && bk;
    boolean lb0 = true;
    ok.m1(ok, ok, ok, ok);
    Thought lo1 = Thought66.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb2 = true;
    dk *= -1;
    bk = ok.m2();
</cutPoint1646>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1647>
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    double ld0 = 951.9546832023824;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo2 = Thought75.getInstance(ok, ok, ok, ok);
    Thought lo3 = Thought13.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb4 = false;
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb5 = true;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb6 = false;
    on += dk;
    bk = dk > dk;
    bk = !bk;
</cutPoint1647>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1648>
    bk = dk < dk;
    bk = bk && bk;
    boolean lb0 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    boolean lb1 = true;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    double ld2 = 84.85372789121193;
    Thought lo3 = Thought23.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4();
        dk = dk - dk;
        dk *= -1;
        dk = dk + dk;
</cutPoint1648>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1649>
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    bk = bk || bk;
    dk = dk + dk;
    Thought lo0 = Thought19.getInstance(bk, bk, bk, bk);
    Thought lo1 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo2 = Thought29.getInstance(ok, ok, ok, ok);
</cutPoint1649>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1650>
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
    if (bk) {
        dk = ok.m3(dk, dk, dk, dk);
        dk *= -1;
        dk = dk - dk;
        dk *= -1;
        boolean lb0 = true;
        bk = bk || bk;
        bk = ok.m2(bk, bk, bk, bk);
        double ld1 = 303.0792151637182;
        dk *= -1;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
</cutPoint1650>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1651>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought7.getInstance(ok, ok, ok, ok);
    bk = !bk;
    Thought lo1 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
        Thought lo2 = Thought52.getInstance(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    if (bk) {
        double ld3 = 296.6773934228747;
        bk = dk < dk;
        dk = dk + dk;
        boolean lb4 = true;
</cutPoint1651>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1652>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    double ld1 = 906.0502839903642;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought41.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    ok.m1(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk && bk;
    boolean lb4 = true;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk < dk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    bk = !bk;
        dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
</cutPoint1652>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1653>
    bk = !bk;
    bk = !bk;
    bk = bk && bk;
    bk = dk < dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
</cutPoint1653>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1654>
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    double ld1 = 291.25460403145956;
    Thought lo2 = Thought13.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    dk *= -1;
    bk = dk > dk;
    bk = bk && bk;
    bk = !bk;
</cutPoint1654>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1655>
    boolean lb0 = false;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        bk = dk < dk;
        bk = bk || bk;
        boolean lb1 = false;
        bk = !bk;
        dk = dk + dk;
        on += dk;
        for(int j=0; j<10; j++){
            boolean lb2 = true;
            bk = bk && bk;
            ok = ok.m4(ok, ok, ok, ok);
            dk *= -1;
            }
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            bk = bk || bk;
            dk = dk + dk;
            bk = dk > dk;
            dk = dk + dk;
            bk = dk > dk;
            dk = dk + dk;
            dk *= -1;
            ok = ok.m4();
            ok.m3(dk, dk, dk, dk);
            boolean lb3 = false;
            bk = bk && bk;
            dk = dk - dk;
</cutPoint1655>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1656>
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    double ld0 = 460.83930728442084;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    double ld1 = 156.77720966828915;
    double ld2 = 764.5807625077481;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        Thought lo3 = Thought35.getInstance();
        dk = dk + dk;
        on -= dk;
        on += dk;
</cutPoint1656>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1657>
    dk = ok.m3(dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    bk = dk < dk;
    Thought lo0 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo2 = Thought62.getInstance(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 332.3722894596923;
    boolean lb4 = false;
    Thought lo5 = Thought58.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint1657>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1658>
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    Thought lo0 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb1 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2();
    dk *= -1;
    Thought lo2 = Thought64.getInstance(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint1658>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1659>
    dk *= -1;    bk = dk < dk;    double ld0 = 812.3152842609999;    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);    if (bk) {        boolean lb1 = false;        bk = !bk;    Thought lo1 = Thought95.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);    Thought lo2 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);    boolean lb3 = true;    dk *= -1;    dk = dk + dk;    bk = bk && bk;    dk = ok.m3(dk, dk, dk, dk);    dk = dk - dk;    bk = !bk;    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);    ok = ok.m4(bk, bk, bk, bk);    ok = ok.m4();    dk = dk + dk;    on += dk;</cutPoint1659>Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1660>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    Thought lo1 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought16.getInstance(ok, ok, ok, ok);
</cutPoint1660>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1661>
    on += dk;
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        bk = dk < dk;
        bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk > dk;
        bk = bk && bk;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk || bk;
        double ld1 = 268.3884559072407;
</cutPoint1661>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1662>
    double ld0 = 581.0799001228165;    ok = ok.m4();    Thought lo1 = Thought41.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);    ok = ok.m4(ok, ok, ok, ok);    bk = !bk;    dk = dk + dk;    bk = !bk;    bk = dk > dk;    bk = !bk;    dk *= -1;    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);    dk = dk + dk;    boolean lb2 = true;    bk = dk > dk;    dk = dk + dk;    bk = dk < dk;    Thought lo3 = Thought88.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);    ok = ok.m4(dk, dk, dk, dk);    bk = bk || bk;    dk = dk - dk;    Thought lo0 = Thought62.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);    dk = dk - dk;</cutPoint1662>Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1663>
    on -= dk;
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    dk = dk + dk;
    dk = dk + dk;
    bk = bk && bk;
    Thought lo0 = Thought2.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    double ld1 = 622.9082464812915;
    boolean lb2 = true;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb3 = false;
    bk = dk > dk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = dk < dk;
        bk = !bk;
        bk = dk < dk;
</cutPoint1663>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1664>
    dk *= -1;
    Thought lo0 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 877.396781168922;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = false;
    Thought lo3 = Thought36.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    boolean lb4 = false;
</cutPoint1664>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1665>
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo0 = Thought45.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    bk = bk || bk;
    double ld2 = 29.751092248967993;
    ok.m2(ok, ok, ok, ok);
</cutPoint1665>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1666>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    on -= dk;
    on -= dk;
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    dk = dk - dk;
    on += dk;
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1666>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1667>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
        boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk *= -1;
    bk = dk > dk;
    bk = bk && bk;
    double ld2 = 355.74544307675103;
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    dk *= -1;
    double ld3 = 99.80752109603444;
    for(int j=0; j<10; j++){
        }
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1667>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1668>
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    double ld0 = 380.27423089028736;
    boolean lb1 = true;
    boolean lb2 = false;
    double ld3 = 357.6630531685719;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = ok.m2();
    Thought lo4 = Thought14.getInstance(dk, dk, dk, dk);
    Thought lo5 = Thought58.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        for(int j=0; j<10; j++){
        Thought lo6 = Thought62.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo7 = Thought18.getInstance(ok, ok, ok, ok);
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1668>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1669>
    double ld0 = 749.9522109017254;
    bk = dk < dk;
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    double ld2 = 893.1813748533999;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    dk *= -1;
    dk = dk - dk;
    double ld3 = 695.7954707861534;
    Thought lo4 = Thought99.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = bk || bk;
    Thought lo5 = Thought57.getInstance(dk, dk, dk, dk);
</cutPoint1669>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1670>
    double ld0 = 359.915906111724;
    ok.m2(bk, bk, bk, bk);
    Thought lo1 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought52.getInstance(ok, ok, ok, ok);
    Thought lo3 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb4 = false;
        double ld5 = 59.12384979997911;
        bk = ok.m2();
        Thought lo6 = Thought38.getInstance(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint1670>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1671>
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 479.6153439340405;
    bk = !bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1671>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1672>
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4();
    Thought lo0 = Thought50.getInstance(dk, dk, dk, dk);
    bk = !bk;
</cutPoint1672>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1673>
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    boolean lb0 = true;
    bk = bk || bk;
    bk = dk < dk;
    dk *= -1;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    boolean lb1 = false;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    for(int j=0; j<10; j++){
        ok.m1(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = false;
</cutPoint1673>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1674>
    on -= dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought11.getInstance();
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1674>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1675>
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk < dk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought73.getInstance(ok, ok, ok, ok);
    boolean lb2 = false;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
        dk *= -1;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb3 = false;
    boolean lb4 = true;
    dk = ok.m3(bk, bk, bk, bk);
    double ld5 = 826.6957545417041;
    Thought lo6 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
</cutPoint1675>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1676>
    bk = bk && bk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
    bk = bk || bk;
    bk = bk || bk;
    bk = !bk;
    boolean lb1 = true;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought97.getInstance(ok, ok, ok, ok);
</cutPoint1676>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1677>
    bk = !bk;
    bk = !bk;
    bk = dk > dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk > dk;
    Thought lo1 = Thought3.getInstance();
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    bk = dk > dk;
    ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
</cutPoint1677>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1678>
    double ld0 = 24.38418142399242;
    Thought lo1 = Thought30.getInstance(ok, ok, ok, ok);
    boolean lb2 = true;
    dk *= -1;
    on -= dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought41.getInstance();
        Thought lo4 = Thought17.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
        boolean lb5 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb6 = false;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
</cutPoint1678>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1679>
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    bk = dk < dk;
    bk = bk || bk;
    bk = dk < dk;
    boolean lb0 = false;
    dk *= -1;
    Thought lo1 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1679>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought48 extends Thought{
private static ArrayList<Thought48> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 584.6206096829527;
private double fd1 = 52.777358076482386;
private Thought fo0 = null;
private Thought fo1 = null;
Thought48 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought48 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought48 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought48 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought48 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought48 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought48 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought48 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought48 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought48 instance = new Thought48 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought48 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought48 instance = new Thought48 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought48 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought48 instance = new Thought48 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought48 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought48 instance = new Thought48 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought48 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought48 instance = new Thought48 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought48 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought48 instance = new Thought48 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought48 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought48 instance = new Thought48 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought48 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought48 instance = new Thought48 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1680>
    dk *= -1;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    dk = dk + dk;
    bk = !bk;
    double ld0 = 461.6201059733426;
    Thought lo1 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo2 = Thought94.getInstance();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld3 = 5.16663252315851;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb4 = true;
    double ld5 = 549.6513492886099;
</cutPoint1680>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1681>
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
    bk = dk > dk;
    bk = bk && bk;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo2 = Thought84.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint1681>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1682>
    bk = dk < dk;
    bk = dk < dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    dk = dk - dk;
    boolean lb1 = false;
    dk = dk + dk;
    dk = dk - dk;
    bk = dk < dk;
    ok.m3(bk, bk, bk, bk);
    double ld2 = 395.80747284889884;
    on -= dk;
    on += dk;
    Thought lo3 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
    dk = dk + dk;
    Thought lo4 = Thought24.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb5 = true;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1682>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1683>
    bk = bk && bk;
    ok.m2();
    bk = bk && bk;
    Thought lo0 = Thought34.getInstance(dk, dk, dk, dk);
    dk *= -1;
    ok.m1(bk, bk, bk, bk);
    on -= dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    Thought lo1 = Thought35.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
    bk = bk && bk;
    dk *= -1;
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    bk = dk < dk;
    bk = dk < dk;
    bk = dk < dk;
    double ld4 = 506.26171726481846;
</cutPoint1683>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1684>
    bk = bk && bk;
    bk = dk < dk;
    Thought lo0 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought8.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
        double ld2 = 239.67948376304113;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    boolean lb3 = true;
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb4 = false;
    double ld5 = 66.77652877913609;
    bk = dk < dk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
</cutPoint1684>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1685>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
    dk = dk + dk;
    ok = ok.m4();
    double ld0 = 427.7117995863449;
    double ld1 = 688.4064991360075;
        Thought lo2 = Thought79.getInstance(dk, dk, dk, dk);
    boolean lb3 = false;
    bk = bk || bk;
    dk = dk - dk;
    boolean lb4 = true;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo5 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb6 = true;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    on -= dk;
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1685>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1686>
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4();
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
        bk = dk < dk;
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    </cutPoint1686>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1687>
    Thought lo0 = Thought52.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    double ld1 = 206.75443037388862;
    on -= dk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo2 = Thought56.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint1687>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1688>
    bk = bk || bk;
    bk = bk && bk;
    dk *= -1;
    bk = !bk;
    bk = dk < dk;
    Thought lo0 = Thought18.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 526.844386093698;
    dk *= -1;
    bk = !bk;
    Thought lo2 = Thought51.getInstance();
    bk = bk || bk;
    for(int j=0; j<10; j++){
        dk = ok.m3(dk, dk, dk, dk);
        Thought lo3 = Thought59.getInstance(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        bk = dk < dk;
        boolean lb4 = false;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        bk = ok.m2(ok, ok, ok, ok);
        on += dk;
</cutPoint1688>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1689>
    bk = dk > dk;
    on -= dk;
    bk = !bk;
    boolean lb0 = true;
    bk = !bk;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    double ld2 = 940.3802485944672;
    ok = ok.m4();
    bk = dk < dk;
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    boolean lb3 = true;
    for(int j=0; j<10; j++){
        dk = ok.m3(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        boolean lb4 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        bk = !bk;
        double ld5 = 279.60403144674433;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
</cutPoint1689>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1690>
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    boolean lb0 = false;
    bk = bk || bk;
    Thought lo1 = Thought81.getInstance(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = bk && bk;
    dk = dk + dk;
    bk = ok.m2();
    bk = bk || bk;
    boolean lb3 = false;
        dk *= -1;
    Thought lo4 = Thought30.getInstance(dk, dk, dk, dk);
    boolean lb5 = false;
    ok.m1(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    on += dk;
    dk *= -1;
    bk = !bk;
    for(int j=0; j<10; j++){
</cutPoint1690>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1691>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 661.6316483862811;
    bk = dk > dk;
    bk = dk < dk;
    dk *= -1;
    double ld1 = 451.1101619588617;
    boolean lb2 = true;
    bk = dk < dk;
    dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = dk > dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb3 = true;
        bk = dk < dk;
        ok.m2(bk, bk, bk, bk);
        double ld4 = 638.6964018271527;
</cutPoint1691>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1692>
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    double ld0 = 280.27000380823176;
    Thought lo1 = Thought3.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought28.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint1692>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1693>
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo0 = Thought96.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb1 = false;
    double ld2 = 750.4916396119602;
    Thought lo3 = Thought32.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = ok.m2();
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    for(int j=0; j<10; j++){
        Thought lo5 = Thought39.getInstance(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb6 = true;
        boolean lb7 = false;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
</cutPoint1693>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1694>
    dk *= -1;
    double ld0 = 944.7556760937014;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 529.3157949142211;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    Thought lo2 = Thought45.getInstance(dk, dk, dk, dk);
    bk = !bk;
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    bk = bk || bk;
</cutPoint1694>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1695>
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld0 = 946.8517700204968;
        bk = bk || bk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        dk *= -1;
        dk = dk + dk;
        ok.m1();
        bk = dk < dk;
        bk = dk > dk;
        bk = bk || bk;
        bk = dk > dk;
        ok.m3(dk, dk, dk, dk);
        bk = bk || bk;
</cutPoint1695>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1696>
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    double ld0 = 409.01035435751874;
    dk = dk + dk;
    bk = !bk;
    bk = dk > dk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1696>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1697>
    on -= dk;
    Thought lo0 = Thought83.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    on += dk;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    boolean lb1 = true;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        for(int j=0; j<10; j++){
            bk = dk > dk;
            bk = bk || bk;
            ok = ok.m4(dk, dk, dk, dk);
            }
        Thought lo2 = Thought72.getInstance(bk, bk, bk, bk);
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        bk = bk && bk;
        on -= dk;
        dk = dk - dk;
        boolean lb3 = true;
</cutPoint1697>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1698>
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    Thought lo0 = Thought38.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    Thought lo1 = Thought2.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    on -= dk;
    dk = dk + dk;
    on += dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        bk = bk && bk;
        boolean lb2 = true;
        bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1698>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1699>
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    for(int j=0; j<10; j++){
        ok.m2(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        boolean lb0 = false;
        dk = dk - dk;
        Thought lo1 = Thought94.getInstance();
        bk = bk && bk;
        bk = dk < dk;
        bk = !bk;
        bk = dk < dk;
        }
    boolean lb2 = true;
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1699>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1700>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 998.0063523513757;
    Thought lo1 = Thought2.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    boolean lb2 = true;
    dk *= -1;
    bk = dk < dk;
    </cutPoint1700>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1701>
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought97.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
</cutPoint1701>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1702>
    bk = bk || bk;
    dk = dk - dk;
    boolean lb0 = false;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    on -= dk;
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought49.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        boolean lb3 = true;
        bk = bk && bk;
        Thought lo4 = Thought47.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2();
        dk = ok.m3(dk, dk, dk, dk);
        ok.m2(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        Thought lo5 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo6 = Thought14.getInstance(ok, ok, ok, ok);
        bk = !bk;
</cutPoint1702>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1703>
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought78.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb1 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 662.5758314998583;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb3 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok);
</cutPoint1703>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1704>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld0 = 286.11074510004624;
    dk = ok.m3();
    dk *= -1;
    boolean lb1 = false;
    boolean lb2 = true;
    ok.m3(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
    boolean lb3 = false;
    bk = dk < dk;
    dk = dk - dk;
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
</cutPoint1704>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1705>
    if (bk) {
        ok.m3(ok, ok, ok, ok);
        dk = dk + dk;
        dk = dk + dk;
        on += dk;
        bk = dk < dk;
        dk *= -1;
        bk = bk && bk;
        bk = !bk;
        } else if (bk) {
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = false;
        ok = ok.m4();
        on += dk;
        bk = bk || bk;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint1705>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1706>
        ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought54.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = true;
    dk *= -1;
    bk = !bk;
</cutPoint1706>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1707>
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb0 = false;
    dk = dk + dk;
        bk = dk < dk;
    bk = bk && bk;
    boolean lb1 = true;
    double ld2 = 267.4460809760202;
        bk = bk && bk;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought85.getInstance();
        bk = dk > dk;
</cutPoint1707>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1708>
    double ld0 = 871.0326739756846;
    bk = dk < dk;
    dk = dk + dk;
    bk = dk > dk;
    double ld1 = 126.01859556181633;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    boolean lb2 = false;
    Thought lo3 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok);
    Thought lo4 = Thought52.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    double ld5 = 118.55769264633476;
    dk = dk - dk;
    double ld6 = 592.9697702086931;
    double ld7 = 499.69841680371195;
    on += dk;
    dk = dk - dk;
</cutPoint1708>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1709>
    double ld0 = 838.2944892798555;
    on -= dk;
    on -= dk;
    ok.m2(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk + dk;
    boolean lb2 = true;
</cutPoint1709>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1710>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    Thought lo0 = Thought86.getInstance(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    bk = dk > dk;
    bk = !bk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    Thought lo4 = Thought87.getInstance();
    dk *= -1;
</cutPoint1710>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1711>
    dk = dk - dk;
    double ld0 = 277.9421125442519;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    bk = dk < dk;
        Thought lo1 = Thought27.getInstance(bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought87.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint1711>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1712>
    bk = dk < dk;
    dk = dk + dk;
    dk = dk + dk;
        dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    Thought lo0 = Thought32.getInstance(ok, ok, ok, ok);
    bk = !bk;
    bk = dk < dk;
    dk *= -1;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    dk = dk - dk;
    Thought lo1 = Thought74.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb2 = true;
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint1712>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1713>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    bk = bk || bk;
    double ld0 = 233.8239442462593;
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    on += dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld1 = 783.9012955437577;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = dk + dk;
    Thought lo3 = Thought59.getInstance();
    boolean lb4 = false;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk);
</cutPoint1713>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1714>
    boolean lb0 = false;
    bk = bk || bk;
    dk *= -1;
    bk = !bk;
    on -= dk;
    bk = !bk;
    dk *= -1;
    bk = dk < dk;
        bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    on -= dk;
    dk = dk + dk;
</cutPoint1714>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought49 extends Thought{
private static ArrayList<Thought49> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 323.8217265710716;
private double fd1 = 364.40030792590636;
private Thought fo0 = null;
private Thought fo1 = null;
Thought49 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought49 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought49 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought49 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought49 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought49 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought49 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought49 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought49 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought49 instance = new Thought49 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought49 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought49 instance = new Thought49 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought49 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought49 instance = new Thought49 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought49 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought49 instance = new Thought49 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought49 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought49 instance = new Thought49 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought49 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought49 instance = new Thought49 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought49 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought49 instance = new Thought49 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought49 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought49 instance = new Thought49 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1715>
    dk = dk + dk;
    dk *= -1;
    Thought lo0 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk > dk;
    if (bk) {
        boolean lb1 = true;
        dk *= -1;
</cutPoint1715>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1716>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
        bk = dk > dk;
    boolean lb0 = false;
    bk = dk > dk;
    boolean lb1 = true;
    bk = dk > dk;
    ok.m3();
    on += dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo2 = Thought75.getInstance(bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        bk = !bk;
        bk = !bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
</cutPoint1716>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1717>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    double ld0 = 134.47456167439083;
    dk *= -1;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    bk = bk || bk;
    bk = !bk;
    on -= dk;
    bk = !bk;
</cutPoint1717>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1718>
    dk = dk - dk;
    dk = dk + dk;
    bk = bk && bk;
    Thought lo0 = Thought15.getInstance(dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    Thought lo1 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo3 = Thought99.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld4 = 609.8814364255024;
    dk = dk - dk;
    boolean lb5 = false;
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1718>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1719>
    dk = ok.m3();
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    Thought lo0 = Thought93.getInstance(bk, bk, bk, bk);
    Thought lo1 = Thought69.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
</cutPoint1719>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1720>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    on -= dk;
        dk = dk - dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    dk = dk + dk;
    on += dk;
    ok = ok.m4();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    if (bk) {
        bk = bk || bk;
        boolean lb1 = false;
        bk = ok.m2(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld2 = 165.1625561905375;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1720>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1721>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    bk = bk && bk;
    bk = dk < dk;
    dk *= -1;
    Thought lo0 = Thought84.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo1 = Thought26.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 378.9255964621575;
    on -= dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok);
    Thought lo3 = Thought96.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb4 = false;
    ok = ok.m4();
    boolean lb5 = true;
</cutPoint1721>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1722>
    boolean lb0 = false;
    boolean lb1 = false;
    Thought lo2 = Thought28.getInstance(dk, dk, dk, dk);
    bk = !bk;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    Thought lo4 = Thought61.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo5 = Thought58.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo6 = Thought24.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
    on += dk;
    double ld7 = 347.4338055665597;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1722>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1723>
    on += dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought33.getInstance();
    on += dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
        for(int j=0; j<10; j++){
        dk = ok.m3(bk, bk, bk, bk);
        dk = dk + dk;
        double ld1 = 729.5395933059306;
        boolean lb2 = true;
        bk = dk > dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1723>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1724>
    dk = dk + dk;
    bk = !bk;
    double ld0 = 623.0775457510697;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    Thought lo1 = Thought91.getInstance();
    ok.m2(dk, dk, dk, dk);
    boolean lb2 = true;
    bk = bk && bk;
    on -= dk;
</cutPoint1724>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1725>
    dk *= -1;
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    double ld0 = 854.0075653943138;
    bk = dk < dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought98.getInstance(ok, ok, ok, ok);
    bk = !bk;
    boolean lb3 = false;
    double ld4 = 810.7173854561963;
    Thought lo5 = Thought11.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo6 = Thought47.getInstance();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb7 = false;
    dk = dk + dk;
    dk *= -1;
    double ld8 = 82.55239816753796;
    bk = dk > dk;
    on -= dk;
    bk = bk || bk;
</cutPoint1725>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1726>
    ok.m1(bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    if (bk) {
        bk = dk > dk;
        Thought lo1 = Thought93.getInstance(ok, ok, ok, ok);
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        dk = dk + dk;
        bk = bk && bk;
        boolean lb2 = true;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
            Thought lo3 = Thought85.getInstance(ok, ok, ok, ok);
            Thought lo4 = Thought7.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = !bk;
            dk = dk - dk;
            bk = dk < dk;
            boolean lb5 = true;
</cutPoint1726>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1727>
    bk = bk || bk;
    bk = bk || bk;
    double ld0 = 158.65424956293128;
    boolean lb1 = false;
        Thought lo2 = Thought22.getInstance();
    dk = dk - dk;
    bk = dk < dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
        dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = !bk;
    boolean lb3 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb4 = false;
</cutPoint1727>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1728>
    bk = bk || bk;
    double ld0 = 316.4396776815351;
    bk = dk > dk;
    bk = !bk;
    on += dk;
    dk *= -1;
    Thought lo1 = Thought51.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2();
    Thought lo2 = Thought94.getInstance(dk, dk, dk, dk);
    boolean lb3 = false;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint1728>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1729>
    boolean lb0 = true;
    boolean lb1 = true;
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    dk = dk - dk;
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk *= -1;
    dk = dk - dk;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk > dk;
    if (bk) {
        bk = dk < dk;
        dk = dk + dk;
        for(int j=0; j<10; j++){
</cutPoint1729>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1730>
    on += dk;
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        dk = dk - dk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3();
        bk = !bk;
        boolean lb0 = false;
        bk = ok.m2(dk, dk, dk, dk);
        boolean lb1 = false;
        ok = ok.m4(bk, bk, bk, bk);
        double ld2 = 271.0812198291554;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        boolean lb3 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1730>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1731>
    for(int j=0; j<10; j++){
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1();
        bk = ok.m2(dk, dk, dk, dk);
        bk = bk || bk;
        bk = !bk;
        dk = ok.m3(bk, bk, bk, bk);
        dk *= -1;
        dk = dk + dk;
        on += dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        dk = dk + dk;
        for(int j=0; j<10; j++){
            bk = bk || bk;
</cutPoint1731>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1732>
    dk = dk - dk;
    dk = dk - dk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok);
        }
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    ok.m2();
    dk = dk + dk;
</cutPoint1732>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1733>
    ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
        boolean lb0 = true;
    bk = bk || bk;
    on -= dk;
    bk = !bk;
    dk = dk + dk;
    double ld1 = 544.7130091073186;
    bk = dk < dk;
        ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1733>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1734>
    boolean lb0 = false;
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb1 = true;
    bk = dk < dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1734>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1735>
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    dk = dk - dk;
    bk = !bk;
    dk = dk - dk;
    Thought lo1 = Thought19.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    boolean lb2 = false;
    double ld3 = 956.8747291077233;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    Thought lo5 = Thought16.getInstance();
    ok.m1(dk, dk, dk, dk);
    double ld6 = 23.026480617687614;
    Thought lo7 = Thought23.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1735>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1736>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    boolean lb0 = false;
    on += dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint1736>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1737>
    Thought lo0 = Thought64.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo1 = Thought56.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    dk = dk + dk;
    Thought lo3 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb4 = true;
    bk = bk || bk;
    bk = bk || bk;
</cutPoint1737>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1738>
    bk = dk < dk;
        boolean lb0 = true;
    ok.m1(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    Thought lo2 = Thought70.getInstance();
    Thought lo3 = Thought7.getInstance(dk, dk, dk, dk);
    boolean lb4 = false;
</cutPoint1738>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1739>
    dk *= -1;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    double ld0 = 133.9155837667545;
    Thought lo1 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought79.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    if (bk) {
        dk = ok.m3(bk, bk, bk, bk);
        bk = bk && bk;
        double ld4 = 139.53580147520952;
        on += dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        dk = dk - dk;
        if (bk) {
            dk = dk + dk;
            bk = bk || bk;
            boolean lb5 = true;
            dk *= -1;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1739>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1740>
    on += dk;
    bk = dk > dk;
    bk = dk > dk;
        dk *= -1;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    dk = dk + dk;
    ok.m1();
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    double ld1 = 390.5560790913338;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    on += dk;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    double ld3 = 931.3437131843218;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb4 = false;
</cutPoint1740>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1741>
        ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    on += dk;
    double ld0 = 843.5641136023257;
    dk *= -1;
    dk *= -1;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
    dk = dk - dk;
    double ld1 = 399.2173480744318;
    dk = ok.m3();
    dk = dk - dk;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk - dk;
        dk *= -1;
        double ld2 = 389.6401210145843;
        bk = bk && bk;
        on += dk;
        bk = bk && bk;
</cutPoint1741>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1742>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = bk && bk;
    dk = dk - dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 60.708109562060486;
    dk *= -1;
    bk = dk < dk;
    bk = !bk;
    bk = !bk;
    double ld2 = 87.52548416254656;
    bk = dk < dk;
    Thought lo3 = Thought20.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    ok.m1();
    on += dk;
    on += dk;
    Thought lo5 = Thought49.getInstance(dk, dk, dk, dk);
    bk = !bk;
</cutPoint1742>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1743>
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    dk = dk - dk;
    on -= dk;
    on -= dk;
    bk = bk || bk;
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    on += dk;
    bk = dk > dk;
    bk = dk < dk;
    on += dk;
</cutPoint1743>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1744>
    double ld0 = 992.5437590476329;
    dk = dk + dk;
    Thought lo1 = Thought56.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
    double ld2 = 901.341200873163;
    bk = bk || bk;
    dk = dk - dk;
    dk *= -1;
    bk = !bk;
    Thought lo3 = Thought48.getInstance();
    bk = bk || bk;
    Thought lo4 = Thought87.getInstance(dk, dk, dk, dk);
    boolean lb5 = false;
    Thought lo6 = Thought21.getInstance(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    boolean lb7 = false;
    dk = dk + dk;
    bk = dk > dk;
    double ld8 = 183.40244119228646;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1744>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1745>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
    dk *= -1;
    bk = dk < dk;
    ok.m3();
    double ld0 = 947.7499073840802;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    double ld1 = 631.3254351869062;
    double ld2 = 736.791100513509;
    boolean lb3 = false;
    dk = dk - dk;
    on += dk;
    dk *= -1;
    ok.m1(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    double ld4 = 390.6535734604243;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    on -= dk;
    dk = dk - dk;
</cutPoint1745>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1746>
    double ld0 = 882.593367097991;
    dk = dk + dk;
    boolean lb1 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    Thought lo2 = Thought92.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    bk = !bk;
        bk = bk || bk;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
</cutPoint1746>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1747>
    Thought lo0 = Thought8.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
        bk = !bk;
    bk = dk > dk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
</cutPoint1747>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1748>
    bk = dk < dk;
        dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
    bk = bk || bk;
        dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    dk *= -1;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    dk *= -1;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1748>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1749>
    dk = ok.m3();
        Thought lo0 = Thought73.getInstance(dk, dk, dk, dk);
    dk *= -1;
    boolean lb1 = false;
    bk = bk && bk;
    boolean lb2 = false;
        dk = ok.m3(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb3 = true;
    boolean lb4 = true;
    on += dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1749>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought50 extends Thought{
private static ArrayList<Thought50> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 877.5785042247279;
private double fd1 = 709.8249853254546;
private Thought fo0 = null;
private Thought fo1 = null;
Thought50 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought50 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought50 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought50 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought50 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought50 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought50 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought50 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought50 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought50 instance = new Thought50 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought50 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought50 instance = new Thought50 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought50 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought50 instance = new Thought50 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought50 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought50 instance = new Thought50 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought50 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought50 instance = new Thought50 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought50 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought50 instance = new Thought50 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought50 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought50 instance = new Thought50 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought50 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought50 instance = new Thought50 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1750>
    dk *= -1;
    bk = bk && bk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    double ld0 = 789.4939140190584;
    Thought lo1 = Thought2.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 929.9829943763282;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo4 = Thought38.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
        on -= dk;
</cutPoint1750>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1751>
    double ld0 = 121.45325714023691;
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = bk && bk;
    on += dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb1 = false;
    Thought lo2 = Thought38.getInstance(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb3 = false;
    boolean lb4 = false;
    dk = dk + dk;
</cutPoint1751>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1752>
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    on += dk;
    Thought lo0 = Thought31.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1752>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1753>
    bk = dk > dk;
    boolean lb0 = false;
    dk = dk + dk;
    boolean lb1 = true;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk > dk;
    on -= dk;
    ok.m3(ok, ok, ok, ok);
</cutPoint1753>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1754>
    bk = bk && bk;
    boolean lb0 = false;
    on -= dk;
    dk = dk + dk;
    Thought lo1 = Thought54.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint1754>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1755>
    Thought lo0 = Thought37.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought58.getInstance();
    boolean lb2 = true;
    bk = !bk;
    dk *= -1;
    boolean lb3 = false;
    boolean lb4 = true;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint1755>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1756>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    double ld1 = 359.4639215927228;
    boolean lb2 = true;
    boolean lb3 = false;
    dk = dk - dk;
    dk = dk + dk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint1756>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1757>
    bk = !bk;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
</cutPoint1757>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1758>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
        dk = dk - dk;
    on -= dk;
    bk = !bk;
    bk = bk || bk;
    dk = dk - dk;
    Thought lo0 = Thought46.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    on -= dk;
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok);
</cutPoint1758>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1759>
    bk = !bk;
    Thought lo0 = Thought2.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2();
    ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    double ld1 = 380.14459700329354;
    bk = !bk;
    if (bk) {
        dk = dk - dk;
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        bk = bk || bk;
        Thought lo2 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = false;
        double ld4 = 431.64414507152924;
        dk = dk - dk;
        bk = bk || bk;
        boolean lb5 = false;
        dk = dk + dk;
        dk = dk + dk;
        dk *= -1;
        Thought lo6 = Thought66.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb7 = true;
</cutPoint1759>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1760>
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    dk *= -1;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    boolean lb0 = true;
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4();
    bk = dk > dk;
</cutPoint1760>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1761>
    if (bk) {
        dk = dk - dk;
        dk *= -1;
        dk *= -1;
        dk = dk + dk;
        bk = dk < dk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
        bk = bk || bk;
        bk = bk || bk;
        ok.m2(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1761>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1762>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought17.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought98.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    double ld2 = 750.6032482994997;
</cutPoint1762>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1763>
    bk = bk && bk;
    dk = dk - dk;
    boolean lb0 = false;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo1 = Thought49.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    bk = bk || bk;
    boolean lb2 = false;
    double ld3 = 988.2396785827036;
    dk = dk - dk;
    Thought lo4 = Thought84.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    double ld5 = 406.8861998097083;
    bk = bk && bk;
    boolean lb6 = true;
    double ld7 = 128.81510369016198;
</cutPoint1763>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1764>
    double ld0 = 405.62363213766025;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 247.95324244545267;
    dk = dk - dk;
        double ld4 = 607.2133810846182;
    bk = bk && bk;
    double ld5 = 762.9736410951826;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb6 = false;
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        bk = !bk;
        dk = dk - dk;
</cutPoint1764>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1765>
    boolean lb0 = true;
    dk *= -1;
    Thought lo1 = Thought68.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3();
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
</cutPoint1765>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1766>
    double ld0 = 12.326149332874346;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    ok = ok.m4();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought64.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    boolean lb4 = false;
</cutPoint1766>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1767>
    double ld0 = 872.1147197950636;
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought70.getInstance();
    boolean lb2 = false;
    boolean lb3 = false;
    dk *= -1;
    bk = !bk;
    ok.m1(dk, dk, dk, dk);
    Thought lo4 = Thought0.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    Thought lo5 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    if (bk) {
</cutPoint1767>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1768>
        dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        Thought lo1 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = true;
        if (bk) {
            bk = bk || bk;
            Thought lo3 = Thought15.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            } else if (bk) {
            dk = ok.m3(ok, ok, ok, ok);
            boolean lb4 = false;
            bk = bk || bk;
            bk = dk > dk;
            bk = dk > dk;
</cutPoint1768>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1769>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld0 = 0.8603879459020853;
    boolean lb1 = true;
    double ld2 = 290.75495697512025;
    dk = dk - dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb3 = false;
    boolean lb4 = false;
    dk = dk + dk;
    bk = !bk;
</cutPoint1769>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1770>
    for(int j=0; j<10; j++){
        for(int j=0; j<10; j++){
            dk *= -1;
            bk = dk < dk;
            boolean lb0 = false;
            double ld1 = 141.6141067381429;
            ok = ok.m4(bk, bk, bk, bk);
            bk = dk < dk;
            bk = !bk;
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
            Thought lo2 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok);
            dk = dk - dk;
            on += dk;
            bk = dk > dk;
            bk = bk && bk;
            boolean lb3 = true;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk < dk;
            dk = ok.m3();
            bk = bk && bk;
            ok = ok.m4(dk, dk, dk, dk);
            bk = dk < dk;
            bk = bk || bk;
            boolean lb4 = true;
            dk *= -1;
            ok = ok.m4(bk, bk, bk, bk);
</cutPoint1770>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1771>
    dk = dk + dk;
    boolean lb0 = true;
    boolean lb1 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought25.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo3 = Thought17.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    dk = dk - dk;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo4 = Thought59.getInstance(dk, dk, dk, dk);
    on += dk;
    Thought lo5 = Thought48.getInstance(bk, bk, bk, bk);
    bk = !bk;
    double ld6 = 321.5254219985698;
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1771>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1772>
    bk = dk < dk;
    bk = dk > dk;
    dk *= -1;
    dk *= -1;
    dk = dk + dk;
    Thought lo0 = Thought80.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought90.getInstance();
    bk = ok.m2(dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
</cutPoint1772>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1773>
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    boolean lb0 = false;
    ok.m2(ok, ok, ok, ok);
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
        Thought lo1 = Thought22.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint1773>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1774>
    bk = bk || bk;
    boolean lb0 = true;
    dk = dk - dk;
    bk = !bk;
        bk = bk || bk;
    boolean lb1 = false;
        dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld2 = 3.261393535300509;
</cutPoint1774>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1775>
    dk = dk + dk;
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    bk = bk && bk;
        on -= dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld1 = 323.55433049830316;
    Thought lo2 = Thought78.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    bk = dk > dk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    on += dk;
    Thought lo4 = Thought68.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
</cutPoint1775>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1776>
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
    dk = dk - dk;
    dk *= -1;
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    boolean lb1 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    double ld2 = 467.89006994009236;
    bk = bk || bk;
</cutPoint1776>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1777>
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    boolean lb1 = true;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    double ld3 = 264.5359269124114;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    on += dk;
    ok.m1(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1777>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1778>
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought94.getInstance();
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb1 = false;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 313.15267237893295;
    bk = dk < dk;
</cutPoint1778>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1779>
    Thought lo0 = Thought61.getInstance(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb1 = true;
    double ld2 = 301.7306618666717;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    Thought lo3 = Thought70.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1779>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1780>
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    on += dk;
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb2 = false;
    dk *= -1;
    Thought lo3 = Thought49.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
</cutPoint1780>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1781>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    dk = dk + dk;
    bk = ok.m2();
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought48.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    double ld1 = 103.88056998932156;
    double ld2 = 650.8842340461888;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = dk < dk;
    bk = bk || bk;
    dk = ok.m3();
    bk = dk < dk;
    dk = dk - dk;
    on -= dk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1781>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1782>
    boolean lb0 = false;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 301.21420926757327;
    bk = !bk;
    double ld2 = 44.966172175838416;
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    Thought lo3 = Thought10.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4();
        boolean lb4 = false;
    boolean lb5 = false;
    bk = bk && bk;
        bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
</cutPoint1782>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1783>
    dk *= -1;
    Thought lo0 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = false;
    bk = bk || bk;
    Thought lo2 = Thought30.getInstance();
    bk = bk || bk;
    bk = dk > dk;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    Thought lo3 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1783>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1784>
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    on -= dk;
    ok.m2();
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = !bk;
        ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
    bk = !bk;
    Thought lo3 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1784>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought51 extends Thought{
private static ArrayList<Thought51> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 734.254209672697;
private double fd1 = 664.4868037311046;
private Thought fo0 = null;
private Thought fo1 = null;
Thought51 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought51 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought51 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought51 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought51 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought51 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought51 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought51 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought51 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought51 instance = new Thought51 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought51 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought51 instance = new Thought51 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought51 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought51 instance = new Thought51 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought51 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought51 instance = new Thought51 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought51 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought51 instance = new Thought51 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought51 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought51 instance = new Thought51 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought51 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought51 instance = new Thought51 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought51 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought51 instance = new Thought51 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1785>
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 341.5536086234567;
    dk = dk - dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    dk *= -1;
    for(int j=0; j<10; j++){
        boolean lb1 = true;
        on += dk;
        double ld2 = 710.9104681782841;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk);
        double ld3 = 42.73435153809254;
        dk = dk + dk;
        dk = dk + dk;
        double ld4 = 899.3461261565556;
        double ld5 = 12.454331347316705;
        ok.m1(bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint1785>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1786>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 151.1575535889621;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    dk = dk + dk;
    boolean lb1 = true;
    dk = dk - dk;
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk + dk;
        bk = bk && bk;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1786>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1787>
    bk = bk && bk;
    double ld0 = 243.92682761813413;
    bk = ok.m2();
        dk = dk - dk;
    boolean lb1 = false;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    bk = !bk;
    if (bk) {
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk < dk;
        bk = dk > dk;
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        bk = !bk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        boolean lb2 = false;
        bk = dk < dk;
        Thought lo3 = Thought60.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
</cutPoint1787>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1788>
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb1 = true;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb2 = true;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk - dk;
    Thought lo3 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = bk && bk;
</cutPoint1788>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1789>
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    bk = dk > dk;
    dk = dk + dk;
    Thought lo0 = Thought39.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
</cutPoint1789>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1790>
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    on -= dk;
    dk = dk + dk;
    ok.m1();
    boolean lb0 = false;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    Thought lo1 = Thought3.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    Thought lo2 = Thought2.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
</cutPoint1790>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1791>
    ok = ok.m4(ok, ok, ok, ok);
        on -= dk;
    dk = dk + dk;
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    bk = dk > dk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1791>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1792>
    boolean lb0 = false;
    bk = !bk;
    bk = !bk;
    boolean lb1 = false;
        dk = dk + dk;
    if (bk) {
        dk = dk + dk;
        boolean lb2 = true;
        double ld3 = 864.3285023878462;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld4 = 897.4388890193777;
</cutPoint1792>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1793>
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb0 = false;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
</cutPoint1793>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1794>
    on -= dk;
    bk = dk < dk;
    dk = dk + dk;
    double ld0 = 618.8271145958574;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought60.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1794>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1795>
    ok.m2();
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
        dk *= -1;
    Thought lo0 = Thought7.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 294.0843229294924;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb3 = false;
    on += dk;
    Thought lo4 = Thought9.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = !bk;
    </cutPoint1795>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1796>
        dk = dk + dk;
    dk *= -1;
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    boolean lb0 = false;
    bk = dk > dk;
</cutPoint1796>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1797>
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        bk = dk < dk;
        Thought lo0 = Thought91.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought53.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        if (bk) {
            dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1797>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1798>
    double ld0 = 315.5331082597265;
    double ld1 = 915.509416040673;
    ok = ok.m4();
    bk = dk < dk;
    double ld2 = 360.16059300050216;
    if (bk) {
        boolean lb3 = true;
        bk = bk || bk;
        boolean lb4 = false;
        dk = ok.m3(dk, dk, dk, dk);
        boolean lb5 = true;
        dk *= -1;
        bk = dk > dk;
        dk = ok.m3(bk, bk, bk, bk);
</cutPoint1798>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1799>
    Thought lo0 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk || bk;
    bk = bk && bk;
    Thought lo1 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 621.3809052747262;
    boolean lb3 = false;
    on += dk;
    double ld4 = 718.8780161937202;
    boolean lb5 = true;
    on += dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo6 = Thought89.getInstance(ok, ok, ok, ok);
    boolean lb7 = false;
    on += dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1799>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1800>
    dk = dk + dk;
    bk = bk && bk;
    ok.m2();
    bk = bk || bk;
    double ld0 = 557.3093764679185;
    dk = dk - dk;
    Thought lo1 = Thought31.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    on -= dk;
    bk = dk < dk;
    if (bk) {
        dk *= -1;
        bk = ok.m2(bk, bk, bk, bk);
        on -= dk;
        bk = !bk;
        bk = dk > dk;
        double ld2 = 131.1087875780656;
        on += dk;
        boolean lb3 = true;
</cutPoint1800>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1801>
    dk *= -1;
    boolean lb0 = false;
    dk = dk + dk;
    boolean lb1 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    double ld2 = 733.0889026183182;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
</cutPoint1801>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1802>
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 897.5653637450076;
    on += dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2();
    Thought lo3 = Thought18.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint1802>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1803>
    bk = bk && bk;
        dk = dk + dk;
    double ld0 = 60.20448747453622;
    double ld1 = 418.0708166327393;
        bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    if (bk) {
        } else if (bk) {
        boolean lb2 = false;
        dk *= -1;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint1803>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1804>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
        ok = ok.m4();
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = dk < dk;
        double ld0 = 622.2236714698846;
        bk = bk && bk;
        bk = dk < dk;
        bk = dk > dk;
        bk = dk > dk;
        dk = dk + dk;
</cutPoint1804>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1805>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb0 = false;
    on += dk;
    Thought lo1 = Thought83.getInstance(ok, ok, ok, ok);
    dk *= -1;
    dk *= -1;
    bk = bk || bk;
    bk = !bk;
    dk = dk - dk;
    boolean lb2 = false;
    double ld3 = 985.72161482234;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    bk = bk && bk;
    double ld4 = 49.18438764919541;
        on -= dk;
    bk = dk < dk;
    ok.m2();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint1805>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1806>
    ok = ok.m4(bk, bk, bk, bk);
        Thought lo0 = Thought62.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
    bk = !bk;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        boolean lb1 = false;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb2 = true;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
        dk *= -1;
</cutPoint1806>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1807>
    dk *= -1;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld0 = 416.88383250937744;
    on -= dk;
    dk = ok.m3();
    boolean lb1 = false;
    boolean lb2 = true;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    bk = !bk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    double ld3 = 900.7205811621369;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
</cutPoint1807>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1808>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
    bk = bk || bk;
    bk = bk || bk;
    dk = dk - dk;
    ok.m3();
    boolean lb0 = true;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint1808>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1809>
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    bk = !bk;
    bk = dk > dk;
    boolean lb0 = true;
    Thought lo1 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = dk > dk;
    bk = bk || bk;
    dk = dk + dk;
    dk = dk + dk;
    boolean lb2 = true;
    double ld3 = 801.3503763378139;
    Thought lo4 = Thought95.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought62.getInstance();
    double ld6 = 279.41035084742833;
</cutPoint1809>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1810>
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought95.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        if (bk) {
            dk *= -1;
            boolean lb2 = false;
            boolean lb3 = false;
            boolean lb4 = false;
            dk = dk + dk;
            bk = dk < dk;
            double ld5 = 941.3115594145761;
            bk = dk > dk;
            dk = ok.m3();
</cutPoint1810>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1811>
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = !bk;
        boolean lb1 = true;
        double ld2 = 645.7700858612209;
    Thought lo3 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb5 = true;
    bk = !bk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
        on -= dk;
        dk *= -1;
        for(int j=0; j<10; j++){
            bk = dk > dk;
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
            on += dk;
</cutPoint1811>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1812>
    bk = dk < dk;
    ok = ok.m4();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
        ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought69.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
        on -= dk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1812>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1813>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb0 = false;
    bk = bk && bk;
    bk = bk || bk;
    bk = bk && bk;
    boolean lb1 = true;
    bk = dk > dk;
    boolean lb2 = true;
    on += dk;
    ok.m1(ok, ok, ok, ok);
    boolean lb3 = false;
    dk *= -1;
</cutPoint1813>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1814>
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    bk = dk < dk;
    Thought lo0 = Thought81.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk *= -1;
    double ld1 = 652.0376208677437;
    Thought lo2 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
</cutPoint1814>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1815>
    double ld0 = 403.61948959729654;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought64.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    bk = bk && bk;
    boolean lb2 = false;
    double ld3 = 559.9932286512595;
    on += dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk || bk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought23.getInstance();
</cutPoint1815>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1816>
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    double ld0 = 783.7779974565075;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought92.getInstance(ok, ok, ok, ok);
    on += dk;
    if (bk) {
        Thought lo3 = Thought30.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
        bk = ok.m2(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1816>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1817>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo0 = Thought13.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought43.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo2 = Thought78.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 54.94134474847198;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
        bk = bk || bk;
    bk = bk && bk;
    on -= dk;
    dk *= -1;
</cutPoint1817>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1818>
    double ld0 = 126.77276644273671;
        dk *= -1;
    bk = bk && bk;
    Thought lo1 = Thought94.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = bk && bk;
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    on += dk;
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4();
    boolean lb3 = false;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint1818>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1819>
    bk = dk < dk;
    double ld0 = 249.07890278790572;
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo1 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    bk = dk > dk;
    boolean lb2 = false;
    boolean lb3 = true;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 875.8102278321699;
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
</cutPoint1819>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought52 extends Thought{
private static ArrayList<Thought52> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 55.457367748971535;
private double fd1 = 365.29707121452395;
private Thought fo0 = null;
private Thought fo1 = null;
Thought52 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought52 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought52 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought52 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought52 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought52 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought52 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought52 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought52 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought52 instance = new Thought52 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought52 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought52 instance = new Thought52 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought52 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought52 instance = new Thought52 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought52 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought52 instance = new Thought52 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought52 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought52 instance = new Thought52 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought52 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought52 instance = new Thought52 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought52 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought52 instance = new Thought52 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought52 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought52 instance = new Thought52 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1820>
    boolean lb0 = false;
    double ld1 = 53.32619920373451;
    dk *= -1;
    for(int j=0; j<10; j++){
        dk = ok.m3();
        on += dk;
        bk = dk > dk;
        boolean lb2 = true;
        dk *= -1;
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk > dk;
        ok = ok.m4(bk, bk, bk, bk);
        double ld3 = 578.0332447894974;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        bk = bk && bk;
</cutPoint1820>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1821>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    Thought lo0 = Thought0.getInstance(ok, ok, ok, ok);
    on += dk;
    bk = !bk;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        Thought lo1 = Thought97.getInstance();
        dk = dk - dk;
</cutPoint1821>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1822>
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
</cutPoint1822>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1823>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 974.7931291427221;
    Thought lo1 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        if (bk) {
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk - dk;
            dk = dk - dk;
            bk = !bk;
            bk = bk && bk;
            double ld2 = 570.1174071175583;
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            boolean lb3 = false;
            boolean lb4 = false;
            bk = dk < dk;
            on += dk;
            dk *= -1;
</cutPoint1823>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1824>
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    double ld0 = 771.4500098939147;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    boolean lb1 = false;
    Thought lo2 = Thought38.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1824>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1825>
    on += dk;
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    double ld0 = 736.7619893970497;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought15.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    dk = dk - dk;
    Thought lo4 = Thought21.getInstance();
    bk = !bk;
    bk = bk && bk;
    Thought lo5 = Thought59.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    double ld6 = 702.830824147187;
</cutPoint1825>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1826>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 784.966168315491;
    bk = dk > dk;
    boolean lb2 = true;
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    double ld3 = 348.17608791744;
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 345.62072959159553;
    dk *= -1;
    ok.m2();
    bk = !bk;
    on += dk;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    double ld5 = 747.5053636685758;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint1826>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1827>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    double ld0 = 40.227634637270796;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    bk = bk || bk;
    Thought lo1 = Thought49.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
</cutPoint1827>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1828>
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    double ld1 = 132.66121933241484;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = dk < dk;
    bk = dk < dk;
    Thought lo2 = Thought55.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk < dk;
    boolean lb3 = false;
    double ld4 = 174.99637383364322;
    bk = dk > dk;
    bk = dk < dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    Thought lo5 = Thought40.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    on -= dk;
    on += dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
</cutPoint1828>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1829>
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo0 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    Thought lo2 = Thought60.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
    bk = !bk;
    bk = !bk;
    ok.m2();
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint1829>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1830>
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    dk *= -1;
    bk = bk && bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo1 = Thought91.getInstance();
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
        dk = dk - dk;
        dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb2 = true;
    bk = dk < dk;
</cutPoint1830>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1831>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    bk = !bk;
    boolean lb0 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought8.getInstance(ok, ok, ok, ok);
    Thought lo2 = Thought48.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    Thought lo3 = Thought26.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
</cutPoint1831>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1832>
    on -= dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 105.875271425209;
    Thought lo1 = Thought17.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb2 = true;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4();
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    </cutPoint1832>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1833>
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
        bk = !bk;
    dk = dk - dk;
    double ld0 = 538.0446828936686;
    ok.m1(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    dk = dk - dk;
    double ld1 = 835.2091998073715;
</cutPoint1833>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1834>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    Thought lo0 = Thought36.getInstance(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 806.1476492724872;
    double ld3 = 793.3622370243968;
</cutPoint1834>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1835>
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb0 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 211.1441702737101;
    bk = bk && bk;
    bk = bk || bk;
    boolean lb2 = true;
    bk = dk > dk;
    boolean lb3 = true;
    dk = ok.m3();
    Thought lo4 = Thought98.getInstance(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb5 = false;
        boolean lb6 = false;
</cutPoint1835>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1836>
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 963.4323065025643;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought91.getInstance(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint1836>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1837>
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought78.getInstance(ok, ok, ok, ok);
    Thought lo2 = Thought5.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo3 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    double ld4 = 559.3599845764588;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    Thought lo5 = Thought69.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1837>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1838>
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    double ld0 = 605.7607743187579;
    bk = bk || bk;
    dk *= -1;
    boolean lb1 = true;
    dk *= -1;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    bk = ok.m2(bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
</cutPoint1838>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1839>
    boolean lb0 = false;
    Thought lo1 = Thought74.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    bk = bk && bk;
    bk = dk < dk;
    bk = dk > dk;
    boolean lb2 = false;
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint1839>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1840>
    Thought lo0 = Thought20.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
    on -= dk;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = bk || bk;
    bk = dk < dk;
    ok.m3();
    dk = dk + dk;
    boolean lb1 = false;
</cutPoint1840>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1841>
    ok.m1(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    double ld0 = 239.8004552015495;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        Thought lo1 = Thought91.getInstance();
        bk = dk > dk;
</cutPoint1841>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1842>
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought50.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought49.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk > dk;
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    ok.m1();
    boolean lb2 = false;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    dk = dk - dk;
    Thought lo3 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo4 = Thought10.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1842>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1843>
    Thought lo0 = Thought93.getInstance();
    dk = dk + dk;
    bk = dk < dk;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = false;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint1843>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1844>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    if (bk) {
        bk = !bk;
        bk = bk || bk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok);
        dk *= -1;
        dk = dk - dk;
        bk = !bk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2();
        on += dk;
        if (bk) {
            ok = ok.m4(dk, dk, dk, dk);
            bk = bk && bk;
            boolean lb0 = false;
            ok = ok.m4(bk, bk, bk, bk);
            dk = dk - dk;
</cutPoint1844>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1845>
    dk = dk + dk;
    dk *= -1;
    bk = bk || bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 577.5775775769266;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    bk = !bk;
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2();
        if (bk) {
            dk *= -1;
</cutPoint1845>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1846>
    bk = bk || bk;
    dk = dk + dk;
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    dk = dk - dk;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = bk && bk;
    bk = !bk;
        bk = !bk;
    dk = dk - dk;
    boolean lb0 = false;
    boolean lb1 = false;
    if (bk) {
        bk = !bk;
        bk = dk < dk;
        bk = bk || bk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        on -= dk;
        Thought lo2 = Thought40.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld3 = 705.8124264088938;
</cutPoint1846>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1847>
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk || bk;
    boolean lb0 = true;
    on += dk;
    on -= dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    bk = dk > dk;
    double ld1 = 201.5852136115916;
    bk = bk || bk;
    ok = ok.m4();
    double ld2 = 933.4803340842043;
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk);
    on -= dk;
    Thought lo3 = Thought17.getInstance(bk, bk, bk, bk);
    double ld4 = 831.8696750403597;
    on += dk;
</cutPoint1847>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1848>
    Thought lo0 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 239.36986518938997;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought28.getInstance();
    bk = bk || bk;
    dk = dk + dk;
    Thought lo4 = Thought61.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb5 = false;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb6 = false;
        boolean lb7 = true;
</cutPoint1848>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1849>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    double ld0 = 755.9584073374269;
    boolean lb1 = false;
    boolean lb2 = false;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    Thought lo4 = Thought48.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    double ld5 = 459.4730407500029;
    on += dk;
    bk = bk || bk;
    boolean lb6 = true;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
    boolean lb7 = false;
    bk = dk < dk;
    on += dk;
    bk = dk > dk;
    dk *= -1;
    on += dk;
    bk = dk > dk;
</cutPoint1849>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1850>
    if (bk) {
        boolean lb0 = true;
        dk = ok.m3(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = !bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 664.738856204008;
        on -= dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought74.getInstance();
        bk = ok.m2(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1850>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1851>
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought27.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    bk = bk || bk;
    boolean lb2 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    Thought lo4 = Thought81.getInstance();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    bk = !bk;
    boolean lb5 = false;
    Thought lo6 = Thought28.getInstance(bk, bk, bk, bk);
    if (bk) {
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
</cutPoint1851>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1852>
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    ok.m2();
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
    ok.m2(bk, bk, bk, bk);
</cutPoint1852>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1853>
    on -= dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 409.7761451533429;
    double ld1 = 736.0329791905543;
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    bk = !bk;
    bk = dk < dk;
    on -= dk;
    ok.m1(dk, dk, dk, dk);
    dk *= -1;
    ok.m2(bk, bk, bk, bk);
    boolean lb2 = false;
        dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
</cutPoint1853>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1854>
    Thought lo0 = Thought16.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    double ld1 = 259.85818989892016;
    on += dk;
    bk = dk > dk;
    ok = ok.m4();
    bk = dk < dk;
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    bk = !bk;
    boolean lb2 = true;
    on += dk;
    ok.m1(bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought31.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1854>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought53 extends Thought{
private static ArrayList<Thought53> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 52.380394375641956;
private double fd1 = 521.9937566860142;
private Thought fo0 = null;
private Thought fo1 = null;
Thought53 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought53 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought53 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought53 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought53 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought53 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought53 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought53 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought53 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought53 instance = new Thought53 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought53 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought53 instance = new Thought53 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought53 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought53 instance = new Thought53 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought53 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought53 instance = new Thought53 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought53 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought53 instance = new Thought53 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought53 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought53 instance = new Thought53 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought53 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought53 instance = new Thought53 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought53 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought53 instance = new Thought53 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1855>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    boolean lb0 = true;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 808.5747294526425;
        bk = dk > dk;
    bk = bk || bk;
    boolean lb3 = false;
    dk = dk - dk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    dk = dk + dk;
    boolean lb4 = true;
    boolean lb5 = false;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    double ld6 = 467.03788836046937;
        bk = bk || bk;
    dk *= -1;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb7 = true;
</cutPoint1855>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1856>
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    if (bk) {
        on += dk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        bk = bk || bk;
        double ld0 = 175.72276867470887;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1856>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1857>
    ok = ok.m4();
    bk = !bk;
    boolean lb0 = false;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    bk = !bk;
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
</cutPoint1857>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1858>
    bk = bk || bk;
    bk = bk || bk;
    bk = dk < dk;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
            bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1858>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1859>
    bk = bk || bk;
    bk = !bk;
    bk = bk && bk;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 1000.7368567667378;
    Thought lo1 = Thought94.getInstance(ok, ok, ok, ok);
    Thought lo2 = Thought27.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    bk = dk > dk;
    double ld3 = 581.1094372855308;
    ok = ok.m4();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo4 = Thought18.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 525.4152790886075;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1859>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1860>
    double ld0 = 558.6303857073345;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    dk *= -1;
    on -= dk;
</cutPoint1860>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1861>
    bk = dk > dk;
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb0 = true;
        double ld1 = 327.95578879627556;
        bk = dk > dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        if (bk) {
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = dk - dk;
            } else {
            if (bk) {
                bk = ok.m2(ok, ok, ok, ok);
                ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
                dk *= -1;
                Thought lo2 = Thought87.getInstance();
</cutPoint1861>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1862>
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    on += dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = ok.m3();
    dk *= -1;
        dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld2 = 820.1957887614848;
    bk = dk < dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1862>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1863>
    dk = dk - dk;
    on -= dk;
    boolean lb0 = true;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    for(int j=0; j<10; j++){
        boolean lb3 = true;
        bk = dk < dk;
        dk *= -1;
        ok.m3(ok, ok, ok, ok);
        bk = dk < dk;
        double ld4 = 535.5832542017051;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        if (bk) {
            ok = ok.m4();
            bk = bk && bk;
            bk = dk < dk;
            bk = !bk;
</cutPoint1863>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1864>
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    ok.m1(bk, bk, bk, bk);
    dk = dk - dk;
    on -= dk;
    boolean lb0 = true;
    Thought lo1 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    dk = dk + dk;
    dk *= -1;
    bk = dk > dk;
    bk = bk && bk;
    for(int j=0; j<10; j++){
</cutPoint1864>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1865>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2();
        dk = dk + dk;
        bk = ok.m2(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        double ld0 = 145.04904293127024;
        dk = dk + dk;
        bk = dk > dk;
        on -= dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = false;
        boolean lb2 = true;
</cutPoint1865>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1866>
    if (bk) {
        bk = bk && bk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        bk = dk > dk;
        boolean lb0 = false;
        dk = ok.m3(dk, dk, dk, dk);
</cutPoint1866>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1867>
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk < dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = !bk;
    bk = dk > dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    bk = dk < dk;
    double ld2 = 694.2789376699965;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    boolean lb5 = false;
    double ld6 = 154.42018704464775;
    bk = dk > dk;
</cutPoint1867>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1868>
    for(int j=0; j<10; j++){
        double ld0 = 628.9668519453152;
        }
    bk = !bk;
    bk = dk > dk;
    double ld1 = 993.5236898215784;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought24.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = true;
        bk = dk > dk;
    on -= dk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    on -= dk;
    boolean lb4 = true;
</cutPoint1868>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1869>
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    double ld0 = 795.0834132904711;
    dk = dk + dk;
    dk = dk + dk;
    Thought lo1 = Thought55.getInstance(ok, ok, ok, ok);
    double ld2 = 214.99944645830342;
    boolean lb3 = true;
    on += dk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    bk = !bk;
    Thought lo4 = Thought56.getInstance(dk, dk, dk, dk);
</cutPoint1869>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1870>
    bk = bk || bk;
    dk = dk - dk;
    double ld0 = 590.9737257797385;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
</cutPoint1870>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1871>
    bk = dk < dk;
    on -= dk;
    dk = dk - dk;
    Thought lo0 = Thought75.getInstance(bk, bk, bk, bk);
    Thought lo1 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    boolean lb2 = true;
    bk = dk < dk;
    boolean lb3 = true;
    on += dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
    Thought lo4 = Thought68.getInstance(dk, dk, dk, dk);
</cutPoint1871>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1872>
    ok.m2(bk, bk, bk, bk);
    on -= dk;
    Thought lo0 = Thought74.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought74.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk < dk;
    Thought lo3 = Thought94.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    ok.m1();
    ok.m1(dk, dk, dk, dk);
    boolean lb4 = false;
    ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        dk = dk + dk;
        on += dk;
</cutPoint1872>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1873>
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 153.33524073620197;
    dk = dk - dk;
    double ld1 = 630.4872257818777;
    dk = dk - dk;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk && bk;
</cutPoint1873>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1874>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb0 = false;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    boolean lb1 = true;
    bk = bk || bk;
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld2 = 643.3360760751051;
    bk = dk > dk;
</cutPoint1874>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1875>
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought59.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought45.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    Thought lo2 = Thought75.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 449.1742366179234;
    dk = dk + dk;
    bk = !bk;
    double ld4 = 513.120119350863;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1875>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1876>
    bk = dk < dk;
    ok = ok.m4();
    boolean lb0 = true;
        dk *= -1;
    double ld1 = 100.77684721736375;
    dk = dk + dk;
    bk = bk && bk;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok);
</cutPoint1876>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1877>
    bk = dk > dk;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = true;
        bk = dk < dk;
        ok = ok.m4();
        double ld1 = 380.57827960967956;
        ok = ok.m4(dk, dk, dk, dk);
        double ld2 = 877.3195768120903;
        for(int j=0; j<10; j++){
            ok = ok.m4(bk, bk, bk, bk);
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk || bk;
            bk = bk && bk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            on += dk;
            ok = ok.m4(ok, ok, ok, ok);
            boolean lb3 = false;
            bk = bk && bk;
            bk = dk > dk;
            bk = bk && bk;
            bk = bk && bk;
            }
</cutPoint1877>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1878>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    boolean lb0 = true;
    ok.m1(dk, dk, dk, dk);
    Thought lo1 = Thought27.getInstance(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    dk = dk - dk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    Thought lo2 = Thought56.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        double ld3 = 828.5014764454388;
        bk = ok.m2();
        boolean lb4 = false;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo5 = Thought88.getInstance(bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        dk = dk - dk;
</cutPoint1878>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1879>
    boolean lb0 = true;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk > dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    Thought lo1 = Thought31.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    bk = !bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld4 = 49.03837041801145;
    boolean lb5 = true;
    Thought lo6 = Thought7.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    bk = bk && bk;
</cutPoint1879>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1880>
        boolean lb0 = true;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1880>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1881>
    for(int j=0; j<10; j++){
        Thought lo0 = Thought70.getInstance();
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk > dk;
        Thought lo1 = Thought74.getInstance(bk, bk, bk, bk);
        bk = bk && bk;
        on -= dk;
        dk = dk + dk;
        double ld2 = 343.87451988698126;
        boolean lb3 = false;
        Thought lo4 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        dk = dk + dk;
        bk = bk && bk;
        bk = bk && bk;
</cutPoint1881>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1882>
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4();
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        boolean lb0 = true;
        bk = ok.m2(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought98.getInstance();
        dk = ok.m3(dk, dk, dk, dk);
        dk *= -1;
        boolean lb2 = false;
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk || bk;
        for(int j=0; j<10; j++){
</cutPoint1882>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1883>
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk - dk;
    bk = dk > dk;
    Thought lo2 = Thought93.getInstance(ok, ok, ok, ok);
    boolean lb3 = false;
    double ld4 = 529.915921082025;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 158.85745462099052;
    dk = dk - dk;
    dk *= -1;
    dk = dk + dk;
    boolean lb6 = false;
    bk = ok.m2();
    Thought lo7 = Thought36.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    Thought lo8 = Thought16.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo9 = Thought0.getInstance(ok, ok, ok, ok);
</cutPoint1883>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1884>
    dk = dk - dk;
    bk = bk && bk;
    double ld0 = 216.06420790345783;
    bk = dk > dk;
    bk = !bk;
    Thought lo1 = Thought50.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    bk = !bk;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo2 = Thought21.getInstance(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1884>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1885>
    bk = dk < dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    boolean lb0 = true;
        double ld1 = 561.4270008277646;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    dk = dk + dk;
</cutPoint1885>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1886>
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 744.3929695159973;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        dk = ok.m3();
</cutPoint1886>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1887>
    bk = bk || bk;
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 258.42063741455104;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1887>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1888>
    bk = !bk;
    on += dk;
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought52.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    boolean lb1 = true;
    bk = bk || bk;
    bk = ok.m2();
</cutPoint1888>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1889>
    dk *= -1;
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb0 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
</cutPoint1889>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought54 extends Thought{
private static ArrayList<Thought54> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 280.18203099576647;
private double fd1 = 387.8540697031217;
private Thought fo0 = null;
private Thought fo1 = null;
Thought54 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought54 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought54 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought54 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought54 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought54 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought54 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought54 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought54 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought54 instance = new Thought54 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought54 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought54 instance = new Thought54 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought54 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought54 instance = new Thought54 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought54 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought54 instance = new Thought54 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought54 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought54 instance = new Thought54 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought54 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought54 instance = new Thought54 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought54 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought54 instance = new Thought54 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought54 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought54 instance = new Thought54 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1890>
    double ld0 = 731.3329308848798;
    dk *= -1;
    dk *= -1;
    boolean lb1 = true;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        dk = dk + dk;
        double ld2 = 490.2659985672176;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        Thought lo3 = Thought38.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk < dk;
        dk = dk - dk;
        double ld4 = 835.6579868640795;
        bk = ok.m2();
        bk = ok.m2(dk, dk, dk, dk);
        ok.m2(bk, bk, bk, bk);
        bk = !bk;
        boolean lb5 = true;
        dk *= -1;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
</cutPoint1890>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1891>
    double ld0 = 135.5573572848837;
    dk = dk - dk;
    dk = dk + dk;
    boolean lb1 = false;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
        bk = !bk;
    bk = !bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        double ld2 = 945.2949748445295;
        Thought lo3 = Thought52.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        dk = ok.m3();
        on -= dk;
</cutPoint1891>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1892>
    bk = bk || bk;
    Thought lo0 = Thought53.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo1 = Thought79.getInstance(bk, bk, bk, bk);
    double ld2 = 182.7353832175808;
    on -= dk;
    Thought lo3 = Thought86.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    boolean lb4 = false;
    double ld5 = 835.6826109598511;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    on -= dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    if (bk) {
        double ld6 = 236.53568031105738;
</cutPoint1892>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1893>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = true;
    bk = bk && bk;
    bk = bk || bk;
    boolean lb2 = false;
    Thought lo3 = Thought66.getInstance();
    bk = bk || bk;
    Thought lo4 = Thought49.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    boolean lb5 = false;
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1893>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1894>
    bk = !bk;
    bk = !bk;
    on += dk;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    Thought lo0 = Thought49.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    if (bk) {
</cutPoint1894>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1895>
    ok.m2();
    dk = dk + dk;
    Thought lo0 = Thought13.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    Thought lo1 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    double ld2 = 901.8419869203763;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        Thought lo3 = Thought9.getInstance(ok, ok, ok, ok);
        if (bk) {
            bk = bk || bk;
            boolean lb4 = false;
</cutPoint1895>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1896>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2();
    ok.m3(dk, dk, dk, dk);
    double ld0 = 904.8774494824056;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought44.getInstance();
    on -= dk;
    boolean lb2 = false;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 114.48584812205466;
    boolean lb4 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1896>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1897>
    double ld0 = 365.5756852249316;
    bk = bk || bk;
    dk = dk + dk;
    on += dk;
    ok.m3(ok, ok, ok, ok);
    boolean lb1 = true;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    boolean lb2 = false;
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
</cutPoint1897>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1898>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 396.195082126911;
    dk = dk - dk;
    dk = dk + dk;
    bk = dk < dk;
    boolean lb1 = false;
    dk *= -1;
    boolean lb2 = true;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = dk < dk;
    Thought lo4 = Thought24.getInstance(ok, ok, ok, ok);
    bk = !bk;
    on -= dk;
    Thought lo5 = Thought80.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
    boolean lb6 = true;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo7 = Thought48.getInstance(bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    Thought lo8 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1898>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1899>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 134.66206687656427;
    dk = dk + dk;
    bk = bk && bk;
    boolean lb3 = false;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo5 = Thought68.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    double ld6 = 509.0121371307891;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    double ld7 = 996.6131063161566;
    bk = bk || bk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo8 = Thought70.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1899>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1900>
    bk = dk > dk;
    on -= dk;
    double ld0 = 241.6353675061082;
    bk = bk || bk;
    boolean lb1 = true;
    ok = ok.m4();
    boolean lb2 = false;
    Thought lo3 = Thought34.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld4 = 641.832754662108;
    bk = bk || bk;
    bk = !bk;
    boolean lb5 = true;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    Thought lo6 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb7 = false;
    dk *= -1;
</cutPoint1900>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1901>
    bk = dk > dk;
        dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    on -= dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = true;
    bk = bk || bk;
    boolean lb2 = false;
    bk = !bk;
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb4 = true;
    bk = bk && bk;
    bk = bk || bk;
    Thought lo5 = Thought4.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
</cutPoint1901>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1902>
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        bk = ok.m2(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought50.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        dk = dk + dk;
        dk = dk - dk;
</cutPoint1902>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1903>
    dk = dk - dk;
    on += dk;
    bk = dk < dk;
        bk = dk < dk;
    dk *= -1;
    Thought lo0 = Thought65.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = dk < dk;
    bk = bk || bk;
    dk = dk + dk;
    bk = bk && bk;
    boolean lb2 = false;
</cutPoint1903>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1904>
    bk = bk || bk;
    on -= dk;
    on -= dk;
    bk = bk || bk;
    bk = dk > dk;
    dk = dk - dk;
    bk = bk && bk;
    bk = ok.m2();
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        boolean lb0 = true;
    dk = dk + dk;
</cutPoint1904>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1905>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    Thought lo0 = Thought85.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    if (bk) {
        ok = ok.m4();
        bk = ok.m2(dk, dk, dk, dk);
        bk = bk && bk;
        boolean lb1 = true;
        dk = ok.m3(bk, bk, bk, bk);
        } else {
        Thought lo2 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = false;
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint1905>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1906>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    Thought lo0 = Thought76.getInstance();
    dk = dk + dk;
    Thought lo1 = Thought29.getInstance(dk, dk, dk, dk);
    if (bk) {
        bk = ok.m2(bk, bk, bk, bk);
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        boolean lb2 = false;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        on += dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        } else {
        bk = dk < dk;
        for(int j=0; j<10; j++){
            dk = dk + dk;
            dk = dk + dk;
            bk = ok.m2(ok, ok, ok, ok);
            bk = dk > dk;
            dk = dk - dk;
            bk = dk < dk;
            dk *= -1;
            bk = bk || bk;
            dk *= -1;
            bk = bk || bk;
</cutPoint1906>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1907>
    dk = dk + dk;
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
        dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    boolean lb0 = false;
    dk *= -1;
    on += dk;
    ok = ok.m4();
    for(int j=0; j<10; j++){
        bk = bk || bk;
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint1907>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1908>
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
        dk = dk - dk;
        bk = bk && bk;
        boolean lb0 = true;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        bk = dk < dk;
        Thought lo1 = Thought70.getInstance(dk, dk, dk, dk);
        bk = dk > dk;
        ok.m3(bk, bk, bk, bk);
        on -= dk;
        boolean lb2 = false;
        bk = !bk;
        double ld3 = 992.2553673749808;
        dk *= -1;
        Thought lo4 = Thought0.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1908>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1909>
    dk = dk - dk;
    boolean lb0 = false;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
    bk = bk && bk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok);
    boolean lb2 = true;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld3 = 236.5154204706188;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    dk = dk - dk;
    bk = !bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1909>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1910>
    bk = bk || bk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok);
    double ld0 = 737.4778504002854;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    ok.m1();
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo2 = Thought56.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    Thought lo3 = Thought90.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    double ld4 = 440.47747133341176;
    boolean lb5 = true;
    boolean lb6 = false;
</cutPoint1910>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1911>
    ok = ok.m4();
    bk = dk < dk;
    double ld0 = 651.748007033982;
    dk = dk + dk;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    double ld1 = 729.5233711462165;
    double ld2 = 1000.0638549709317;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = bk || bk;
    double ld3 = 148.244651605345;
    ok = ok.m4(ok, ok, ok, ok);
    double ld4 = 871.9308725445985;
</cutPoint1911>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1912>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    bk = ok.m2();
    boolean lb0 = true;
    double ld1 = 828.0491265339189;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint1912>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1913>
    bk = dk < dk;
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = true;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb2 = false;
    bk = !bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought88.getInstance();
</cutPoint1913>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1914>
    Thought lo0 = Thought71.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb1 = true;
        boolean lb2 = true;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld3 = 757.5249465748665;
    on -= dk;
    dk *= -1;
    on -= dk;
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
        Thought lo4 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb5 = false;
    double ld6 = 500.65112556711455;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint1914>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1915>
    Thought lo0 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    bk = dk > dk;
    dk = dk - dk;
    on -= dk;
    boolean lb1 = false;
    dk = dk + dk;
    if (bk) {
        Thought lo2 = Thought61.getInstance(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk || bk;
        dk = dk - dk;
        on -= dk;
        double ld3 = 935.741229723246;
        double ld4 = 332.4795150546156;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = bk && bk;
        bk = dk > dk;
        bk = dk > dk;
        Thought lo5 = Thought50.getInstance();
</cutPoint1915>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1916>
    Thought lo0 = Thought35.getInstance(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = true;
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk < dk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        Thought lo2 = Thought16.getInstance();
        on -= dk;
</cutPoint1916>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1917>
    dk *= -1;
    Thought lo0 = Thought38.getInstance(dk, dk, dk, dk);
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = bk || bk;
    on += dk;
    bk = bk || bk;
</cutPoint1917>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1918>
    boolean lb0 = true;
    boolean lb1 = true;
        dk = dk - dk;
    Thought lo2 = Thought98.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    Thought lo4 = Thought89.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = dk < dk;
    Thought lo5 = Thought84.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    Thought lo6 = Thought38.getInstance(dk, dk, dk, dk);
    double ld7 = 697.9957148027354;
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld8 = 655.6008183745397;
    boolean lb9 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo10 = Thought21.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
</cutPoint1918>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1919>
    dk = ok.m3();
    bk = dk < dk;
    boolean lb0 = false;
    dk = dk - dk;
    bk = dk > dk;
    bk = bk || bk;
    boolean lb1 = false;
    Thought lo2 = Thought13.getInstance(dk, dk, dk, dk);
    double ld3 = 704.5277774695603;
    Thought lo4 = Thought95.getInstance(bk, bk, bk, bk);
    on += dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1919>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1920>
    dk *= -1;
    bk = bk && bk;
    bk = bk && bk;
        dk = dk - dk;
    bk = !bk;
    dk = dk - dk;
    Thought lo0 = Thought55.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought7.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    double ld2 = 837.2767066611062;
    dk = dk + dk;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
    bk = dk > dk;
</cutPoint1920>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1921>
    dk *= -1;
    dk *= -1;
    dk *= -1;
    bk = dk > dk;
    double ld0 = 611.1514797523931;
    Thought lo1 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought57.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    dk = dk - dk;
    boolean lb3 = false;
    bk = bk || bk;
    bk = !bk;
    boolean lb4 = false;
    Thought lo5 = Thought11.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo6 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    bk = dk < dk;
</cutPoint1921>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1922>
    ok.m3(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4();
    bk = bk && bk;
    bk = dk > dk;
    on += dk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    double ld0 = 605.9681511430805;
    bk = bk || bk;
    bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
    dk = dk + dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo1 = Thought30.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1922>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1923>
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb0 = true;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = dk - dk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    bk = dk < dk;
    bk = bk && bk;
    boolean lb2 = false;
    bk = !bk;
    Thought lo3 = Thought21.getInstance(bk, bk, bk, bk);
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = true;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo6 = Thought73.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1923>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1924>
    dk = dk + dk;
    double ld0 = 727.4070735036386;
    ok.m2(ok, ok, ok, ok);
        dk = dk - dk;
    Thought lo1 = Thought11.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    on += dk;
    boolean lb2 = false;
    bk = ok.m2(dk, dk, dk, dk);
        bk = dk < dk;
    ok.m1(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo3 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought44.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = false;
</cutPoint1924>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought55 extends Thought{
private static ArrayList<Thought55> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 623.626913594842;
private double fd1 = 570.3995772068716;
private Thought fo0 = null;
private Thought fo1 = null;
Thought55 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought55 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought55 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought55 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought55 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought55 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought55 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought55 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought55 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought55 instance = new Thought55 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought55 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought55 instance = new Thought55 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought55 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought55 instance = new Thought55 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought55 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought55 instance = new Thought55 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought55 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought55 instance = new Thought55 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought55 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought55 instance = new Thought55 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought55 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought55 instance = new Thought55 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought55 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought55 instance = new Thought55 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1925>
    dk *= -1;
    dk *= -1;
    dk *= -1;
    on -= dk;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4();
    Thought lo0 = Thought49.getInstance(dk, dk, dk, dk);
    double ld1 = 133.01227952334185;
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    on += dk;
</cutPoint1925>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1926>
    dk = dk - dk;
    boolean lb0 = false;
    dk = dk + dk;
    dk *= -1;
    bk = dk < dk;
        bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought25.getInstance();
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    double ld2 = 68.99779019900352;
    ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    bk = !bk;
    bk = bk && bk;
    on -= dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    double ld3 = 59.55540938368865;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    dk = dk - dk;
</cutPoint1926>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1927>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    on += dk;
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint1927>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1928>
    boolean lb0 = false;
    Thought lo1 = Thought50.getInstance(bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo2 = Thought80.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    on -= dk;
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = true;
    on += dk;
    boolean lb5 = false;
    bk = ok.m2();
    bk = dk > dk;
    dk *= -1;
    bk = dk > dk;
</cutPoint1928>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1929>
    bk = dk < dk;
    bk = dk < dk;
    bk = dk < dk;
    bk = dk < dk;
    on -= dk;
    dk = dk - dk;
    boolean lb0 = false;
    bk = dk > dk;
    Thought lo1 = Thought72.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1929>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1930>
    dk *= -1;
    Thought lo0 = Thought2.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    bk = dk > dk;
    boolean lb1 = true;
    dk = dk - dk;
    double ld2 = 421.88889082125087;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint1930>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1931>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    bk = !bk;
    boolean lb0 = true;
    bk = dk < dk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        bk = dk > dk;
        boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk > dk;
        double ld2 = 778.4507710446796;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        dk = dk - dk;
        dk = dk - dk;
        Thought lo3 = Thought98.getInstance(ok, ok, ok, ok);
        bk = dk > dk;
        bk = dk < dk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1931>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1932>
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    Thought lo0 = Thought69.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    on -= dk;
    bk = bk || bk;
</cutPoint1932>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1933>
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    if (bk) {
        dk *= -1;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        double ld0 = 515.4966132062652;
        ok.m3();
        bk = !bk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk > dk;
</cutPoint1933>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1934>
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    bk = bk && bk;
    dk = dk - dk;
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought50.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = dk < dk;
    on += dk;
</cutPoint1934>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1935>
    on += dk;
    Thought lo0 = Thought49.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk *= -1;
    bk = !bk;
    bk = bk && bk;
    boolean lb2 = false;
    double ld3 = 50.21625949120901;
    Thought lo4 = Thought83.getInstance();
    double ld5 = 65.73294470645058;
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb6 = false;
    double ld7 = 515.2099373198532;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok);
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld8 = 121.300268260919;
    ok = ok.m4();
    Thought lo9 = Thought86.getInstance(dk, dk, dk, dk);
</cutPoint1935>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1936>
    bk = dk > dk;
    dk = dk + dk;
    dk = dk + dk;
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    if (bk) {
        dk *= -1;
        boolean lb0 = true;
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        boolean lb1 = false;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought90.getInstance();
        if (bk) {
            ok = ok.m4(dk, dk, dk, dk);
            bk = dk < dk;
            dk = dk - dk;
</cutPoint1936>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1937>
    boolean lb0 = false;
    bk = !bk;
    boolean lb1 = false;
    Thought lo2 = Thought6.getInstance(bk, bk, bk, bk);
    boolean lb3 = false;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 417.7098212730255;
    on += dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 737.0997943478337;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb6 = true;
    boolean lb7 = true;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    Thought lo8 = Thought18.getInstance(dk, dk, dk, dk);
    dk *= -1;
    boolean lb9 = true;
</cutPoint1937>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1938>
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    Thought lo0 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb1 = false;
    if (bk) {
        boolean lb2 = true;
        on += dk;
        Thought lo3 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            }
        dk = dk - dk;
        boolean lb4 = true;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        boolean lb5 = true;
        Thought lo6 = Thought67.getInstance(ok, ok, ok, ok);
        boolean lb7 = true;
        double ld8 = 765.7386709231101;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb9 = false;
        dk = dk - dk;
        dk = dk - dk;
</cutPoint1938>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1939>
    on += dk;
    dk = ok.m3();
    bk = !bk;
    boolean lb0 = false;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo1 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    Thought lo3 = Thought45.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb4 = false;
    boolean lb5 = true;
    boolean lb6 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb7 = true;
    ok = ok.m4();
    Thought lo8 = Thought13.getInstance(dk, dk, dk, dk);
</cutPoint1939>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1940>
    Thought lo0 = Thought86.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    boolean lb1 = true;
    boolean lb2 = false;
    bk = !bk;
    bk = !bk;
    boolean lb3 = false;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1940>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1941>
    for(int j=0; j<10; j++){
        Thought lo0 = Thought1.getInstance();
        boolean lb1 = true;
        Thought lo2 = Thought87.getInstance(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        }
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    </cutPoint1941>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1942>
    boolean lb0 = true;
    Thought lo1 = Thought74.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok);
    boolean lb2 = true;
    double ld3 = 956.0010572373591;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
        bk = bk || bk;
</cutPoint1942>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1943>
    if (bk) {
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld0 = 786.5872979851298;
        dk = dk - dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        on += dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo1 = Thought92.getInstance(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = true;
        bk = ok.m2();
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        bk = dk > dk;
        if (bk) {
            dk = dk - dk;
            Thought lo3 = Thought34.getInstance(bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            double ld4 = 584.6359566530563;
            bk = bk || bk;
            ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk + dk;
</cutPoint1943>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1944>
    boolean lb0 = false;
    Thought lo1 = Thought1.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb2 = false;
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    boolean lb3 = true;
    ok.m3();
    bk = bk || bk;
    boolean lb4 = true;
    boolean lb5 = true;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 726.50613638711;
    Thought lo7 = Thought17.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
</cutPoint1944>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1945>
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = dk < dk;
    bk = dk > dk;
    boolean lb0 = true;
    bk = bk && bk;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk || bk;
        ok.m2(bk, bk, bk, bk);
        double ld1 = 256.62696058255744;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk && bk;
        bk = !bk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1945>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1946>
    ok = ok.m4();
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo0 = Thought23.getInstance(bk, bk, bk, bk);
        double ld1 = 262.0105098634826;
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        if (bk) {
            ok.m2();
            on += dk;
            bk = bk && bk;
            dk = dk + dk;
            ok = ok.m4(dk, dk, dk, dk);
            ok.m3(bk, bk, bk, bk);
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
            dk *= -1;
            } else if (bk) {
            dk = dk + dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1946>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1947>
    bk = dk > dk;
    bk = dk < dk;
    on += dk;
    ok.m1(ok, ok, ok, ok);
    bk = dk < dk;
    bk = !bk;
    boolean lb0 = true;
    Thought lo1 = Thought84.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    Thought lo2 = Thought7.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1947>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1948>
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    dk = dk + dk;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    bk = bk || bk;
    dk *= -1;
    bk = !bk;
</cutPoint1948>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1949>
    double ld0 = 14.732496504030081;
    Thought lo1 = Thought71.getInstance(dk, dk, dk, dk);
        boolean lb2 = false;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    if (bk) {
        dk = dk - dk;
        boolean lb3 = false;
        bk = !bk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld4 = 367.91557630785826;
        bk = bk && bk;
        bk = !bk;
        dk *= -1;
        dk = dk + dk;
        if (bk) {
            bk = ok.m2(ok, ok, ok, ok);
            ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk - dk;
            ok = ok.m4();
            ok.m1(dk, dk, dk, dk);
</cutPoint1949>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1950>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld0 = 363.49095045884866;
    dk = dk - dk;
    if (bk) {
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        on += dk;
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk *= -1;
        bk = ok.m2();
        on -= dk;
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        boolean lb1 = false;
        dk = ok.m3(bk, bk, bk, bk);
</cutPoint1950>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1951>
    double ld0 = 892.2878728976268;
    dk = dk - dk;
    bk = !bk;
    dk = dk + dk;
    double ld1 = 122.50842555296495;
    bk = bk || bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb3 = false;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo4 = Thought69.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
</cutPoint1951>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1952>
    bk = bk && bk;
    boolean lb0 = false;
        dk *= -1;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = !bk;
    boolean lb1 = true;
    dk = dk - dk;
    bk = dk > dk;
    bk = !bk;
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought5.getInstance(ok, ok, ok, ok);
    Thought lo3 = Thought8.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    Thought lo5 = Thought95.getInstance();
    bk = !bk;
</cutPoint1952>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1953>
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought10.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    if (bk) {
        bk = ok.m2();
        bk = ok.m2(dk, dk, dk, dk);
        double ld3 = 661.4765549544968;
        dk = ok.m3(bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1953>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1954>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    double ld0 = 345.6857907411802;
    dk = dk - dk;
    boolean lb1 = true;
    bk = bk || bk;
</cutPoint1954>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1955>
    on -= dk;
    bk = !bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
        boolean lb0 = true;
    bk = dk < dk;
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk);
    bk = dk > dk;
</cutPoint1955>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1956>
    dk = dk - dk;
    ok.m1(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought87.getInstance(ok, ok, ok, ok);
    dk *= -1;
    dk = dk + dk;
    double ld1 = 716.7281504284632;
    Thought lo2 = Thought47.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo3 = Thought16.getInstance();
    for(int j=0; j<10; j++){
        boolean lb4 = false;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint1956>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1957>
    bk = !bk;
    dk *= -1;
    Thought lo0 = Thought92.getInstance(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 96.44913059599014;
</cutPoint1957>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1958>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
</cutPoint1958>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1959>
    bk = dk > dk;
    on += dk;
    bk = dk > dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    Thought lo0 = Thought18.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    Thought lo1 = Thought98.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    boolean lb2 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 747.1858211193113;
</cutPoint1959>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought56 extends Thought{
private static ArrayList<Thought56> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 46.13300019713258;
private double fd1 = 523.3450511041809;
private Thought fo0 = null;
private Thought fo1 = null;
Thought56 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought56 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought56 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought56 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought56 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought56 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought56 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought56 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought56 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought56 instance = new Thought56 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought56 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought56 instance = new Thought56 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought56 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought56 instance = new Thought56 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought56 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought56 instance = new Thought56 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought56 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought56 instance = new Thought56 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought56 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought56 instance = new Thought56 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought56 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought56 instance = new Thought56 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought56 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought56 instance = new Thought56 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1960>
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    dk = dk - dk;
    double ld0 = 91.14169659232651;
    on -= dk;
    boolean lb1 = false;
    Thought lo2 = Thought3.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    boolean lb3 = false;
    ok.m3();
    ok.m2(dk, dk, dk, dk);
    if (bk) {
        bk = !bk;
        boolean lb4 = false;
        bk = bk && bk;
        on -= dk;
        boolean lb5 = true;
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint1960>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1961>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    for(int j=0; j<10; j++){
        Thought lo0 = Thought41.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok);
        bk = dk > dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        bk = dk < dk;
        bk = bk || bk;
        dk *= -1;
        ok = ok.m4(dk, dk, dk, dk);
        double ld1 = 300.3092099055369;
        ok = ok.m4(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1961>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1962>
    double ld0 = 525.3307531145197;
    on += dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    on += dk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3();
    boolean lb2 = true;
    dk = dk + dk;
    bk = dk > dk;
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = !bk;
    Thought lo3 = Thought53.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    bk = !bk;
</cutPoint1962>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1963>
    double ld0 = 966.7060736564055;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    boolean lb2 = false;
    double ld3 = 679.7546473225497;
    Thought lo4 = Thought16.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld5 = 420.21819675705416;
    on -= dk;
</cutPoint1963>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1964>
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    bk = bk || bk;
    Thought lo0 = Thought71.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought67.getInstance();
    bk = !bk;
    Thought lo2 = Thought13.getInstance(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1964>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1965>
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        if (bk) {
            } else {
            boolean lb0 = true;
            bk = dk > dk;
            dk = dk - dk;
            bk = dk < dk;
            boolean lb1 = true;
            bk = bk || bk;
            bk = bk && bk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            boolean lb2 = false;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            double ld3 = 938.658181637199;
            Thought lo4 = Thought3.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok);
            bk = bk || bk;
            double ld5 = 848.3373439919359;
</cutPoint1965>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1966>
    double ld0 = 228.72965072258404;
    bk = !bk;
    dk *= -1;
    double ld1 = 391.7919844393816;
    boolean lb2 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 543.346606737326;
    ok = ok.m4();
    Thought lo4 = Thought52.getInstance(dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    double ld5 = 975.8985338858344;
    double ld6 = 112.44039715949356;
    dk = dk - dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb7 = true;
    boolean lb8 = false;
    bk = bk && bk;
    if (bk) {
        bk = bk && bk;
        bk = !bk;
</cutPoint1966>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1967>
    double ld0 = 978.7632693058578;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        bk = !bk;
        bk = bk || bk;
        bk = dk < dk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        double ld1 = 523.6009789669241;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
</cutPoint1967>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1968>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk && bk;
    bk = dk < dk;
    on += dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
</cutPoint1968>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1969>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    double ld0 = 98.33677363770566;
    bk = !bk;
    on += dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    on += dk;
    on -= dk;
    dk *= -1;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    boolean lb2 = true;
    on += dk;
    bk = ok.m2();
</cutPoint1969>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1970>
    dk *= -1;
    boolean lb0 = false;
    boolean lb1 = false;
    boolean lb2 = false;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought90.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
        bk = dk < dk;
    bk = !bk;
    for(int j=0; j<10; j++){
        Thought lo4 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        for(int j=0; j<10; j++){
            Thought lo5 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1970>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1971>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = false;
    Thought lo1 = Thought58.getInstance(ok, ok, ok, ok);
    double ld2 = 723.2694054965892;
    dk = dk + dk;
    dk *= -1;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    on -= dk;
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    bk = bk && bk;
    boolean lb3 = false;
    boolean lb4 = true;
</cutPoint1971>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1972>
    on += dk;
    dk *= -1;
    bk = bk || bk;
    boolean lb0 = false;
    Thought lo1 = Thought38.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok);
    on -= dk;
    boolean lb2 = true;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    boolean lb3 = false;
    ok.m1(dk, dk, dk, dk);
    double ld4 = 523.9186767686901;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1972>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1973>
    Thought lo0 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    if (bk) {
        bk = dk > dk;
        dk = dk + dk;
        bk = dk < dk;
        boolean lb1 = true;
</cutPoint1973>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1974>
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk + dk;
    dk = dk - dk;
    dk = dk - dk;
    double ld0 = 649.6199793490488;
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    bk = !bk;
    Thought lo1 = Thought83.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo3 = Thought27.getInstance();
</cutPoint1974>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1975>
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    Thought lo0 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo2 = Thought48.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought89.getInstance();
    double ld4 = 602.3478200513358;
    double ld5 = 197.95153820545247;
    dk = dk - dk;
    boolean lb6 = true;
    ok.m1(dk, dk, dk, dk);
</cutPoint1975>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1976>
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    on -= dk;
    dk *= -1;
    bk = bk || bk;
    boolean lb0 = false;
    boolean lb1 = false;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought31.getInstance(ok, ok, ok, ok);
    boolean lb3 = true;
</cutPoint1976>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1977>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought21.getInstance();
    bk = !bk;
        ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    bk = !bk;
    boolean lb1 = false;
    dk = dk + dk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        Thought lo2 = Thought5.getInstance();
        dk = dk - dk;
        bk = dk < dk;
        dk = ok.m3(dk, dk, dk, dk);
        dk = dk - dk;
        ok.m3(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1977>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1978>
    on -= dk;
    for(int j=0; j<10; j++){
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        dk *= -1;
        boolean lb0 = true;
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk = dk + dk;
        double ld1 = 33.5396142774494;
        dk = dk - dk;
        bk = dk < dk;
        dk *= -1;
        bk = dk < dk;
        boolean lb2 = true;
</cutPoint1978>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1979>
    bk = dk < dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    Thought lo1 = Thought64.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    double ld2 = 527.4709345513867;
    ok.m2(ok, ok, ok, ok);
    bk = !bk;
    on += dk;
    Thought lo3 = Thought11.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        dk = ok.m3();
        bk = bk && bk;
        on += dk;
        ok.m1(dk, dk, dk, dk);
        on -= dk;
        double ld4 = 94.40882132096213;
        double ld5 = 688.8634173360225;
        ok.m2(bk, bk, bk, bk);
        boolean lb6 = false;
</cutPoint1979>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1980>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought99.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
        on += dk;
    if (bk) {
        bk = bk || bk;
        dk *= -1;
        ok.m1(ok, ok, ok, ok);
        on += dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1();
        dk = dk + dk;
</cutPoint1980>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1981>
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    dk = dk - dk;
    ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    double ld0 = 630.4422786647408;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld1 = 595.8095054708895;
    double ld2 = 532.4999989588947;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 476.2232296547796;
    dk = ok.m3(ok, ok, ok, ok);
        boolean lb4 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    Thought lo5 = Thought89.getInstance(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    on += dk;
    on += dk;
</cutPoint1981>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1982>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    Thought lo0 = Thought4.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 421.48916543335235;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok);
    double ld2 = 987.0049340303837;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought44.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        double ld4 = 213.82672994602925;
</cutPoint1982>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1983>
    dk *= -1;
    double ld0 = 595.941743755863;
    on += dk;
    double ld1 = 680.378147484679;
    Thought lo2 = Thought71.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    double ld4 = 908.6729328072512;
    dk = dk - dk;
    boolean lb5 = true;
    dk = ok.m3();
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk);
    boolean lb6 = true;
    on -= dk;
    double ld7 = 30.02854485945117;
</cutPoint1983>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1984>
    bk = dk < dk;
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    double ld0 = 619.7580856866718;
    bk = !bk;
    dk = dk + dk;
    bk = bk || bk;
    ok.m1(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    boolean lb4 = false;
    boolean lb5 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
</cutPoint1984>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1985>
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    bk = dk > dk;
    dk = dk - dk;
    Thought lo1 = Thought17.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb2 = true;
    dk = dk + dk;
    bk = dk > dk;
    double ld3 = 145.1570735713362;
    bk = bk && bk;
    bk = !bk;
    boolean lb4 = false;
    dk = dk - dk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought63.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    dk *= -1;
    boolean lb6 = true;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint1985>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1986>
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        Thought lo1 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo2 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        dk *= -1;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = true;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        dk = dk + dk;
        on += dk;
        bk = dk < dk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb4 = false;
        bk = bk && bk;
        boolean lb5 = true;
        double ld6 = 258.47917420030666;
        bk = dk > dk;
</cutPoint1986>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1987>
    dk = dk + dk;
    bk = bk || bk;
    bk = !bk;
    bk = dk > dk;
    Thought lo0 = Thought18.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk || bk;
    double ld1 = 548.7122713477323;
    bk = bk || bk;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought87.getInstance(ok, ok, ok, ok);
    Thought lo3 = Thought57.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3();
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint1987>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1988>
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = !bk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        ok.m1(dk, dk, dk, dk);
        bk = bk && bk;
        bk = !bk;
        bk = dk > dk;
        bk = !bk;
        ok.m2(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
</cutPoint1988>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1989>
        dk *= -1;
    dk *= -1;
    double ld0 = 269.4887842970142;
    bk = !bk;
    bk = bk || bk;
    dk *= -1;
    Thought lo1 = Thought56.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    on -= dk;
    dk = dk + dk;
    bk = bk && bk;
</cutPoint1989>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1990>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb1 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    Thought lo2 = Thought59.getInstance();
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint1990>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1991>
    ok = ok.m4();
    bk = bk || bk;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
    on -= dk;
    bk = !bk;
</cutPoint1991>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1992>
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = true;
    bk = dk < dk;
    double ld2 = 333.1859849815474;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought53.getInstance();
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo5 = Thought61.getInstance(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint1992>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1993>
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    Thought lo0 = Thought38.getInstance();
    bk = dk > dk;
        bk = dk > dk;
    Thought lo1 = Thought21.getInstance(dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    Thought lo2 = Thought61.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb3 = false;
    bk = bk && bk;
    bk = dk < dk;
</cutPoint1993>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1994>
    double ld0 = 876.5000452994639;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought8.getInstance();
    Thought lo2 = Thought28.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint1994>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought57 extends Thought{
private static ArrayList<Thought57> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 971.823128299823;
private double fd1 = 648.1772452703069;
private Thought fo0 = null;
private Thought fo1 = null;
Thought57 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought57 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought57 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought57 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought57 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought57 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought57 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought57 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought57 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought57 instance = new Thought57 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought57 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought57 instance = new Thought57 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought57 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought57 instance = new Thought57 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought57 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought57 instance = new Thought57 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought57 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought57 instance = new Thought57 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought57 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought57 instance = new Thought57 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought57 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought57 instance = new Thought57 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought57 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought57 instance = new Thought57 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1995>
    bk = dk > dk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    Thought lo1 = Thought86.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2();
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
        bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
    bk = dk > dk;
    Thought lo2 = Thought36.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    Thought lo4 = Thought61.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld5 = 912.1038267410987;
        ok.m1(ok, ok, ok, ok);
    bk = dk > dk;
</cutPoint1995>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1996>
    boolean lb0 = false;
    double ld1 = 702.2749857112965;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 366.6902226090121;
    Thought lo3 = Thought64.getInstance();
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        boolean lb4 = true;
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        bk = ok.m2(ok, ok, ok, ok);
        bk = dk > dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        dk *= -1;
        ok.m2();
        bk = dk < dk;
        boolean lb5 = true;
</cutPoint1996>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1997>
    bk = bk && bk;
    dk = dk + dk;
    boolean lb0 = true;
    dk = dk + dk;
    on += dk;
    on -= dk;
    bk = bk || bk;
    double ld1 = 796.7429944364436;
    double ld2 = 979.3520988859541;
    on += dk;
    bk = dk > dk;
    on += dk;
    Thought lo3 = Thought23.getInstance(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = false;
    double ld5 = 334.57523915717053;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb6 = false;
    dk = dk - dk;
    bk = bk && bk;
</cutPoint1997>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1998>
    double ld0 = 414.75746783460386;
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    boolean lb1 = false;
    Thought lo2 = Thought6.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    bk = bk && bk;
    dk = dk - dk;
    bk = dk < dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = ok.m3();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    double ld3 = 154.25096351128872;
    boolean lb4 = false;
    ok.m3(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    </cutPoint1998>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint1999>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk > dk;
    dk *= -1;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint1999>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2000>
    Thought lo0 = Thought4.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk - dk;
    Thought lo2 = Thought18.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    double ld4 = 199.64218518247293;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = true;
    dk = dk - dk;
    double ld6 = 595.8395798238628;
    dk *= -1;
    double ld7 = 75.43704275943163;
</cutPoint2000>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2001>
    boolean lb0 = false;
    double ld1 = 467.9816833389702;
    bk = dk < dk;
    Thought lo2 = Thought74.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    double ld3 = 224.72936275403998;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk *= -1;
    ok = ok.m4();
    bk = bk || bk;
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    bk = bk || bk;
    bk = dk < dk;
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint2001>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2002>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 853.8261000218682;
    bk = bk || bk;
    dk *= -1;
    Thought lo2 = Thought26.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    double ld3 = 766.8874634630278;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
</cutPoint2002>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2003>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    boolean lb0 = false;
    boolean lb1 = true;
    ok.m3(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    bk = !bk;
</cutPoint2003>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2004>
    boolean lb0 = true;
    bk = !bk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    boolean lb1 = true;
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    bk = !bk;
    dk = dk + dk;
    ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = dk < dk;
    on -= dk;
    ok.m3(ok, ok, ok, ok);
</cutPoint2004>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2005>
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    double ld1 = 952.0017409079201;
    bk = dk > dk;
    boolean lb2 = true;
    boolean lb3 = true;
    bk = dk < dk;
    boolean lb4 = false;
    Thought lo5 = Thought65.getInstance(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk = dk - dk;
        dk *= -1;
        dk = dk - dk;
        bk = dk < dk;
        double ld6 = 676.8112876236271;
        bk = dk < dk;
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
</cutPoint2005>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2006>
    bk = !bk;
    ok.m1(ok, ok, ok, ok);
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    double ld1 = 746.5361269539079;
    bk = !bk;
    on += dk;
    bk = dk < dk;
    double ld2 = 295.14494284162316;
    on -= dk;
</cutPoint2006>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2007>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought44.getInstance(ok, ok, ok, ok);
    on -= dk;
    dk *= -1;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok.m1(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought78.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2007>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2008>
    boolean lb0 = false;
    bk = bk || bk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    boolean lb1 = false;
    bk = bk && bk;
    dk = dk + dk;
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought79.getInstance();
    boolean lb3 = false;
    Thought lo4 = Thought66.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    for(int j=0; j<10; j++){
        on += dk;
        bk = dk > dk;
        bk = bk || bk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        bk = dk > dk;
</cutPoint2008>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2009>
    bk = dk > dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo2 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2009>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2010>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    on += dk;
        bk = bk && bk;
    double ld1 = 780.6615760067352;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought0.getInstance();
    on -= dk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    on += dk;
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint2010>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2011>
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
    bk = bk || bk;
</cutPoint2011>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2012>
    on += dk;
    bk = !bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    Thought lo0 = Thought28.getInstance();
    boolean lb1 = false;
    bk = bk || bk;
    Thought lo2 = Thought39.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    dk = dk - dk;
</cutPoint2012>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2013>
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        on -= dk;
        for(int j=0; j<10; j++){
            Thought lo1 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            Thought lo2 = Thought97.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk || bk;
            dk = ok.m3(ok, ok, ok, ok);
            dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk + dk;
            on -= dk;
            double ld3 = 489.6817068852576;
            bk = bk && bk;
            ok = ok.m4();
            }
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
        Thought lo4 = Thought44.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint2013>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2014>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    double ld0 = 341.707704778946;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    if (bk) {
        dk *= -1;
        dk = dk + dk;
        bk = dk < dk;
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld1 = 474.7686003741153;
        boolean lb2 = false;
</cutPoint2014>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2015>
    Thought lo0 = Thought70.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought64.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    bk = dk < dk;
    bk = dk < dk;
    boolean lb2 = false;
    ok.m2();
    boolean lb3 = false;
    boolean lb4 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb5 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = !bk;
        boolean lb6 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok);
        bk = !bk;
        dk = dk - dk;
        dk = dk - dk;
</cutPoint2015>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2016>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought52.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = false;
    bk = dk > dk;
    bk = bk || bk;
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
        if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk || bk;
        boolean lb3 = true;
        bk = bk || bk;
        dk *= -1;
        for(int j=0; j<10; j++){
            dk = dk - dk;
            bk = dk > dk;
            dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4();
            bk = ok.m2(dk, dk, dk, dk);
            on -= dk;
</cutPoint2016>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2017>
    bk = bk && bk;
    bk = dk < dk;
    ok.m1(bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought81.getInstance(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    ok.m3();
    bk = !bk;
</cutPoint2017>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2018>
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    Thought lo1 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    double ld3 = 328.0924258136699;
    double ld4 = 332.2909450631716;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
</cutPoint2018>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2019>
    double ld0 = 774.2210342461473;
    ok.m1(ok, ok, ok, ok);
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    boolean lb1 = false;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    on += dk;
    bk = bk && bk;
    double ld2 = 750.7034147737297;
    on += dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    bk = dk < dk;
    boolean lb3 = true;
</cutPoint2019>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2020>
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo0 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        bk = bk && bk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2020>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2021>
    bk = bk || bk;
    boolean lb0 = false;
    bk = dk > dk;
    bk = !bk;
    bk = dk < dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 98.365526956695;
    boolean lb2 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought58.getInstance();
    double ld4 = 768.5123025829938;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb5 = false;
    on += dk;
    bk = bk || bk;
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb6 = true;
    dk *= -1;
    dk = dk - dk;
</cutPoint2021>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2022>
    bk = dk > dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb0 = true;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    bk = dk < dk;
    on += dk;
    bk = bk && bk;
    on += dk;
    boolean lb1 = false;
    double ld2 = 300.06379301988005;
    bk = !bk;
    boolean lb3 = false;
    dk = dk - dk;
    dk = dk - dk;
</cutPoint2022>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2023>
    double ld0 = 543.033710831556;
    Thought lo1 = Thought63.getInstance();
    for(int j=0; j<10; j++){
        dk = ok.m3(dk, dk, dk, dk);
        bk = dk > dk;
        ok.m2(bk, bk, bk, bk);
        bk = bk || bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        Thought lo2 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        Thought lo3 = Thought49.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        }
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    ok = ok.m4();
    boolean lb5 = true;
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb6 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2023>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2024>
    dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        bk = !bk;
        dk = dk - dk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb0 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        dk = dk + dk;
        bk = !bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        bk = dk > dk;
        Thought lo1 = Thought18.getInstance(ok, ok, ok, ok);
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1();
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        dk = dk + dk;
</cutPoint2024>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2025>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb0 = false;
    on -= dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    double ld1 = 880.0535193662142;
    ok.m1(ok, ok, ok, ok);
    bk = !bk;
    bk = bk || bk;
    bk = bk || bk;
    Thought lo2 = Thought97.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb3 = true;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2025>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2026>
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk *= -1;
    bk = dk > dk;
    on += dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        bk = !bk;
    bk = dk > dk;
    dk = dk - dk;
    Thought lo0 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    for(int j=0; j<10; j++){
</cutPoint2026>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2027>
    on += dk;
    on -= dk;
    on += dk;
    double ld0 = 864.5462309285698;
    boolean lb1 = true;
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
        bk = dk > dk;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk - dk;
</cutPoint2027>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2028>
    bk = bk && bk;
    bk = dk > dk;
    dk *= -1;
    bk = dk < dk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    double ld0 = 100.0969728248468;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    double ld1 = 513.6690281642834;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought74.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    bk = bk && bk;
</cutPoint2028>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2029>
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 893.3942002227;
    dk = dk - dk;
    dk = ok.m3();
    bk = dk > dk;
    dk *= -1;
    boolean lb1 = true;
    boolean lb2 = true;
        bk = bk && bk;
    double ld3 = 684.7992098561251;
    Thought lo4 = Thought91.getInstance(dk, dk, dk, dk);
        bk = bk || bk;
    ok.m3(bk, bk, bk, bk);
</cutPoint2029>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought58 extends Thought{
private static ArrayList<Thought58> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 407.1483087049152;
private double fd1 = 231.42257433514442;
private Thought fo0 = null;
private Thought fo1 = null;
Thought58 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought58 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought58 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought58 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought58 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought58 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought58 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought58 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought58 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought58 instance = new Thought58 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought58 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought58 instance = new Thought58 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought58 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought58 instance = new Thought58 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought58 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought58 instance = new Thought58 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought58 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought58 instance = new Thought58 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought58 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought58 instance = new Thought58 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought58 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought58 instance = new Thought58 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought58 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought58 instance = new Thought58 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2030>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = bk && bk;
    bk = dk < dk;
    boolean lb1 = true;
    bk = dk > dk;
</cutPoint2030>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2031>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    dk *= -1;
        on -= dk;
    bk = !bk;
    Thought lo0 = Thought95.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    boolean lb1 = false;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought99.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought56.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint2031>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2032>
    bk = !bk;
    boolean lb0 = true;
    ok = ok.m4();
    boolean lb1 = false;
    bk = bk || bk;
    double ld2 = 595.396921170443;
    dk = dk - dk;
    double ld3 = 388.5880125211536;
    on -= dk;
    dk *= -1;
    bk = dk < dk;
    bk = dk > dk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought57.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    bk = bk && bk;
</cutPoint2032>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2033>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought61.getInstance(bk, bk, bk, bk);
    Thought lo1 = Thought62.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m2();
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        on += dk;
    bk = !bk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought92.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    dk *= -1;
</cutPoint2033>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2034>
    double ld0 = 240.159343491813;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    on += dk;
    ok = ok.m4();
    dk *= -1;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo1 = Thought25.getInstance(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    boolean lb2 = true;
    dk = dk - dk;
    double ld3 = 296.31320362044;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo4 = Thought89.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
</cutPoint2034>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2035>
    for(int j=0; j<10; j++){
        Thought lo0 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        boolean lb1 = false;
        boolean lb2 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        dk = dk - dk;
        }
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
        for(int j=0; j<10; j++){
        double ld3 = 115.97117121979397;
        }
    bk = dk > dk;
</cutPoint2035>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2036>
    bk = dk < dk;
    dk = ok.m3();
    bk = bk && bk;
    double ld0 = 768.578585142287;
        bk = dk < dk;
    if (bk) {
        bk = ok.m2(dk, dk, dk, dk);
        on += dk;
        ok.m1(bk, bk, bk, bk);
        bk = bk || bk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        boolean lb1 = true;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        ok.m3(ok, ok, ok, ok);
        bk = dk > dk;
</cutPoint2036>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2037>
    bk = bk || bk;
    boolean lb0 = true;
    bk = dk > dk;
    double ld1 = 923.481195526817;
    bk = dk > dk;
    on += dk;
    for(int j=0; j<10; j++){
        on += dk;
        on += dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2037>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2038>
    if (bk) {
        ok.m1();
        dk *= -1;
        double ld0 = 231.27176885588486;
        for(int j=0; j<10; j++){
            ok = ok.m4(dk, dk, dk, dk);
            ok = ok.m4(bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            on += dk;
            ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk < dk;
            boolean lb1 = true;
            bk = bk && bk;
            bk = dk > dk;
            double ld2 = 80.89007302188104;
            dk = dk + dk;
            dk = dk - dk;
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            ok.m2(ok, ok, ok, ok);
</cutPoint2038>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2039>
    boolean lb0 = true;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    for(int j=0; j<10; j++){
        on -= dk;
        bk = bk && bk;
        boolean lb1 = false;
        }
    bk = !bk;
    on += dk;
    boolean lb2 = false;
    bk = dk > dk;
    Thought lo3 = Thought16.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought71.getInstance(ok, ok, ok, ok);
    bk = !bk;
</cutPoint2039>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2040>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    dk = ok.m3();
    bk = !bk;
    ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought80.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 845.5478723818029;
        bk = dk > dk;
    dk *= -1;
    Thought lo3 = Thought60.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo4 = Thought31.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    boolean lb5 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo6 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2040>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2041>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
        Thought lo0 = Thought53.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4();
        ok.m1(dk, dk, dk, dk);
        bk = dk < dk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb1 = false;
        bk = !bk;
        double ld2 = 11.570709788312438;
        dk *= -1;
        Thought lo3 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2041>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2042>
    if (bk) {
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        dk *= -1;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        } else {
        on -= dk;
        on += dk;
        bk = dk < dk;
        dk = dk - dk;
        dk *= -1;
        ok.m2();
        boolean lb0 = false;
        ok.m1(dk, dk, dk, dk);
        bk = dk < dk;
        double ld1 = 669.5654636684862;
</cutPoint2042>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2043>
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 739.2481096554009;
    bk = bk && bk;
    boolean lb3 = false;
    double ld4 = 854.69723997612;
    on += dk;
    double ld5 = 130.32795300822448;
    dk *= -1;
    double ld6 = 496.79779156418186;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb7 = false;
</cutPoint2043>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2044>
    boolean lb0 = false;
    boolean lb1 = true;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    ok.m2();
    if (bk) {
        on += dk;
        ok = ok.m4(dk, dk, dk, dk);
        ok.m1(bk, bk, bk, bk);
</cutPoint2044>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2045>
    boolean lb0 = false;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 793.7083458395674;
    dk *= -1;
    double ld2 = 378.96166074009005;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    bk = dk > dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = dk > dk;
    on += dk;
    dk *= -1;
    Thought lo4 = Thought40.getInstance();
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo5 = Thought74.getInstance(bk, bk, bk, bk);
</cutPoint2045>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2046>
    dk = dk + dk;
    double ld0 = 185.0170272869983;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk);
</cutPoint2046>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2047>
    Thought lo0 = Thought13.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    Thought lo1 = Thought59.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb2 = false;
    double ld3 = 290.358390767146;
    bk = bk && bk;
    on -= dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb4 = true;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    double ld5 = 539.5755075124341;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2047>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2048>
    bk = bk || bk;
    bk = bk || bk;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    double ld0 = 187.2661196996485;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
        on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2048>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2049>
    boolean lb0 = true;
    bk = bk || bk;
    double ld1 = 521.0215359135194;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = false;
    bk = bk || bk;
    dk = dk + dk;
    double ld3 = 701.5983484187714;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        bk = dk > dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo4 = Thought21.getInstance();
        bk = !bk;
        boolean lb5 = true;
        bk = ok.m2(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        on -= dk;
        bk = bk || bk;
</cutPoint2049>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2050>
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo0 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    double ld2 = 623.9033092532162;
    dk = dk + dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo3 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    boolean lb4 = false;
    bk = !bk;
    on -= dk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = true;
</cutPoint2050>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2051>
    double ld0 = 167.23182871009791;
    dk = dk + dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    bk = bk || bk;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    double ld1 = 117.59408008075835;
</cutPoint2051>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2052>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2();
</cutPoint2052>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2053>
    Thought lo0 = Thought25.getInstance(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb1 = true;
    boolean lb2 = false;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    Thought lo4 = Thought60.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    boolean lb5 = true;
    bk = !bk;
    Thought lo6 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    double ld7 = 375.4575063902029;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2053>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2054>
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    bk = bk || bk;
    boolean lb0 = true;
    bk = !bk;
    on += dk;
    bk = bk || bk;
    Thought lo1 = Thought27.getInstance();
    ok.m3(dk, dk, dk, dk);
    boolean lb2 = true;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    if (bk) {
        boolean lb4 = false;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        bk = dk > dk;
        dk *= -1;
        dk = dk - dk;
        dk *= -1;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2054>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2055>
    dk *= -1;
    boolean lb0 = true;
    dk = dk + dk;
    dk *= -1;
    on -= dk;
    bk = bk || bk;
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk || bk;
    boolean lb1 = true;
    bk = !bk;
</cutPoint2055>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2056>
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    bk = dk > dk;
    boolean lb0 = true;
    dk *= -1;
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    bk = !bk;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
</cutPoint2056>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2057>
    Thought lo0 = Thought99.getInstance();
    ok.m2(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    double ld1 = 231.2136907051634;
    dk = dk - dk;
    double ld2 = 492.4437330158414;
    Thought lo3 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld4 = 616.3536153839619;
    bk = bk || bk;
    double ld5 = 45.66678863056195;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint2057>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2058>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 167.279281223322;
    ok.m1();
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    if (bk) {
        ok.m3(bk, bk, bk, bk);
        boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        boolean lb2 = false;
        bk = dk < dk;
        bk = !bk;
        dk = dk + dk;
        bk = dk > dk;
        bk = !bk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld3 = 309.3815918643529;
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        on -= dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        bk = !bk;
        boolean lb4 = true;
</cutPoint2058>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2059>
    boolean lb0 = false;
    bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk + dk;
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    on -= dk;
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    bk = bk && bk;
</cutPoint2059>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2060>
    boolean lb0 = true;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = false;
    boolean lb2 = true;
    ok = ok.m4();
    dk *= -1;
    on += dk;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    bk = !bk;
</cutPoint2060>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2061>
    bk = dk < dk;
    Thought lo0 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = bk || bk;
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        bk = !bk;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = dk > dk;
        bk = ok.m2();
        Thought lo1 = Thought27.getInstance(dk, dk, dk, dk);
        bk = dk < dk;
        Thought lo2 = Thought15.getInstance(bk, bk, bk, bk);
        dk *= -1;
        Thought lo3 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo4 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb5 = true;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2061>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2062>
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 461.68250976209225;
    dk = dk - dk;
    dk = ok.m3();
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    </cutPoint2062>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2063>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    Thought lo1 = Thought12.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2063>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2064>
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
    on += dk;
    boolean lb1 = true;
    bk = dk > dk;
        double ld2 = 140.94953059883755;
    boolean lb3 = false;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2064>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought59 extends Thought{
private static ArrayList<Thought59> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 475.86984845188204;
private double fd1 = 68.50708370746223;
private Thought fo0 = null;
private Thought fo1 = null;
Thought59 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought59 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought59 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought59 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought59 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought59 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought59 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought59 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought59 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought59 instance = new Thought59 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought59 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought59 instance = new Thought59 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought59 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought59 instance = new Thought59 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought59 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought59 instance = new Thought59 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought59 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought59 instance = new Thought59 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought59 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought59 instance = new Thought59 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought59 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought59 instance = new Thought59 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought59 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought59 instance = new Thought59 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2065>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    on -= dk;
    boolean lb0 = true;
    boolean lb1 = true;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb2 = false;
    Thought lo3 = Thought25.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = bk || bk;
    dk = dk + dk;
</cutPoint2065>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2066>
    dk = dk - dk;
    bk = bk && bk;
        dk = dk - dk;
    boolean lb0 = false;
    bk = dk > dk;
    dk = ok.m3();
    ok.m3(dk, dk, dk, dk);
    double ld1 = 401.9219525992713;
    bk = dk > dk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    boolean lb2 = false;
    dk *= -1;
    bk = bk || bk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
</cutPoint2066>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2067>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 39.885556138052486;
    if (bk) {
        dk = dk + dk;
        bk = bk && bk;
        } else if (bk) {
        Thought lo1 = Thought60.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        Thought lo2 = Thought86.getInstance(dk, dk, dk, dk);
</cutPoint2067>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2068>
    boolean lb0 = true;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought95.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb2 = true;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk + dk;
    boolean lb3 = false;
    bk = dk > dk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2068>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2069>
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk *= -1;
    if (bk) {
        dk = dk + dk;
        dk = dk - dk;
        double ld0 = 243.175083504642;
</cutPoint2069>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2070>
    bk = bk || bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld0 = 729.6462234435357;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk || bk;
    Thought lo3 = Thought47.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb4 = true;
    Thought lo5 = Thought61.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo6 = Thought73.getInstance(bk, bk, bk, bk);
    Thought lo7 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint2070>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2071>
    bk = bk || bk;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 554.052219318433;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    dk = dk + dk;
    double ld1 = 880.4604515883768;
    double ld2 = 10.946493487314438;
    bk = dk < dk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb3 = true;
    ok.m2(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb4 = true;
    boolean lb5 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb6 = false;
    boolean lb7 = true;
</cutPoint2071>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2072>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    bk = bk || bk;
        dk = ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought31.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld1 = 387.4192982390128;
    double ld2 = 275.5415601726733;
</cutPoint2072>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2073>
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 954.9127678449238;
    bk = bk || bk;
    boolean lb1 = true;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 790.6144621398073;
    double ld3 = 410.24692357280253;
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4();
    bk = !bk;
    Thought lo4 = Thought42.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint2073>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2074>
    boolean lb0 = false;
    dk = dk - dk;
    double ld1 = 221.6948896035324;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 230.0197034313998;
    double ld3 = 729.3050578301117;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
    double ld4 = 758.45108162518;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        boolean lb5 = true;
        ok.m3(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        dk *= -1;
        ok = ok.m4();
        bk = bk || bk;
        dk = dk - dk;
        dk = dk - dk;
        dk *= -1;
        ok = ok.m4(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        Thought lo6 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2074>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2075>
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 558.0550543866144;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb1 = false;
    bk = !bk;
    dk *= -1;
    boolean lb2 = false;
    bk = dk < dk;
    on += dk;
    boolean lb3 = false;
    boolean lb4 = true;
    on += dk;
    bk = dk > dk;
    on -= dk;
    double ld5 = 919.7726635578134;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    boolean lb6 = false;
    dk = dk - dk;
</cutPoint2075>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2076>
    bk = dk > dk;
    bk = !bk;
    bk = bk || bk;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
        boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
</cutPoint2076>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2077>
    boolean lb0 = true;
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    Thought lo2 = Thought23.getInstance(dk, dk, dk, dk);
            ok.m1(bk, bk, bk, bk);
    Thought lo3 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2077>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2078>
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    Thought lo0 = Thought99.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = true;
    dk = dk + dk;
    dk = dk - dk;
    double ld2 = 18.158080688207075;
    ok = ok.m4();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought11.getInstance(bk, bk, bk, bk);
    dk *= -1;
    double ld4 = 566.4286374525942;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo5 = Thought90.getInstance(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    for(int j=0; j<10; j++){
</cutPoint2078>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2079>
    bk = ok.m2(dk, dk, dk, dk);
    double ld0 = 927.2540749051311;
    bk = dk > dk;
    bk = bk && bk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        Thought lo1 = Thought10.getInstance(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2079>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2080>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought4.getInstance(ok, ok, ok, ok);
    double ld1 = 444.6431416034962;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    boolean lb2 = true;
    ok.m2();
    on -= dk;
    dk *= -1;
    dk = dk - dk;
</cutPoint2080>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2081>
    ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    dk *= -1;
    double ld0 = 16.98253508977133;
    dk *= -1;
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = dk - dk;
    bk = dk > dk;
    dk = dk - dk;
    double ld2 = 703.5193481670178;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
</cutPoint2081>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2082>
    bk = !bk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        dk *= -1;
        Thought lo1 = Thought98.getInstance();
        Thought lo2 = Thought22.getInstance(dk, dk, dk, dk);
        bk = bk || bk;
        ok.m3(bk, bk, bk, bk);
        boolean lb3 = true;
        for(int j=0; j<10; j++){
            bk = bk || bk;
            bk = dk > dk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            Thought lo4 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            on += dk;
            bk = dk < dk;
            dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok);
            double ld5 = 430.2026229565507;
            bk = !bk;
            on += dk;
            boolean lb6 = false;
            dk = dk - dk;
            ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            dk *= -1;
</cutPoint2082>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2083>
    dk = ok.m3();
    dk = dk + dk;
        bk = !bk;
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
    Thought lo0 = Thought9.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        dk = ok.m3();
        bk = dk < dk;
        double ld2 = 609.1744746280738;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        double ld3 = 116.21181246656049;
        on += dk;
</cutPoint2083>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2084>
    double ld0 = 89.75584236448083;
    bk = bk || bk;
    Thought lo1 = Thought3.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    double ld2 = 354.5356733063378;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb3 = false;
    bk = bk || bk;
        bk = !bk;
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
</cutPoint2084>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2085>
    on += dk;
    Thought lo0 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought74.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld3 = 569.0045484680466;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk && bk;
    on -= dk;
    boolean lb4 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    ok.m2();
    Thought lo5 = Thought75.getInstance(dk, dk, dk, dk);
    boolean lb6 = false;
    Thought lo7 = Thought32.getInstance(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
        boolean lb8 = false;
    bk = !bk;
    dk = dk + dk;
    bk = !bk;
</cutPoint2085>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2086>
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought52.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok);
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        ok = ok.m4();
        bk = dk > dk;
        double ld1 = 593.1574554004508;
        Thought lo2 = Thought37.getInstance(dk, dk, dk, dk);
        Thought lo3 = Thought9.getInstance(bk, bk, bk, bk);
        } else {
        bk = dk > dk;
</cutPoint2086>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2087>
    boolean lb0 = true;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 57.690627741002196;
    dk *= -1;
    dk = dk + dk;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
</cutPoint2087>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2088>
        Thought lo0 = Thought46.getInstance(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo1 = Thought43.getInstance();
    ok.m1(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk < dk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    double ld2 = 237.99056881549132;
    double ld3 = 962.3626663779913;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = dk > dk;
    Thought lo4 = Thought8.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint2088>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2089>
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    double ld0 = 171.11729023150681;
    bk = dk > dk;
    Thought lo1 = Thought98.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
    dk = dk + dk;
    ok = ok.m4();
    bk = bk && bk;
    bk = bk && bk;
    boolean lb2 = false;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb3 = false;
    boolean lb4 = true;
    bk = dk > dk;
    dk = dk + dk;
    boolean lb5 = false;
    ok.m1(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb6 = false;
    boolean lb7 = true;
    bk = dk < dk;
        dk = dk - dk;
    double ld8 = 349.7496930515002;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2089>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2090>
        ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 693.1628326826259;
    dk *= -1;
    ok = ok.m4();
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    Thought lo1 = Thought36.getInstance(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 895.7010575757095;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2090>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2091>
    bk = dk > dk;
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    on -= dk;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        Thought lo1 = Thought80.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        double ld2 = 204.51107893584089;
        if (bk) {
            dk = dk + dk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk + dk;
            bk = !bk;
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2091>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2092>
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok.m2(dk, dk, dk, dk);
    on -= dk;
    double ld0 = 637.9563739317155;
    double ld1 = 763.0457345661254;
        ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    Thought lo2 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought65.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb4 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb5 = true;
    dk = dk + dk;
</cutPoint2092>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2093>
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    boolean lb0 = true;
    dk = dk - dk;
    boolean lb1 = true;
    bk = dk > dk;
    bk = dk < dk;
    ok.m1(bk, bk, bk, bk);
    boolean lb2 = false;
    Thought lo3 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = false;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        if (bk) {
            bk = bk && bk;
            ok = ok.m4(ok, ok, ok, ok);
            bk = bk && bk;
            dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            on -= dk;
            bk = bk && bk;
</cutPoint2093>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2094>
    bk = ok.m2();
    on -= dk;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = true;
    double ld2 = 235.73298505161114;
    bk = !bk;
    </cutPoint2094>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2095>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    bk = bk || bk;
    bk = dk > dk;
    Thought lo0 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    double ld1 = 640.7517686016026;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk > dk;
        bk = ok.m2();
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        double ld2 = 888.730594503676;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint2095>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2096>
    bk = bk || bk;
    Thought lo0 = Thought0.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought85.getInstance();
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    boolean lb2 = false;
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        dk *= -1;
        ok = ok.m4(bk, bk, bk, bk);
        dk *= -1;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld4 = 657.377765806134;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo5 = Thought22.getInstance(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        bk = bk || bk;
        Thought lo6 = Thought5.getInstance();
        Thought lo7 = Thought77.getInstance(dk, dk, dk, dk);
        dk = dk + dk;
        boolean lb8 = true;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2096>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2097>
    Thought lo0 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought25.getInstance(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2097>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2098>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = !bk;
    bk = bk || bk;
    bk = dk > dk;
    on += dk;
    boolean lb1 = false;
    boolean lb2 = false;
    boolean lb3 = false;
    on += dk;
    dk = dk - dk;
        bk = dk > dk;
    on += dk;
    bk = dk > dk;
    Thought lo4 = Thought36.getInstance(ok, ok, ok, ok);
    double ld5 = 65.81304346569787;
    double ld6 = 489.46919681361953;
    boolean lb7 = true;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2098>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2099>
    dk = dk + dk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    double ld0 = 427.9892960025738;
    double ld1 = 219.9273978910144;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = !bk;
    bk = dk < dk;
    dk *= -1;
    bk = bk || bk;
    Thought lo2 = Thought16.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    ok.m2();
    boolean lb3 = false;
</cutPoint2099>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought60 extends Thought{
private static ArrayList<Thought60> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 467.14015590901784;
private double fd1 = 984.2607592677725;
private Thought fo0 = null;
private Thought fo1 = null;
Thought60 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought60 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought60 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought60 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought60 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought60 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought60 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought60 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought60 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought60 instance = new Thought60 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought60 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought60 instance = new Thought60 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought60 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought60 instance = new Thought60 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought60 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought60 instance = new Thought60 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought60 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought60 instance = new Thought60 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought60 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought60 instance = new Thought60 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought60 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought60 instance = new Thought60 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought60 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought60 instance = new Thought60 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2100>
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    on += dk;
    bk = dk > dk;
    bk = dk > dk;
    ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    boolean lb0 = true;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    dk = dk - dk;
</cutPoint2100>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2101>
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 589.2726782725438;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok);
    on += dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
</cutPoint2101>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2102>
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
    Thought lo0 = Thought69.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    boolean lb2 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
        double ld3 = 567.801537563134;
    bk = dk > dk;
    dk *= -1;
    bk = bk && bk;
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    on += dk;
    dk = dk - dk;
    dk = dk + dk;
</cutPoint2102>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2103>
    boolean lb0 = true;
    double ld1 = 332.2672799693149;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb2 = true;
    boolean lb3 = false;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2103>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2104>
    Thought lo0 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb1 = true;
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    double ld3 = 668.3715870296211;
    for(int j=0; j<10; j++){
        double ld4 = 392.8896654085671;
        for(int j=0; j<10; j++){
            bk = dk > dk;
            bk = bk && bk;
            Thought lo5 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk && bk;
            dk = dk + dk;
            bk = dk > dk;
</cutPoint2104>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2105>
    bk = dk > dk;
    Thought lo0 = Thought58.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2();
        dk = dk + dk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        } else {
        bk = dk < dk;
        on += dk;
        bk = dk < dk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = bk || bk;
        boolean lb1 = true;
        bk = bk && bk;
        bk = dk < dk;
        boolean lb2 = false;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        bk = bk || bk;
</cutPoint2105>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2106>
    Thought lo0 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    on -= dk;
    bk = !bk;
    bk = dk < dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    on += dk;
    dk = dk - dk;
    double ld1 = 724.6441584848675;
    boolean lb2 = true;
    bk = bk || bk;
    boolean lb3 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
</cutPoint2106>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2107>
    Thought lo0 = Thought31.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld1 = 320.8573071170602;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 379.2020747753667;
    boolean lb3 = false;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    Thought lo4 = Thought16.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    boolean lb5 = true;
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint2107>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2108>
    dk = dk - dk;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo1 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        on += dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb2 = false;
        }
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = false;
    ok.m2(bk, bk, bk, bk);
    double ld4 = 201.72890269781948;
    double ld5 = 508.0042541776487;
    bk = dk > dk;
    boolean lb6 = true;
    dk *= -1;
    if (bk) {
        bk = dk > dk;
        double ld7 = 850.3765378992265;
</cutPoint2108>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2109>
    dk = dk - dk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 802.0629764289224;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    boolean lb2 = false;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb3 = false;
</cutPoint2109>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2110>
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on -= dk;
    bk = ok.m2();
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        double ld1 = 388.5125824936933;
        on -= dk;
        dk *= -1;
        on += dk;
        Thought lo2 = Thought77.getInstance(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo3 = Thought79.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo4 = Thought44.getInstance(ok, ok, ok, ok);
        bk = !bk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2110>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2111>
    dk *= -1;
    double ld0 = 460.2653384088371;
    on += dk;
    double ld1 = 581.2017165718071;
    bk = !bk;
    dk = ok.m3();
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2111>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2112>
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    boolean lb1 = true;
    if (bk) {
        on += dk;
        dk = dk + dk;
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        dk *= -1;
        bk = bk || bk;
        dk *= -1;
        Thought lo2 = Thought89.getInstance();
        boolean lb3 = false;
        on += dk;
        dk = dk + dk;
        dk = dk + dk;
        dk = dk + dk;
        dk *= -1;
</cutPoint2112>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2113>
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = bk || bk;
    Thought lo0 = Thought92.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2113>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2114>
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    double ld0 = 246.492680719022;
    bk = !bk;
    bk = bk && bk;
    Thought lo1 = Thought67.getInstance(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    double ld2 = 312.9293053786737;
    bk = bk || bk;
    double ld3 = 432.37573467350774;
    bk = bk || bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2114>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2115>
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
        boolean lb0 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 693.2520133152485;
    ok.m2(ok, ok, ok, ok);
    boolean lb3 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    double ld4 = 289.6963858413234;
    bk = dk > dk;
    boolean lb5 = true;
</cutPoint2115>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2116>
    dk *= -1;
    bk = dk < dk;
    double ld0 = 715.5849325259718;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = false;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 562.6318424741605;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    dk = dk - dk;
</cutPoint2116>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2117>
    bk = bk || bk;
    dk = dk + dk;
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb0 = true;
    dk *= -1;
    bk = dk < dk;
    dk *= -1;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2117>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2118>
    bk = !bk;
    bk = bk && bk;
    boolean lb0 = false;
    Thought lo1 = Thought61.getInstance(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    on += dk;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
</cutPoint2118>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2119>
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    if (bk) {
        bk = dk < dk;
        bk = dk > dk;
        bk = bk && bk;
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        bk = bk && bk;
        ok = ok.m4();
        dk = ok.m3(dk, dk, dk, dk);
        bk = !bk;
        boolean lb0 = true;
        double ld1 = 531.6903953668292;
        bk = !bk;
        dk *= -1;
        Thought lo2 = Thought24.getInstance(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        dk *= -1;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
</cutPoint2119>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2120>
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    double ld0 = 106.24853351653421;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought91.getInstance(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        boolean lb2 = true;
        dk = dk - dk;
        ok.m2(bk, bk, bk, bk);
        bk = bk || bk;
        boolean lb3 = true;
</cutPoint2120>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2121>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok);
        on -= dk;
        bk = bk || bk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        double ld2 = 633.0786661774246;
        bk = bk || bk;
        Thought lo3 = Thought54.getInstance(dk, dk, dk, dk);
        dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        bk = dk > dk;
        dk *= -1;
        boolean lb4 = true;
        dk = dk - dk;
        bk = dk > dk;
</cutPoint2121>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2122>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = !bk;
    ok.m3(dk, dk, dk, dk);
    boolean lb1 = true;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk + dk;
    boolean lb3 = false;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb4 = true;
    bk = !bk;
    boolean lb5 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb6 = true;
    ok.m2();
</cutPoint2122>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2123>
    for(int j=0; j<10; j++){
        bk = dk > dk;
        Thought lo0 = Thought98.getInstance(dk, dk, dk, dk);
        dk = dk - dk;
        dk = dk + dk;
        boolean lb1 = true;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = !bk;
        Thought lo2 = Thought78.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld3 = 604.1882746065224;
        bk = dk > dk;
</cutPoint2123>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2124>
    on -= dk;
    bk = bk && bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = dk + dk;
        bk = dk < dk;
        dk *= -1;
        on += dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok);
        bk = dk < dk;
        on -= dk;
        dk = dk - dk;
        boolean lb0 = false;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3();
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint2124>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2125>
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
        dk = dk - dk;
    dk = dk + dk;
    Thought lo0 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    on += dk;
</cutPoint2125>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2126>
    bk = dk > dk;
    bk = dk > dk;
    double ld0 = 599.0999380715142;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3();
    ok.m3(dk, dk, dk, dk);
    boolean lb1 = false;
    ok.m2(bk, bk, bk, bk);
    boolean lb2 = false;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = dk > dk;
        bk = !bk;
        on -= dk;
        bk = dk < dk;
        Thought lo3 = Thought7.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb4 = true;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
        dk = dk + dk;
</cutPoint2126>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2127>
    double ld0 = 998.591889265822;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    on += dk;
    dk *= -1;
    bk = dk > dk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        boolean lb2 = true;
        boolean lb3 = true;
</cutPoint2127>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2128>
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    ok.m2(bk, bk, bk, bk);
    on -= dk;
    boolean lb0 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
        bk = dk > dk;
    bk = bk || bk;
    Thought lo3 = Thought1.getInstance();
    boolean lb4 = false;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2128>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2129>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk < dk;
    dk = dk + dk;
    bk = bk || bk;
    dk *= -1;
    Thought lo0 = Thought71.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    double ld2 = 538.505740343796;
    ok = ok.m4();
    dk = dk - dk;
</cutPoint2129>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2130>
    Thought lo0 = Thought43.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    Thought lo1 = Thought85.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    double ld2 = 574.859336241649;
    double ld3 = 129.81607236591046;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2130>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2131>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    on += dk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    double ld0 = 241.40192145630226;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought59.getInstance(ok, ok, ok, ok);
    double ld2 = 966.6076607273774;
    boolean lb3 = true;
    dk = dk + dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo4 = Thought16.getInstance(bk, bk, bk, bk);
</cutPoint2131>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2132>
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    bk = bk || bk;
    on += dk;
    boolean lb0 = true;
    on += dk;
    bk = !bk;
    bk = dk < dk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo1 = Thought35.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2132>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2133>
    dk = dk + dk;
    double ld0 = 122.28209591004511;
    boolean lb1 = false;
    bk = bk && bk;
    Thought lo2 = Thought48.getInstance();
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    double ld3 = 67.01200769001892;
        dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    Thought lo4 = Thought35.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    on += dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        </cutPoint2133>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2134>
    ok = ok.m4();
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought98.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    dk = dk + dk;
</cutPoint2134>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought61 extends Thought{
private static ArrayList<Thought61> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 110.02513253671108;
private double fd1 = 883.6906726142496;
private Thought fo0 = null;
private Thought fo1 = null;
Thought61 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought61 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought61 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought61 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought61 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought61 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought61 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought61 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought61 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought61 instance = new Thought61 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought61 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought61 instance = new Thought61 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought61 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought61 instance = new Thought61 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought61 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought61 instance = new Thought61 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought61 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought61 instance = new Thought61 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought61 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought61 instance = new Thought61 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought61 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought61 instance = new Thought61 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought61 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought61 instance = new Thought61 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2135>
    dk = dk + dk;
    bk = !bk;
    boolean lb0 = false;
    on -= dk;
    on -= dk;
    dk = dk + dk;
    dk = dk + dk;
    ok.m3();
    bk = bk && bk;
    Thought lo1 = Thought55.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    bk = bk && bk;
    on += dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
</cutPoint2135>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2136>
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought32.getInstance();
        ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    boolean lb1 = true;
    Thought lo2 = Thought83.getInstance(bk, bk, bk, bk);
    Thought lo3 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    boolean lb5 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo6 = Thought52.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld7 = 195.78150797622897;
    ok = ok.m4();
    dk = dk - dk;
    on += dk;
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    dk *= -1;
</cutPoint2136>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2137>
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought62.getInstance();
    dk *= -1;
    dk = dk + dk;
    on -= dk;
    bk = dk > dk;
    double ld2 = 820.591216174944;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint2137>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2138>
    double ld0 = 660.9438171351063;
    boolean lb1 = false;
    Thought lo2 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 429.28684037900206;
    on += dk;
    dk *= -1;
    bk = dk > dk;
    bk = bk || bk;
    dk *= -1;
    boolean lb4 = true;
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok);
    boolean lb5 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo6 = Thought44.getInstance();
    on += dk;
    ok.m1(dk, dk, dk, dk);
</cutPoint2138>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2139>
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = true;
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        bk = dk > dk;
        dk *= -1;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2139>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2140>
    bk = dk > dk;
    Thought lo0 = Thought39.getInstance();
    boolean lb1 = false;
    bk = bk || bk;
    Thought lo2 = Thought10.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo3 = Thought75.getInstance(bk, bk, bk, bk);
    Thought lo4 = Thought52.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo5 = Thought78.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb6 = true;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
</cutPoint2140>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2141>
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        ok.m3();
        ok.m3(dk, dk, dk, dk);
        bk = bk || bk;
        ok.m2(bk, bk, bk, bk);
        dk = dk + dk;
        boolean lb1 = true;
        for(int j=0; j<10; j++){
            double ld2 = 70.31211039684692;
            bk = dk < dk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            Thought lo3 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = !bk;
</cutPoint2141>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2142>
    bk = bk && bk;
    bk = dk < dk;
    double ld0 = 990.3906541906847;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3();
    if (bk) {
        if (bk) {
            bk = bk && bk;
            } else if (bk) {
            boolean lb2 = true;
            bk = dk < dk;
            double ld3 = 429.63619419035456;
            bk = !bk;
            bk = dk > dk;
</cutPoint2142>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2143>
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    on -= dk;
    bk = dk < dk;
    dk *= -1;
        boolean lb0 = false;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
</cutPoint2143>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2144>
    bk = bk || bk;
        Thought lo0 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on -= dk;
        bk = dk < dk;
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 416.7356403032628;
    boolean lb2 = false;
    boolean lb3 = false;
</cutPoint2144>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2145>
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    ok.m2(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    double ld0 = 830.304836124546;
    boolean lb1 = true;
    dk = dk - dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2145>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2146>
    double ld0 = 644.17282902345;
    ok.m1();
    boolean lb1 = true;
    dk = dk - dk;
    double ld2 = 944.8544095766325;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = false;
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    double ld4 = 676.2298088562262;
    bk = dk > dk;
    dk = dk - dk;
    on -= dk;
    bk = !bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = bk || bk;
        ok = ok.m4();
        dk *= -1;
        bk = dk < dk;
</cutPoint2146>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2147>
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought4.getInstance(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    double ld1 = 920.2132233777423;
    bk = !bk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb2 = false;
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
</cutPoint2147>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2148>
    if (bk) {
        boolean lb0 = true;
        double ld1 = 845.496229184493;
        bk = ok.m2(bk, bk, bk, bk);
        if (bk) {
            on -= dk;
            double ld2 = 970.6576989708043;
            boolean lb3 = false;
            Thought lo4 = Thought92.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk + dk;
            boolean lb5 = true;
            ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            if (bk) {
                double ld6 = 900.68699839759;
</cutPoint2148>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2149>
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb0 = false;
        bk = dk < dk;
        ok = ok.m4();
        on += dk;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk && bk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = bk && bk;
        dk *= -1;
        on -= dk;
        Thought lo1 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        bk = dk < dk;
        } else {
        bk = dk > dk;
        for(int j=0; j<10; j++){
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk > dk;
</cutPoint2149>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2150>
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    double ld1 = 320.21334143777494;
    boolean lb2 = false;
    dk = dk + dk;
    on -= dk;
    dk = ok.m3();
    Thought lo3 = Thought90.getInstance(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 121.25600620533659;
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    boolean lb5 = false;
    double ld6 = 920.2254945441908;
    bk = bk && bk;
    boolean lb7 = false;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb8 = false;
    bk = bk && bk;
    dk = dk - dk;
</cutPoint2150>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2151>
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    Thought lo1 = Thought54.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb2 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    dk *= -1;
</cutPoint2151>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2152>
    double ld0 = 424.2275993145723;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 368.29776251464506;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb2 = true;
    dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = false;
    on -= dk;
</cutPoint2152>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2153>
    bk = bk || bk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 835.6320816874382;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld1 = 414.9656056458669;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought18.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    boolean lb3 = true;
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    boolean lb5 = false;
    boolean lb6 = false;
    dk = dk + dk;
    bk = bk || bk;
    boolean lb7 = false;
    dk = dk - dk;
    Thought lo8 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2153>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2154>
    on += dk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought77.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
        boolean lb2 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb3 = false;
    dk = dk - dk;
    dk = dk + dk;
    double ld4 = 715.7522529513628;
</cutPoint2154>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2155>
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        Thought lo0 = Thought55.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = !bk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        dk = dk + dk;
        for(int j=0; j<10; j++){
            double ld1 = 382.4583790607312;
            ok = ok.m4(dk, dk, dk, dk);
            double ld2 = 429.7518639817202;
            bk = dk < dk;
</cutPoint2155>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2156>
    for(int j=0; j<10; j++){
        dk *= -1;
        bk = bk && bk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = false;
        bk = bk || bk;
        bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 817.1856561432112;
        on += dk;
        on -= dk;
        ok.m3();
        double ld2 = 881.477401263016;
        bk = ok.m2(dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        boolean lb3 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2156>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2157>
    bk = bk && bk;
    boolean lb0 = true;
        Thought lo1 = Thought2.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 840.0157578503662;
    double ld3 = 603.5510579876454;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo4 = Thought42.getInstance(ok, ok, ok, ok);
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo5 = Thought88.getInstance();
    on += dk;
    bk = dk < dk;
    double ld6 = 863.0275847839745;
    dk *= -1;
    bk = bk && bk;
</cutPoint2157>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2158>
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 54.42554511020605;
    boolean lb1 = false;
    double ld2 = 821.396421071563;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 423.2089357009691;
    dk = dk - dk;
    bk = bk && bk;
    double ld4 = 326.6157641988199;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb5 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint2158>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2159>
    bk = bk || bk;
        ok.m2(ok, ok, ok, ok);
    dk *= -1;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought27.getInstance();
    boolean lb1 = true;
    ok.m1(dk, dk, dk, dk);
    bk = dk > dk;
    on += dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = bk || bk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    on -= dk;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb3 = false;
</cutPoint2159>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2160>
    double ld0 = 921.0557370179645;
    Thought lo1 = Thought65.getInstance(ok, ok, ok, ok);
    dk *= -1;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    bk = dk < dk;
    bk = bk && bk;
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    bk = bk || bk;
    dk *= -1;
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok.m3();
</cutPoint2160>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2161>
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    ok.m1(dk, dk, dk, dk);
    dk *= -1;
    boolean lb2 = false;
    on -= dk;
    Thought lo3 = Thought49.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
</cutPoint2161>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2162>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    boolean lb0 = false;
    bk = dk > dk;
    dk *= -1;
    bk = !bk;
    bk = bk && bk;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2162>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2163>
    Thought lo0 = Thought63.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    dk *= -1;
    boolean lb1 = true;
    on += dk;
    Thought lo2 = Thought38.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb3 = false;
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo4 = Thought58.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2163>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2164>
    boolean lb0 = false;
    double ld1 = 513.8136556808987;
    double ld2 = 752.8551874476154;
    boolean lb3 = false;
    boolean lb4 = true;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = false;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb6 = true;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb7 = true;
    ok = ok.m4();
    boolean lb8 = false;
    double ld9 = 161.62134854438486;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint2164>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2165>
    on += dk;
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 128.64358662845234;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
        dk = ok.m3();
    bk = dk > dk;
    bk = bk && bk;
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
    bk = !bk;
    bk = !bk;
    dk *= -1;
    if (bk) {
        ok.m3(bk, bk, bk, bk);
</cutPoint2165>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2166>
    dk = dk + dk;
    on -= dk;
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok);
    double ld1 = 140.38280300939618;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    on += dk;
    dk = dk - dk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    Thought lo3 = Thought33.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2166>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2167>
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk - dk;
    on += dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    double ld0 = 415.14249312325603;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    boolean lb1 = true;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = !bk;
</cutPoint2167>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2168>
    bk = bk && bk;
    Thought lo0 = Thought57.getInstance();
    dk = dk - dk;
    Thought lo1 = Thought62.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo2 = Thought75.getInstance(bk, bk, bk, bk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    on -= dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb3 = false;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint2168>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2169>
    boolean lb0 = true;
    on += dk;
    Thought lo1 = Thought75.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb2 = false;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    Thought lo3 = Thought26.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb4 = true;
    double ld5 = 643.5418009902756;
    bk = dk < dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2169>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought62 extends Thought{
private static ArrayList<Thought62> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 145.66281362783573;
private double fd1 = 945.4646211895305;
private Thought fo0 = null;
private Thought fo1 = null;
Thought62 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought62 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought62 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought62 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought62 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought62 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought62 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought62 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought62 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought62 instance = new Thought62 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought62 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought62 instance = new Thought62 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought62 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought62 instance = new Thought62 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought62 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought62 instance = new Thought62 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought62 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought62 instance = new Thought62 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought62 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought62 instance = new Thought62 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought62 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought62 instance = new Thought62 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought62 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought62 instance = new Thought62 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2170>
    double ld0 = 470.60992429135354;
    dk = dk - dk;
    double ld1 = 925.0970888450547;
    Thought lo2 = Thought79.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    dk *= -1;
    boolean lb4 = true;
    double ld5 = 567.9711946499006;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    double ld6 = 937.5555529117405;
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    bk = dk > dk;
</cutPoint2170>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2171>
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk = dk + dk;
    boolean lb0 = true;
    dk = dk + dk;
    boolean lb1 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought10.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 224.02149460487877;
    ok.m2(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb4 = true;
</cutPoint2171>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2172>
    bk = !bk;
    dk = dk - dk;
    bk = !bk;
    bk = bk && bk;
    ok.m3(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    dk = dk - dk;
    bk = !bk;
    boolean lb1 = false;
    dk = dk - dk;
</cutPoint2172>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2173>
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    on -= dk;
    bk = bk && bk;
    dk = dk - dk;
    on -= dk;
    boolean lb0 = true;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    Thought lo2 = Thought24.getInstance(ok, ok, ok, ok);
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint2173>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2174>
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought30.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = dk < dk;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok);
</cutPoint2174>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2175>
    bk = dk > dk;
    on -= dk;
        dk *= -1;
    boolean lb0 = false;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought50.getInstance(dk, dk, dk, dk);
    Thought lo2 = Thought75.getInstance(bk, bk, bk, bk);
    boolean lb3 = false;
    bk = bk || bk;
    dk = dk - dk;
    bk = dk < dk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb4 = false;
    on -= dk;
    if (bk) {
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk = dk - dk;
        bk = dk > dk;
        bk = dk > dk;
        bk = dk < dk;
</cutPoint2175>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2176>
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 816.4108329507799;
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
        bk = !bk;
</cutPoint2176>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2177>
        Thought lo0 = Thought60.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        boolean lb1 = false;
        dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk && bk;
        double ld2 = 286.5281147235261;
        ok = ok.m4(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo3 = Thought96.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        bk = dk < dk;
        on -= dk;
        bk = dk > dk;
        boolean lb4 = false;
        bk = bk || bk;
</cutPoint2177>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2178>
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    double ld0 = 577.8288791599505;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    boolean lb1 = true;
    double ld2 = 629.8266771574944;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = false;
    double ld4 = 515.705886773192;
    double ld5 = 972.6842615369442;
    dk *= -1;
    boolean lb6 = false;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo7 = Thought18.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2178>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2179>
    bk = dk > dk;
    double ld0 = 983.0874706784704;
    dk = dk + dk;
    dk = dk - dk;
    dk = dk - dk;
    Thought lo1 = Thought77.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 410.652758455587;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk > dk;
    dk = dk - dk;
    dk = dk + dk;
    ok.m1(bk, bk, bk, bk);
    double ld3 = 382.87753302984044;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought29.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2179>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2180>
    bk = ok.m2(ok, ok, ok, ok);
    double ld0 = 54.80095812445446;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk > dk;
    dk = dk - dk;
    bk = dk < dk;
    bk = bk && bk;
    bk = !bk;
    boolean lb1 = true;
    double ld2 = 868.6249899616155;
    Thought lo3 = Thought56.getInstance(dk, dk, dk, dk);
    Thought lo4 = Thought46.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb5 = false;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    Thought lo6 = Thought52.getInstance(dk, dk, dk, dk);
    boolean lb7 = true;
</cutPoint2180>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2181>
    on -= dk;
    double ld0 = 368.5703220920755;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 591.2465789349214;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok);
    Thought lo3 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint2181>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2182>
    bk = dk > dk;
    bk = dk < dk;
    bk = ok.m2();
    Thought lo0 = Thought39.getInstance(dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    boolean lb1 = true;
    boolean lb2 = true;
    boolean lb3 = true;
    bk = !bk;
    bk = !bk;
    dk *= -1;
    dk *= -1;
</cutPoint2182>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2183>
    if (bk) {
        bk = ok.m2(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld0 = 51.9188811142792;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        if (bk) {
            double ld1 = 800.122657335513;
            ok.m3();
            double ld2 = 72.30505563137415;
</cutPoint2183>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2184>
    on -= dk;
    ok.m3(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld0 = 8.650500101113764;
        boolean lb1 = false;
        dk = dk + dk;
        boolean lb2 = true;
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok);
        bk = bk && bk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        dk = dk + dk;
        Thought lo3 = Thought63.getInstance();
        bk = dk < dk;
        dk *= -1;
        double ld4 = 312.7083722296324;
        bk = bk && bk;
</cutPoint2184>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2185>
        dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    double ld0 = 895.8773660226906;
    boolean lb1 = false;
    dk *= -1;
    Thought lo2 = Thought2.getInstance(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    double ld3 = 259.1557918043127;
    bk = bk || bk;
    bk = dk < dk;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo4 = Thought29.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
</cutPoint2185>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2186>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought57.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    dk = dk - dk;
    bk = bk && bk;
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    bk = !bk;
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2186>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2187>
    ok.m2(ok, ok, ok, ok);
    bk = !bk;
    boolean lb0 = false;
    bk = bk || bk;
    boolean lb1 = false;
    bk = dk < dk;
    Thought lo2 = Thought44.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    ok.m3();
    ok.m2(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 296.76781377429074;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    dk = dk + dk;
    boolean lb4 = false;
    bk = bk || bk;
    bk = dk < dk;
    if (bk) {
        dk = dk + dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        } else if (bk) {
        ok = ok.m4();
</cutPoint2187>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2188>
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    Thought lo0 = Thought76.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2188>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2189>
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk - dk;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk < dk;
    dk *= -1;
    dk = dk - dk;
    Thought lo0 = Thought68.getInstance(bk, bk, bk, bk);
</cutPoint2189>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2190>
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
</cutPoint2190>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2191>
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 844.6756366775013;
    boolean lb1 = false;
    double ld2 = 957.6299733118352;
    dk = dk - dk;
    bk = dk < dk;
    bk = bk || bk;
    dk = ok.m3();
    double ld3 = 547.1989972942431;
    bk = bk && bk;
    dk *= -1;
</cutPoint2191>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2192>
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok);
        on -= dk;
        bk = dk > dk;
        dk *= -1;
        dk *= -1;
        Thought lo1 = Thought94.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1();
        bk = dk > dk;
        bk = dk < dk;
        double ld2 = 169.14618498179217;
</cutPoint2192>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2193>
    dk = dk + dk;
    Thought lo0 = Thought2.getInstance(dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
        on -= dk;
    bk = bk || bk;
    on += dk;
    Thought lo2 = Thought47.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint2193>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2194>
    for(int j=0; j<10; j++){
        dk = dk + dk;
        bk = ok.m2();
        bk = ok.m2(dk, dk, dk, dk);
        dk *= -1;
        ok.m1(bk, bk, bk, bk);
        dk = dk - dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        bk = bk || bk;
        dk = dk - dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        bk = !bk;
        dk = dk - dk;
        bk = bk || bk;
        double ld0 = 108.12208976248023;
</cutPoint2194>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2195>
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk > dk;
    on -= dk;
    boolean lb0 = true;
    dk *= -1;
    Thought lo1 = Thought9.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    for(int j=0; j<10; j++){
        Thought lo2 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo3 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok);
        bk = dk > dk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        dk = dk - dk;
        dk = ok.m3();
        Thought lo4 = Thought16.getInstance(dk, dk, dk, dk);
        bk = !bk;
</cutPoint2195>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2196>
    bk = dk > dk;
    dk = dk + dk;
    Thought lo0 = Thought37.getInstance(bk, bk, bk, bk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    boolean lb1 = true;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk < dk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2196>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2197>
    bk = bk || bk;
    bk = dk < dk;
    bk = !bk;
        bk = bk || bk;
    bk = dk < dk;
    boolean lb0 = true;
    ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2197>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2198>
    dk = dk - dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok);
        on -= dk;
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo0 = Thought64.getInstance();
        dk = dk - dk;
        bk = bk && bk;
        boolean lb1 = true;
        double ld2 = 403.7568221146156;
        }
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint2198>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2199>
    bk = bk && bk;
    double ld0 = 784.2696420116878;
    Thought lo1 = Thought13.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 5.163369396070238;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 68.18740283295985;
        Thought lo4 = Thought46.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = false;
</cutPoint2199>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2200>
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk + dk;
    Thought lo0 = Thought94.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3();
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    on += dk;
    bk = dk > dk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    bk = dk < dk;
    boolean lb2 = true;
    bk = !bk;
</cutPoint2200>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2201>
    boolean lb0 = false;
    boolean lb1 = false;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought86.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk);
    if (bk) {
        bk = bk && bk;
        bk = dk < dk;
        for(int j=0; j<10; j++){
            }
        dk = dk + dk;
        dk = dk + dk;
</cutPoint2201>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2202>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo0 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld1 = 81.31707905237738;
    ok = ok.m4();
    boolean lb2 = true;
    bk = !bk;
    bk = bk || bk;
    dk *= -1;
    on -= dk;
    boolean lb3 = true;
    on -= dk;
    bk = dk < dk;
    bk = dk > dk;
    bk = bk && bk;
</cutPoint2202>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2203>
    bk = !bk;
    bk = dk > dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = dk < dk;
    on -= dk;
    boolean lb0 = false;
        bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    dk *= -1;
    on += dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    double ld1 = 383.93458328130714;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
</cutPoint2203>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2204>
    on -= dk;
    boolean lb0 = false;
    Thought lo1 = Thought7.getInstance(ok, ok, ok, ok);
    double ld2 = 188.138179654743;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = bk || bk;
    ok.m3();
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 957.2865439974169;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb4 = true;
</cutPoint2204>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought63 extends Thought{
private static ArrayList<Thought63> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 250.40281702760393;
private double fd1 = 550.9643169861024;
private Thought fo0 = null;
private Thought fo1 = null;
Thought63 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought63 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought63 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought63 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought63 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought63 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought63 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought63 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought63 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought63 instance = new Thought63 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought63 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought63 instance = new Thought63 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought63 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought63 instance = new Thought63 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought63 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought63 instance = new Thought63 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought63 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought63 instance = new Thought63 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought63 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought63 instance = new Thought63 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought63 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought63 instance = new Thought63 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought63 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought63 instance = new Thought63 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2205>
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
    boolean lb1 = true;
    bk = dk < dk;
    ok.m1(bk, bk, bk, bk);
    Thought lo2 = Thought86.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 844.0846284379661;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought94.getInstance();
    ok.m1(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = ok.m2(bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb5 = true;
        boolean lb6 = true;
</cutPoint2205>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2206>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
        if (bk) {
        double ld1 = 316.52018605762777;
        Thought lo2 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2206>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2207>
    double ld0 = 444.3608437477176;
    Thought lo1 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    bk = dk < dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = true;
    bk = !bk;
    dk *= -1;
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    bk = bk && bk;
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk < dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2207>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2208>
    Thought lo0 = Thought51.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought4.getInstance();
    double ld2 = 433.6404614979836;
    bk = bk || bk;
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk);
        dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    double ld3 = 689.058566135906;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint2208>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2209>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought44.getInstance(ok, ok, ok, ok);
    double ld1 = 456.04278357092915;
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    ok.m1();
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2209>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2210>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        bk = bk && bk;
        bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = false;
        dk = dk - dk;
        dk *= -1;
        dk = dk - dk;
        bk = ok.m2();
</cutPoint2210>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2211>
    double ld0 = 197.56442519881224;
    dk = ok.m3(dk, dk, dk, dk);
    double ld1 = 741.2152413199527;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    double ld2 = 577.9668710981844;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    boolean lb4 = false;
    double ld5 = 251.5382084646377;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb6 = false;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb7 = true;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    dk *= -1;
    dk = dk - dk;
    boolean lb8 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
</cutPoint2211>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2212>
    bk = bk && bk;
    bk = bk || bk;
    Thought lo0 = Thought53.getInstance();
    boolean lb1 = true;
    ok.m3(dk, dk, dk, dk);
    Thought lo2 = Thought28.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb3 = true;
    on -= dk;
    double ld4 = 944.9555565316062;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 671.5034520205396;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld6 = 143.61696835064242;
    bk = bk || bk;
    dk *= -1;
</cutPoint2212>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2213>
    dk *= -1;
    dk = dk + dk;
    bk = !bk;
    boolean lb0 = false;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    for(int j=0; j<10; j++){
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        }
    double ld3 = 644.7153892905318;
    dk *= -1;
    ok.m3();
    ok.m2(dk, dk, dk, dk);
</cutPoint2213>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2214>
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk - dk;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
        double ld0 = 910.0448955087647;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb1 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought11.getInstance();
    on -= dk;
    Thought lo3 = Thought43.getInstance(dk, dk, dk, dk);
    Thought lo4 = Thought10.getInstance(bk, bk, bk, bk);
</cutPoint2214>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2215>
    on += dk;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo0 = Thought30.getInstance(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        Thought lo1 = Thought53.getInstance();
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
        boolean lb2 = false;
        bk = dk < dk;
        bk = ok.m2(bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = false;
        bk = dk > dk;
        double ld4 = 675.0892288481372;
</cutPoint2215>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2216>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo0 = Thought93.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok.m1();
    double ld2 = 487.78155449353267;
    boolean lb3 = false;
    ok.m3(dk, dk, dk, dk);
    boolean lb4 = false;
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        ok.m1(bk, bk, bk, bk);
        boolean lb5 = true;
        Thought lo6 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        dk = dk - dk;
        double ld7 = 617.5138700074168;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
</cutPoint2216>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2217>
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok.m2(bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 45.228698350186676;
</cutPoint2217>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2218>
    double ld0 = 772.5381449271438;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    bk = bk || bk;
    boolean lb1 = true;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    dk *= -1;
    Thought lo3 = Thought78.getInstance();
    boolean lb4 = true;
    dk = dk + dk;
    on -= dk;
    bk = dk > dk;
</cutPoint2218>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2219>
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo0 = Thought47.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    if (bk) {
        Thought lo1 = Thought90.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        bk = dk < dk;
        on -= dk;
        dk = dk + dk;
        dk *= -1;
        dk = dk + dk;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb2 = true;
        bk = dk < dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        ok.m3();
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint2219>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2220>
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    dk = dk + dk;
    dk = dk + dk;
    dk = dk + dk;
    Thought lo2 = Thought59.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld3 = 603.186584348729;
    bk = bk || bk;
    dk *= -1;
    bk = bk && bk;
</cutPoint2220>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2221>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
        boolean lb1 = false;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2();
    bk = dk < dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    bk = bk && bk;
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2221>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2222>
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk && bk;
    Thought lo0 = Thought23.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 693.6647736100067;
    dk *= -1;
    Thought lo2 = Thought99.getInstance();
    dk *= -1;
    dk *= -1;
    double ld3 = 223.4334961566714;
    ok.m3(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
        bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld4 = 531.0724702766117;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo5 = Thought69.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 970.4383340241897;
    bk = bk && bk;
</cutPoint2222>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2223>
    for(int j=0; j<10; j++){
        dk = dk - dk;
        dk = ok.m3();
        dk = dk + dk;
        ok.m1(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        Thought lo0 = Thought87.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        }
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    double ld1 = 688.6906946669955;
    bk = dk < dk;
    bk = bk || bk;
    boolean lb2 = true;
    Thought lo3 = Thought6.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld4 = 878.5613154277324;
    ok = ok.m4();
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb5 = true;
    on -= dk;
</cutPoint2223>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2224>
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok);
        dk = dk - dk;
        bk = !bk;
        dk = dk - dk;
        Thought lo0 = Thought73.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        double ld1 = 749.1600554952955;
        boolean lb2 = false;
        double ld3 = 60.72537411339715;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        double ld4 = 363.3014415512674;
        Thought lo5 = Thought33.getInstance(bk, bk, bk, bk);
        dk *= -1;
        bk = bk && bk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        for(int j=0; j<10; j++){
</cutPoint2224>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2225>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    Thought lo0 = Thought98.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    bk = dk < dk;
    bk = dk > dk;
    bk = !bk;
    bk = !bk;
    Thought lo1 = Thought8.getInstance(dk, dk, dk, dk);
</cutPoint2225>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2226>
    bk = bk || bk;
    bk = dk < dk;
    double ld0 = 980.3261230742598;
    Thought lo1 = Thought42.getInstance(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = ok.m2();
        bk = !bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2226>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2227>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    bk = dk > dk;
    dk = dk + dk;
    Thought lo1 = Thought7.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
        bk = !bk;
    on -= dk;
    dk *= -1;
    dk = ok.m3();
</cutPoint2227>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2228>
    ok = ok.m4(dk, dk, dk, dk);
    double ld0 = 258.34861726153974;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 260.1217185148823;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
</cutPoint2228>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2229>
    bk = bk && bk;
    boolean lb0 = true;
    double ld1 = 372.1587751601734;
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    dk = dk + dk;
    boolean lb3 = true;
    on -= dk;
    double ld4 = 603.4106223912879;
    bk = bk && bk;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4();
    boolean lb5 = true;
    boolean lb6 = false;
    double ld7 = 769.4254433773815;
    double ld8 = 54.542097776159565;
    boolean lb9 = false;
    bk = dk > dk;
    Thought lo10 = Thought6.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint2229>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2230>
    dk = dk + dk;
    dk = dk + dk;
    Thought lo0 = Thought59.getInstance(bk, bk, bk, bk);
        bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 222.48471299649967;
    double ld2 = 977.7518894307045;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb3 = true;
    bk = bk && bk;
    Thought lo4 = Thought35.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint2230>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2231>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    on -= dk;
    boolean lb0 = false;
    Thought lo1 = Thought62.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    Thought lo2 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought7.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    double ld4 = 174.3014248453959;
    dk = dk - dk;
    Thought lo5 = Thought71.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2231>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2232>
    Thought lo0 = Thought20.getInstance(bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb1 = true;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    boolean lb3 = false;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    Thought lo4 = Thought60.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb5 = false;
</cutPoint2232>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2233>
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    on += dk;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        }
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2233>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2234>
    bk = !bk;
    boolean lb0 = false;
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    bk = bk || bk;
        if (bk) {
        boolean lb1 = false;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        dk = dk - dk;
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok);
        bk = bk && bk;
        bk = dk < dk;
        bk = bk && bk;
        Thought lo2 = Thought64.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2();
        dk = dk - dk;
        bk = bk && bk;
</cutPoint2234>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2235>
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    on += dk;
    bk = !bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    dk = dk - dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
</cutPoint2235>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2236>
    bk = bk && bk;
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = bk && bk;
        bk = dk > dk;
        bk = ok.m2();
        bk = !bk;
        bk = ok.m2(dk, dk, dk, dk);
        bk = !bk;
        dk = dk + dk;
        boolean lb0 = true;
        dk = dk + dk;
        bk = bk || bk;
        bk = ok.m2(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
</cutPoint2236>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2237>
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    bk = dk > dk;
    double ld0 = 603.9719326855858;
    bk = bk || bk;
    on += dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 281.9401651005807;
    boolean lb2 = true;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1();
    bk = bk || bk;
    boolean lb3 = true;
    boolean lb4 = false;
    bk = bk || bk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint2237>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2238>
    bk = !bk;
    bk = !bk;
    Thought lo0 = Thought38.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb2 = true;
    Thought lo3 = Thought24.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought7.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk < dk;
    boolean lb5 = false;
    bk = !bk;
    double ld6 = 449.3753448222241;
    dk *= -1;
    boolean lb7 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    boolean lb8 = true;
</cutPoint2238>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2239>
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb0 = false;
    bk = bk || bk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    Thought lo2 = Thought17.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 339.0710043769683;
    Thought lo4 = Thought10.getInstance(ok, ok, ok, ok);
    Thought lo5 = Thought74.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 871.3165254428719;
    dk = dk + dk;
    double ld7 = 447.330240273071;
</cutPoint2239>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought64 extends Thought{
private static ArrayList<Thought64> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 387.39103424618105;
private double fd1 = 265.6464256049881;
private Thought fo0 = null;
private Thought fo1 = null;
Thought64 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought64 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought64 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought64 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought64 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought64 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought64 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought64 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought64 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought64 instance = new Thought64 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought64 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought64 instance = new Thought64 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought64 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought64 instance = new Thought64 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought64 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought64 instance = new Thought64 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought64 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought64 instance = new Thought64 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought64 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought64 instance = new Thought64 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought64 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought64 instance = new Thought64 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought64 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought64 instance = new Thought64 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2240>
    ok = ok.m4();    dk = dk - dk;    ok = ok.m4(dk, dk, dk, dk);    ok = ok.m4(bk, bk, bk, bk);    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);        bk = bk || bk;        double ld3 = 262.15707933142056;        }    if (bk) {        double ld4 = 252.0516630004535;        bk = dk > dk;</cutPoint2240>Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2241>
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3();
    boolean lb0 = false;
    boolean lb1 = false;
    boolean lb2 = true;
    on += dk;
    on -= dk;
    boolean lb3 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought58.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb5 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb6 = true;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo7 = Thought72.getInstance();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint2241>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2242>
        bk = dk > dk;
    dk = dk + dk;
    dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = !bk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        boolean lb0 = true;
        on += dk;
        dk = dk - dk;
</cutPoint2242>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2243>
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    Thought lo1 = Thought56.getInstance();
    bk = bk && bk;
    boolean lb2 = true;
    dk *= -1;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = !bk;
        dk *= -1;
</cutPoint2243>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2244>
    dk = dk - dk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = true;
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = true;
    boolean lb2 = true;
    dk = dk + dk;
</cutPoint2244>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2245>
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    if (bk) {
        ok = ok.m4(bk, bk, bk, bk);
        dk *= -1;
        bk = bk || bk;
        bk = !bk;
        dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        Thought lo0 = Thought46.getInstance(dk, dk, dk, dk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        bk = dk < dk;
        dk *= -1;
        dk = ok.m3(bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint2245>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2246>
    Thought lo0 = Thought68.getInstance();
    on += dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    bk = bk || bk;
    dk *= -1;
    bk = bk && bk;
    if (bk) {
        boolean lb1 = true;
        Thought lo2 = Thought5.getInstance(ok, ok, ok, ok);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo3 = Thought55.getInstance(dk, dk, dk, dk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        for(int j=0; j<10; j++){
            ok = ok.m4(bk, bk, bk, bk);
</cutPoint2246>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2247>
    double ld0 = 526.6680210239392;
    bk = dk > dk;
    bk = dk > dk;
    bk = ok.m2();
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk *= -1;
    on -= dk;
    dk *= -1;
    double ld1 = 974.645678310006;
    dk *= -1;
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb3 = true;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
</cutPoint2247>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2248>
    dk = ok.m3();
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 290.7967058817922;
    ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
        bk = !bk;
    ok = ok.m4();
</cutPoint2248>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2249>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 664.34384504295;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought59.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
        ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk + dk;
    boolean lb3 = false;
</cutPoint2249>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2250>
    bk = bk || bk;
    double ld0 = 955.1007319475736;
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    if (bk) {
        bk = bk || bk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        double ld2 = 537.4141022405233;
        on += dk;
        bk = ok.m2(dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb3 = false;
        bk = bk && bk;
        Thought lo4 = Thought82.getInstance(bk, bk, bk, bk);
        bk = !bk;
        dk = dk + dk;
        dk = dk - dk;
        bk = dk < dk;
        ok = ok.m4();
        dk = dk - dk;
        Thought lo5 = Thought33.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        dk = dk + dk;
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok);
</cutPoint2250>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2251>
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 625.1096587750562;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    ok.m3();
    on += dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought73.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb2 = true;
    dk = ok.m3(bk, bk, bk, bk);
    ok.m1();
    dk *= -1;
    boolean lb3 = true;
</cutPoint2251>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2252>
    dk = dk + dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = false;
    if (bk) {
        bk = dk < dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        bk = dk < dk;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
        bk = bk && bk;
        bk = bk && bk;
        Thought lo1 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        on -= dk;
        boolean lb2 = false;
        boolean lb3 = false;
        Thought lo4 = Thought80.getInstance();
</cutPoint2252>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2253>
    Thought lo0 = Thought20.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    Thought lo1 = Thought84.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok.m1(bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3();
        double ld2 = 663.5348409791673;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought93.getInstance(ok, ok, ok, ok);
</cutPoint2253>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2254>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld1 = 610.2268981481893;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought67.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    dk = dk - dk;
    double ld3 = 979.3949292900496;
    bk = dk > dk;
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought88.getInstance(ok, ok, ok, ok);
</cutPoint2254>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2255>
    double ld0 = 602.3958243776679;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 900.3793506406332;
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = !bk;
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 787.6915957325913;
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        Thought lo4 = Thought25.getInstance(dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2255>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2256>
    ok.m1(bk, bk, bk, bk);
    double ld0 = 235.30206603932112;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    bk = bk && bk;
    bk = bk || bk;
    on -= dk;
    bk = bk || bk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    if (bk) {
        } else if (bk) {
        dk *= -1;
        bk = dk < dk;
        Thought lo1 = Thought23.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        } else if (bk) {
        bk = bk || bk;
        dk = dk - dk;
        bk = dk > dk;
        boolean lb2 = false;
        bk = bk && bk;
</cutPoint2256>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2257>
    boolean lb0 = false;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
        boolean lb1 = false;
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    boolean lb2 = true;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb3 = false;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
</cutPoint2257>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2258>
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    double ld0 = 889.0815060210243;
    for(int j=0; j<10; j++){
        boolean lb1 = true;
        dk = dk - dk;
        dk = ok.m3(bk, bk, bk, bk);
        dk *= -1;
</cutPoint2258>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2259>
    bk = dk > dk;
    dk = dk - dk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo0 = Thought84.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk *= -1;
    Thought lo2 = Thought40.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok.m1(bk, bk, bk, bk);
    double ld3 = 956.0135375076825;
    Thought lo4 = Thought77.getInstance();
        bk = bk && bk;
</cutPoint2259>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2260>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld0 = 862.6331902256234;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    Thought lo2 = Thought98.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    double ld4 = 672.0192030629756;
        boolean lb5 = true;
    on += dk;
    Thought lo6 = Thought3.getInstance();
</cutPoint2260>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2261>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    double ld0 = 324.4228002679141;
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        for(int j=0; j<10; j++){
            boolean lb1 = true;
            bk = bk || bk;
            ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk && bk;
            bk = bk || bk;
</cutPoint2261>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2262>
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    double ld0 = 809.1378416149558;
    bk = bk && bk;
    double ld1 = 653.679284416857;
    bk = dk < dk;
    bk = bk && bk;
        bk = bk && bk;
    bk = bk || bk;
    on -= dk;
    dk = dk - dk;
    bk = bk && bk;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4();
    boolean lb2 = false;
    bk = bk || bk;
    bk = dk < dk;
    double ld3 = 914.6556389069409;
</cutPoint2262>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2263>
    dk *= -1;
    Thought lo0 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = !bk;
    double ld2 = 504.84017082955023;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    boolean lb4 = true;
    double ld5 = 312.9690518332979;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld6 = 636.575178545243;
    dk = dk + dk;
    </cutPoint2263>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2264>
    double ld0 = 428.4615915143375;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought48.getInstance(dk, dk, dk, dk);
    Thought lo2 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb3 = true;
    bk = bk && bk;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = bk && bk;
        dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
    dk *= -1;
    for(int j=0; j<10; j++){
        double ld4 = 726.222355595847;
        bk = !bk;
        bk = bk || bk;
        on -= dk;
</cutPoint2264>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2265>
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought90.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = !bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    on -= dk;
    on += dk;
    dk = dk + dk;
</cutPoint2265>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2266>
    dk = dk - dk;
    boolean lb0 = false;
    dk = dk + dk;
    on += dk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought22.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    double ld2 = 632.7601293826966;
    bk = dk < dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        for(int j=0; j<10; j++){
            bk = bk && bk;
            ok.m3(bk, bk, bk, bk);
            Thought lo3 = Thought62.getInstance();
            dk = dk - dk;
            bk = !bk;
</cutPoint2266>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2267>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 172.55495583767583;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    double ld2 = 633.7405094120278;
    on += dk;
    on -= dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
</cutPoint2267>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2268>
    Thought lo0 = Thought17.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
        dk = dk + dk;
    bk = !bk;
    double ld1 = 575.229542894399;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk - dk;
    bk = bk && bk;
    boolean lb2 = false;
    bk = dk < dk;
</cutPoint2268>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2269>
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(bk, bk, bk, bk);
        dk *= -1;
        dk = dk - dk;
        dk = ok.m3();
        dk = dk - dk;
        boolean lb0 = true;
        bk = bk || bk;
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        double ld1 = 293.03351062500946;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        } else {
        boolean lb2 = false;
        dk *= -1;
        Thought lo3 = Thought52.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2269>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2270>
    dk *= -1;
    if (bk) {
        dk = dk - dk;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        dk *= -1;
        bk = dk > dk;
        dk = dk + dk;
        Thought lo0 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(dk, dk, dk, dk);
        bk = bk || bk;
        dk = dk - dk;
        Thought lo1 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint2270>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2271>
    bk = dk > dk;
    double ld0 = 705.1393281292134;
    double ld1 = 745.5952434811296;
    ok = ok.m4();
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    double ld2 = 944.5071469657971;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld4 = 146.89820810553346;
</cutPoint2271>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2272>
    bk = bk || bk;
    double ld0 = 836.1198279541258;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
        bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    boolean lb1 = true;
    boolean lb2 = false;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk *= -1;
    on += dk;
    Thought lo3 = Thought84.getInstance(bk, bk, bk, bk);
    bk = ok.m2();
    bk = bk || bk;
</cutPoint2272>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2273>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok.m2(ok, ok, ok, ok);
    on -= dk;
    Thought lo0 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought3.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo3 = Thought56.getInstance();
    dk *= -1;
    bk = bk || bk;
</cutPoint2273>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2274>
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = false;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = dk < dk;
    ok.m3(bk, bk, bk, bk);
    on -= dk;
    on -= dk;
</cutPoint2274>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought65 extends Thought{
private static ArrayList<Thought65> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 319.20025574340787;
private double fd1 = 417.17994407957303;
private Thought fo0 = null;
private Thought fo1 = null;
Thought65 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought65 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought65 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought65 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought65 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought65 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought65 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought65 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought65 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought65 instance = new Thought65 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought65 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought65 instance = new Thought65 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought65 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought65 instance = new Thought65 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought65 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought65 instance = new Thought65 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought65 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought65 instance = new Thought65 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought65 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought65 instance = new Thought65 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought65 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought65 instance = new Thought65 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought65 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought65 instance = new Thought65 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2275>
    bk = dk < dk;
    ok.m3();
    boolean lb0 = true;
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    boolean lb2 = true;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    boolean lb4 = false;
</cutPoint2275>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2276>
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 661.4136831214643;
    double ld1 = 582.665521556718;
    Thought lo2 = Thought21.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld3 = 306.1879636594625;
    dk *= -1;
    dk *= -1;
    double ld4 = 243.52139056738685;
    bk = dk < dk;
    Thought lo5 = Thought90.getInstance();
    boolean lb6 = false;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    boolean lb7 = true;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2276>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2277>
    double ld0 = 951.7180946869065;
    Thought lo1 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk && bk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    double ld2 = 474.62310680850993;
        dk = dk - dk;
    bk = dk > dk;
    bk = bk && bk;
    bk = bk && bk;
    Thought lo3 = Thought37.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk || bk;
    boolean lb4 = true;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2277>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2278>
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo0 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
</cutPoint2278>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2279>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    for(int j=0; j<10; j++){
        bk = !bk;
        double ld0 = 500.29209716604606;
        bk = bk && bk;
        dk = ok.m3();
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint2279>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2280>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    on -= dk;
    on -= dk;
    double ld0 = 464.10088854903677;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    on += dk;
    bk = bk && bk;
    dk *= -1;
    double ld1 = 86.96573570242607;
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint2280>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2281>
    ok.m2(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought35.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
        double ld2 = 9.066228929457745;
</cutPoint2281>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2282>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
    dk = dk - dk;
    dk *= -1;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = bk && bk;
    dk = dk + dk;
    double ld1 = 518.1570131725462;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought65.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        if (bk) {
        dk *= -1;
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk + dk;
        double ld3 = 431.676816100074;
        double ld4 = 461.44858380020486;
</cutPoint2282>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2283>
    Thought lo0 = Thought95.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk < dk;
    double ld2 = 22.52852018709856;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint2283>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2284>
    Thought lo0 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    bk = dk > dk;
    boolean lb1 = false;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb3 = false;
    double ld4 = 134.4807503838376;
    dk = dk + dk;
    double ld5 = 916.5029233301142;
        bk = dk < dk;
    ok.m3(dk, dk, dk, dk);
</cutPoint2284>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2285>
    on -= dk;
    bk = !bk;
    for(int j=0; j<10; j++){
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo0 = Thought45.getInstance(bk, bk, bk, bk);
        boolean lb1 = true;
        boolean lb2 = true;
        bk = bk || bk;
        ok = ok.m4();
        bk = dk < dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok.m1(ok, ok, ok, ok);
        double ld3 = 608.7955705799686;
        dk = dk + dk;
        bk = bk && bk;
        bk = dk > dk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        dk = dk - dk;
        bk = bk && bk;
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb4 = false;
</cutPoint2285>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2286>
    bk = bk && bk;
    bk = dk < dk;
    Thought lo0 = Thought21.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        on += dk;
        bk = bk || bk;
        on += dk;
        Thought lo1 = Thought7.getInstance();
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        boolean lb2 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo3 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = bk && bk;
        on += dk;
        double ld4 = 964.0116932764178;
        bk = !bk;
</cutPoint2286>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2287>
    ok = ok.m4();
    Thought lo0 = Thought57.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
        boolean lb1 = false;
    on += dk;
    bk = dk > dk;
    on -= dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    dk *= -1;
</cutPoint2287>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2288>
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    Thought lo0 = Thought9.getInstance();
</cutPoint2288>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2289>
    bk = bk || bk;
    bk = !bk;
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    Thought lo0 = Thought54.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    Thought lo1 = Thought62.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought50.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
        dk *= -1;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
    boolean lb3 = true;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    for(int j=0; j<10; j++){
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb4 = false;
        ok = ok.m4(ok, ok, ok, ok);
        bk = !bk;
        double ld5 = 104.49296092608817;
        bk = bk && bk;
</cutPoint2289>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2290>
    Thought lo0 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo1 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld2 = 34.40494921076013;
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2290>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2291>
    boolean lb0 = true;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    bk = dk < dk;
    Thought lo3 = Thought58.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    on += dk;
    boolean lb4 = false;
    Thought lo5 = Thought86.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    bk = bk || bk;
    bk = !bk;
    on -= dk;
    Thought lo6 = Thought91.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2291>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2292>
        ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 324.65968779319206;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2292>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2293>
    Thought lo0 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought9.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought77.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3();
        Thought lo3 = Thought9.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        Thought lo4 = Thought65.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        if (bk) {
            Thought lo5 = Thought33.getInstance(bk, bk, bk, bk);
            bk = bk || bk;
            ok = ok.m4();
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2293>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2294>
    ok.m3(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        }
    bk = bk && bk;
    dk = dk + dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
</cutPoint2294>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2295>
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought22.getInstance(dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    boolean lb1 = true;
    boolean lb2 = false;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    bk = dk > dk;
    dk = dk + dk;
    bk = bk || bk;
    double ld3 = 669.7766946308334;
    Thought lo4 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld5 = 185.52584081644417;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb6 = true;
    </cutPoint2295>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2296>
    ok = ok.m4(dk, dk, dk, dk);    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);    Thought lo0 = Thought60.getInstance(bk, bk, bk, bk);    ok = ok.m4();    bk = dk < dk;    dk = dk + dk;    dk = dk + dk;    Thought lo1 = Thought89.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);    on -= dk;    bk = !bk;    dk = dk + dk;    ok = ok.m4(ok, ok, ok, ok);    bk = dk > dk;    boolean lb2 = false;    boolean lb3 = true;    bk = dk < dk;    bk = dk > dk;    double ld4 = 757.5450035458807;    Thought lo5 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);    dk = dk + dk;    double ld6 = 243.83979419977246;    boolean lb7 = false;    bk = bk || bk;    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);    dk = ok.m3(ok, ok, ok, ok);    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);    dk *= -1;    dk = ok.m3();    ok = ok.m4(dk, dk, dk, dk);    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);</cutPoint2296>Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2297>
    bk = dk > dk;
    bk = dk < dk;
    bk = bk && bk;
    boolean lb0 = true;
    bk = !bk;
    double ld1 = 292.08055051522905;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 582.1166168457931;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    on -= dk;
    boolean lb3 = false;
    double ld4 = 199.77720443907657;
    bk = bk && bk;
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    on -= dk;
    double ld5 = 861.2467875323866;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
</cutPoint2297>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2298>
    boolean lb0 = true;
    Thought lo1 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    Thought lo2 = Thought96.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    on -= dk;
    on += dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo3 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    Thought lo5 = Thought11.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb6 = true;
    bk = !bk;
    ok.m1(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk + dk;
    bk = !bk;
    bk = bk && bk;
    boolean lb7 = false;
</cutPoint2298>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2299>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 942.6273812946449;
    dk = ok.m3();
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint2299>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2300>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld0 = 215.51327932882194;
    bk = dk < dk;
    ok = ok.m4();
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        on += dk;
        bk = bk && bk;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 658.9773797043789;
        dk = dk + dk;
        boolean lb2 = true;
        bk = !bk;
</cutPoint2300>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2301>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = false;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    bk = dk < dk;
    bk = bk && bk;
    on += dk;
        bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    double ld3 = 190.9738618227079;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb4 = false;
    bk = bk || bk;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint2301>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2302>
    bk = !bk;
    bk = !bk;
    double ld0 = 755.7285950345788;
    bk = !bk;
    boolean lb1 = false;
    double ld2 = 663.9705549107558;
    bk = !bk;
    double ld3 = 648.0828918428725;
    dk = ok.m3();
    Thought lo4 = Thought32.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    bk = dk > dk;
    boolean lb5 = true;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb6 = true;
    bk = bk || bk;
</cutPoint2302>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2303>
    Thought lo0 = Thought44.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    bk = !bk;
    dk = dk - dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
</cutPoint2303>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2304>
    bk = bk && bk;
    double ld0 = 142.77964974777274;
    dk = dk - dk;
    dk *= -1;
    Thought lo1 = Thought43.getInstance(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    ok.m2(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2304>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2305>
    on += dk;
    double ld0 = 719.4555917884685;
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    double ld2 = 996.169376149854;
    dk = dk + dk;
    dk = dk - dk;
    boolean lb3 = true;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2305>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2306>
    dk *= -1;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3();
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 630.3335808724681;
    dk = dk + dk;
</cutPoint2306>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2307>
    double ld0 = 572.116308356235;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    bk = bk && bk;
    dk *= -1;
    bk = bk || bk;
    double ld2 = 659.5757574109873;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought9.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok);
    dk *= -1;
    boolean lb4 = true;
</cutPoint2307>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2308>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk < dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = ok.m2();
    bk = bk || bk;
    bk = bk && bk;
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
</cutPoint2308>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2309>
    dk *= -1;
    bk = bk || bk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo0 = Thought5.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    double ld2 = 163.44171623988802;
    bk = dk > dk;
    boolean lb3 = false;
</cutPoint2309>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought66 extends Thought{
private static ArrayList<Thought66> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 426.4211105990264;
private double fd1 = 830.4938882165955;
private Thought fo0 = null;
private Thought fo1 = null;
Thought66 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought66 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought66 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought66 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought66 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought66 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought66 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought66 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought66 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought66 instance = new Thought66 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought66 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought66 instance = new Thought66 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought66 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought66 instance = new Thought66 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought66 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought66 instance = new Thought66 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought66 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought66 instance = new Thought66 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought66 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought66 instance = new Thought66 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought66 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought66 instance = new Thought66 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought66 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought66 instance = new Thought66 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2310>
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2310>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2311>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk < dk;
    bk = bk && bk;
    dk = dk - dk;
    Thought lo1 = Thought24.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb2 = false;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    on -= dk;
</cutPoint2311>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2312>
    dk = dk - dk;
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    bk = bk || bk;
    double ld0 = 449.51161184966617;
    Thought lo1 = Thought51.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
</cutPoint2312>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2313>
    bk = bk || bk;
    double ld0 = 175.22387624304773;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk + dk;
    dk = dk - dk;
    Thought lo1 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        Thought lo2 = Thought15.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
</cutPoint2313>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2314>
    on -= dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    boolean lb0 = true;
    bk = bk && bk;
    dk = dk + dk;
    dk = ok.m3();
    Thought lo1 = Thought47.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2314>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2315>
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        dk = dk + dk;
        bk = dk < dk;
        bk = dk > dk;
        dk *= -1;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld0 = 636.3346191710659;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        bk = dk > dk;
        on += dk;
        bk = dk > dk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = !bk;
        bk = dk > dk;
        bk = !bk;
        bk = dk > dk;
        for(int j=0; j<10; j++){
            dk = dk + dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            boolean lb1 = false;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            on -= dk;
</cutPoint2315>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2316>
    on -= dk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = true;
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 438.03201116516;
    dk *= -1;
    Thought lo2 = Thought12.getInstance(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        Thought lo3 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        dk = dk - dk;
        boolean lb4 = true;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        double ld5 = 832.3938101656938;
        Thought lo6 = Thought54.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld7 = 244.61063972883613;
        boolean lb8 = false;
</cutPoint2316>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2317>
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3();
    dk *= -1;
    Thought lo0 = Thought42.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 769.8819892036071;
    Thought lo3 = Thought79.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk && bk;
    double ld4 = 750.1087803136854;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint2317>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2318>
    bk = bk || bk;
    bk = dk < dk;
    dk = dk + dk;
    if (bk) {
        dk *= -1;
        boolean lb0 = true;
        on += dk;
        boolean lb1 = false;
        boolean lb2 = true;
        dk = dk - dk;
        ok = ok.m4();
        dk = dk - dk;
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk < dk;
        boolean lb3 = false;
        boolean lb4 = true;
        } else {
        on += dk;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        bk = !bk;
        bk = dk < dk;
</cutPoint2318>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2319>
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought52.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld1 = 157.03921945997456;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    if (bk) {
        ok = ok.m4(bk, bk, bk, bk);
        Thought lo2 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        on -= dk;
        dk *= -1;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        bk = bk || bk;
        ok.m2(ok, ok, ok, ok);
        double ld3 = 638.6042053810824;
        boolean lb4 = false;
        bk = dk > dk;
        double ld5 = 918.4070388438431;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2319>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2320>
    bk = !bk;
    boolean lb0 = true;
    Thought lo1 = Thought72.getInstance();
    Thought lo2 = Thought8.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld3 = 34.580536498720825;
    bk = dk < dk;
    dk = dk - dk;
    on += dk;
    dk = dk - dk;
    boolean lb4 = false;
    boolean lb5 = true;
    bk = dk > dk;
    bk = bk || bk;
</cutPoint2320>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2321>
    double ld0 = 731.8341444334703;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    boolean lb1 = true;
    bk = dk > dk;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint2321>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2322>
    bk = !bk;
    Thought lo0 = Thought48.getInstance(ok, ok, ok, ok);
    boolean lb1 = false;
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        dk *= -1;
        on -= dk;
        dk = dk - dk;
        dk = ok.m3();
        Thought lo2 = Thought25.getInstance(dk, dk, dk, dk);
        bk = dk < dk;
        if (bk) {
            Thought lo3 = Thought34.getInstance(bk, bk, bk, bk);
            dk = dk + dk;
            double ld4 = 571.7574978843815;
            on -= dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            boolean lb5 = true;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2322>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2323>
    bk = dk < dk;
    double ld0 = 852.7352750824298;
    bk = !bk;
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    on -= dk;
    bk = dk < dk;
    double ld1 = 51.4320894821239;
    on += dk;
    Thought lo2 = Thought39.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2323>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2324>
    boolean lb0 = true;
    ok = ok.m4();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    Thought lo1 = Thought40.getInstance(bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    Thought lo2 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2324>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2325>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 221.5704262602838;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought48.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok.m2();
        bk = bk || bk;
        bk = ok.m2(dk, dk, dk, dk);
        bk = dk < dk;
        bk = dk > dk;
        dk = ok.m3(bk, bk, bk, bk);
        Thought lo2 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        boolean lb3 = false;
</cutPoint2325>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2326>
    dk = dk + dk;
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    boolean lb1 = false;
    Thought lo2 = Thought16.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    double ld3 = 249.64819915483696;
    bk = !bk;
    boolean lb4 = false;
    dk = dk + dk;
    bk = ok.m2();
</cutPoint2326>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2327>
    bk = bk || bk;
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought40.getInstance(bk, bk, bk, bk);
    boolean lb1 = true;
    if (bk) {
        double ld2 = 786.5601933008309;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = dk < dk;
        Thought lo3 = Thought48.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        bk = dk < dk;
        } else if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk);
        on -= dk;
        ok.m1(bk, bk, bk, bk);
        bk = bk && bk;
        Thought lo4 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2327>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2328>
    Thought lo0 = Thought84.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 206.27530449346608;
    boolean lb2 = true;
    boolean lb3 = true;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    if (bk) {
        bk = bk && bk;
        bk = bk && bk;
        double ld4 = 139.5138912391696;
        Thought lo5 = Thought71.getInstance(dk, dk, dk, dk);
        dk *= -1;
        boolean lb6 = true;
        dk = dk + dk;
        Thought lo7 = Thought0.getInstance(bk, bk, bk, bk);
</cutPoint2328>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2329>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb1 = true;
    bk = bk && bk;
    bk = !bk;
    on += dk;
    bk = !bk;
    dk *= -1;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint2329>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2330>
    ok = ok.m4();
    Thought lo0 = Thought44.getInstance(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    bk = !bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    on -= dk;
    Thought lo2 = Thought9.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    double ld3 = 952.6799694871241;
        on -= dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld4 = 969.3687021817677;
</cutPoint2330>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2331>
    Thought lo0 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = dk > dk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb2 = false;
        dk = dk + dk;
    bk = bk && bk;
    Thought lo3 = Thought33.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb4 = false;
</cutPoint2331>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2332>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 371.825648781073;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought79.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    bk = bk && bk;
</cutPoint2332>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2333>
    bk = dk > dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 650.1077563406866;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = bk || bk;
        if (bk) {
            boolean lb1 = true;
            if (bk) {
                dk = ok.m3();
                double ld2 = 850.1202356715969;
                dk = dk + dk;
                ok = ok.m4(dk, dk, dk, dk);
                bk = dk < dk;
                bk = bk && bk;
                bk = dk > dk;
                bk = dk > dk;
                Thought lo3 = Thought60.getInstance(bk, bk, bk, bk);
                boolean lb4 = false;
                bk = !bk;
                ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
                ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
                boolean lb5 = false;
                ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2333>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2334>
    dk = dk - dk;
    double ld0 = 223.46976287954212;
    dk *= -1;
    boolean lb1 = false;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld2 = 780.0376136999042;
    bk = bk && bk;
    Thought lo3 = Thought85.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    Thought lo4 = Thought13.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2334>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2335>
    bk = bk || bk;
    Thought lo0 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    Thought lo2 = Thought66.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    dk = dk + dk;
    boolean lb3 = false;
    boolean lb4 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = false;
    double ld6 = 253.07307262606523;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo7 = Thought70.getInstance(ok, ok, ok, ok);
    on -= dk;
    dk = dk - dk;
    bk = !bk;
    on += dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
</cutPoint2335>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2336>
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought18.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4();
    Thought lo2 = Thought63.getInstance(dk, dk, dk, dk);
    Thought lo3 = Thought55.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo4 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = true;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 724.874109441471;
</cutPoint2336>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2337>
    Thought lo0 = Thought83.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    double ld1 = 673.0092586707335;
    boolean lb2 = true;
    Thought lo3 = Thought57.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    dk *= -1;
    bk = !bk;
    boolean lb4 = false;
    dk *= -1;
    bk = bk || bk;
    dk *= -1;
</cutPoint2337>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2338>
    dk = dk - dk;
    double ld0 = 224.76611193285416;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    on -= dk;
    double ld1 = 211.34356266455313;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    boolean lb2 = false;
    Thought lo3 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint2338>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2339>
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    ok.m2();
    bk = dk < dk;
    dk = dk - dk;
</cutPoint2339>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2340>
    double ld0 = 32.45210120644162;
    dk = dk + dk;
    Thought lo1 = Thought78.getInstance(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    double ld2 = 140.55470861907548;
    dk *= -1;
    if (bk) {
        boolean lb3 = false;
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb4 = true;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        bk = bk || bk;
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint2340>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2341>
    Thought lo0 = Thought97.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo2 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
        dk *= -1;
    bk = dk > dk;
    dk = dk + dk;
    bk = dk > dk;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2341>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2342>
    on += dk;
    dk = dk + dk;
    bk = !bk;
    double ld0 = 506.6682592348135;
    dk = dk + dk;
    dk = dk - dk;
    double ld1 = 829.4241100288608;
    on += dk;
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2342>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2343>
    dk *= -1;
    double ld0 = 89.51017447789675;
    ok = ok.m4();
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo1 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2343>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2344>
    bk = dk < dk;
    dk = dk + dk;
    boolean lb0 = true;
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok);
        double ld1 = 610.5446284019843;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought75.getInstance();
</cutPoint2344>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought67 extends Thought{
private static ArrayList<Thought67> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 467.4443517710733;
private double fd1 = 748.1836016588358;
private Thought fo0 = null;
private Thought fo1 = null;
Thought67 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought67 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought67 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought67 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought67 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought67 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought67 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought67 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought67 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought67 instance = new Thought67 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought67 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought67 instance = new Thought67 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought67 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought67 instance = new Thought67 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought67 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought67 instance = new Thought67 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought67 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought67 instance = new Thought67 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought67 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought67 instance = new Thought67 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought67 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought67 instance = new Thought67 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought67 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought67 instance = new Thought67 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2345>
    dk = dk + dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk > dk;
    dk *= -1;
    Thought lo0 = Thought89.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
</cutPoint2345>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2346>
    boolean lb0 = false;
    double ld1 = 385.18316247534904;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    double ld2 = 563.5038425124327;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    boolean lb3 = true;
    dk = dk + dk;
    Thought lo4 = Thought88.getInstance(bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    double ld5 = 639.5691887390639;
    bk = bk && bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint2346>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2347>
    ok = ok.m4();
    Thought lo0 = Thought1.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 363.17344672676745;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    on += dk;
    double ld2 = 751.4839541032674;
    dk = dk - dk;
    double ld3 = 465.8253894757431;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
</cutPoint2347>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2348>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 961.3298287362184;
    dk = dk + dk;
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    if (bk) {
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 971.2907733903611;
        ok = ok.m4();
        bk = dk > dk;
        dk = ok.m3(dk, dk, dk, dk);
        double ld2 = 480.60641532640346;
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk > dk;
        on += dk;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        bk = dk > dk;
</cutPoint2348>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2349>
    Thought lo0 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = true;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb2 = false;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb3 = false;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2349>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2350>
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    if (bk) {
        ok.m1(dk, dk, dk, dk);
        bk = dk < dk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb0 = true;
        boolean lb1 = true;
        dk = dk - dk;
        if (bk) {
            dk = dk + dk;
</cutPoint2350>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2351>
    dk *= -1;
    double ld0 = 308.7095993247431;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb1 = false;
    boolean lb2 = true;
    bk = dk > dk;
    Thought lo3 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought23.getInstance();
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint2351>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2352>
    bk = dk < dk;
    bk = dk > dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    if (bk) {
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk && bk;
        on += dk;
        dk = dk + dk;
        boolean lb0 = true;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        if (bk) {
            for(int j=0; j<10; j++){
                dk = dk + dk;
                bk = bk || bk;
</cutPoint2352>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2353>
    Thought lo0 = Thought86.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 413.14406958920574;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 528.7640940470463;
    boolean lb3 = true;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought45.getInstance();
    bk = bk || bk;
        bk = dk < dk;
    dk = dk + dk;
    double ld5 = 221.75248268383302;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint2353>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2354>
    dk = dk - dk;
    double ld0 = 693.1919461372922;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought13.getInstance();
    dk *= -1;
    bk = !bk;
    dk = dk + dk;
    double ld3 = 171.32746542558442;
    on += dk;
    on += dk;
    boolean lb4 = true;
    ok.m1(dk, dk, dk, dk);
    Thought lo5 = Thought35.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2354>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2355>
    bk = bk || bk;
    bk = bk && bk;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 592.443194215059;
    dk = dk - dk;
    dk = dk - dk;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2355>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2356>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    bk = bk && bk;
    dk *= -1;
    boolean lb0 = true;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        double ld1 = 911.5849717146359;
        bk = dk > dk;
        bk = dk > dk;
        boolean lb2 = true;
        } else {
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb3 = false;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        bk = bk || bk;
        double ld4 = 886.9919534904644;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2356>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2357>
    boolean lb0 = false;
    for(int j=0; j<10; j++){
        dk *= -1;
        bk = !bk;
        if (bk) {
            bk = bk || bk;
            bk = !bk;
            boolean lb1 = false;
            for(int j=0; j<10; j++){
                if (bk) {
                    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
                    dk = dk - dk;
                    ok.m2(ok, ok, ok, ok);
                    boolean lb2 = true;
                    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
                    boolean lb3 = false;
                    ok.m1();
                    ok.m1(dk, dk, dk, dk);
                    ok = ok.m4(bk, bk, bk, bk);
                    boolean lb4 = true;
                    } else {
                    dk = dk + dk;
                    bk = bk && bk;
                    Thought lo5 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2357>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2358>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        Thought lo0 = Thought73.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        dk = dk - dk;
        boolean lb1 = false;
        ok = ok.m4(dk, dk, dk, dk);
        }
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    double ld2 = 37.821834894346395;
    bk = ok.m2(ok, ok, ok, ok);
        on -= dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
</cutPoint2358>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2359>
    ok = ok.m4();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    dk *= -1;
    ok.m1(bk, bk, bk, bk);
    double ld0 = 606.5063654411377;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    Thought lo1 = Thought69.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
        bk = bk && bk;
    boolean lb2 = true;
    dk *= -1;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    on -= dk;
    for(int j=0; j<10; j++){
</cutPoint2359>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2360>
    bk = bk && bk;
    on += dk;
    boolean lb0 = false;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = true;
    dk = dk - dk;
    dk = ok.m3();
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok.m1(ok, ok, ok, ok);
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint2360>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2361>
    bk = dk > dk;
    Thought lo0 = Thought32.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 683.0876759802929;
    bk = dk < dk;
    boolean lb2 = true;
    dk = dk - dk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = !bk;
    boolean lb4 = true;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb5 = true;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
    ok.m3();
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo6 = Thought56.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
</cutPoint2361>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2362>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld0 = 918.2910450173705;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    Thought lo1 = Thought12.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    double ld2 = 950.8437129974493;
    bk = bk || bk;
    double ld3 = 173.10618043479812;
    bk = bk && bk;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    Thought lo5 = Thought44.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo6 = Thought13.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
</cutPoint2362>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2363>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk < dk;
    dk = ok.m3();
    on -= dk;
    boolean lb1 = false;
        dk = ok.m3(dk, dk, dk, dk);
        dk = dk + dk;
    ok.m1(bk, bk, bk, bk);
    bk = dk > dk;
    double ld2 = 621.6784362662844;
    dk *= -1;
    bk = bk && bk;
    bk = bk || bk;
        boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    Thought lo4 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought88.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo6 = Thought73.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    dk *= -1;
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2363>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2364>
    bk = bk && bk;
    bk = dk > dk;
    dk = dk + dk;
    Thought lo0 = Thought50.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = true;
    bk = dk < dk;
</cutPoint2364>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2365>
    bk = bk && bk;
    if (bk) {
        boolean lb0 = false;
        double ld1 = 472.6980143919351;
        bk = dk < dk;
        } else if (bk) {
        double ld2 = 749.9373608007319;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        Thought lo3 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok);
        for(int j=0; j<10; j++){
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk < dk;
            ok = ok.m4();
            }
        dk *= -1;
        Thought lo4 = Thought20.getInstance(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb5 = true;
        boolean lb6 = false;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2365>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2366>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
        Thought lo0 = Thought83.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2();
    on += dk;
    bk = !bk;
    bk = bk || bk;
    bk = dk < dk;
    dk *= -1;
    bk = bk && bk;
    boolean lb1 = false;
    double ld2 = 116.6480531250416;
    dk = dk - dk;
    boolean lb3 = false;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    double ld4 = 279.4213208122982;
</cutPoint2366>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2367>
    dk = dk + dk;
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        bk = !bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk = dk + dk;
        dk = dk - dk;
        boolean lb0 = true;
        Thought lo1 = Thought8.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld2 = 349.3191551332321;
        double ld3 = 621.6520503103484;
        dk = dk + dk;
        }
    bk = bk || bk;
    dk = dk + dk;
</cutPoint2367>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2368>
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk > dk;
    boolean lb0 = true;
        double ld1 = 303.6523765180367;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    on += dk;
    bk = ok.m2();
    double ld2 = 986.9494232093547;
    bk = dk < dk;
    on += dk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2368>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2369>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    Thought lo1 = Thought33.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    Thought lo2 = Thought7.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on -= dk;
    ok = ok.m4();
    bk = !bk;
    for(int j=0; j<10; j++){
</cutPoint2369>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2370>
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb0 = false;
    on -= dk;
    bk = dk > dk;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint2370>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2371>
    Thought lo0 = Thought10.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3();
    Thought lo1 = Thought34.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    boolean lb2 = true;
    dk = dk + dk;
    boolean lb3 = true;
    dk = dk + dk;
    on += dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = bk || bk;
        }
    boolean lb4 = false;
    Thought lo5 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb6 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld7 = 604.7565669643697;
</cutPoint2371>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2372>
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    ok.m3(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on -= dk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
</cutPoint2372>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2373>
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought63.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    dk *= -1;
    dk = ok.m3();
    boolean lb1 = false;
    Thought lo2 = Thought90.getInstance(dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    ok.m1(bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint2373>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2374>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb0 = true;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld1 = 209.00156155055822;
    boolean lb2 = false;
    on -= dk;
    bk = bk || bk;
    on -= dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    double ld3 = 820.3252639436889;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = bk && bk;
    dk = dk - dk;
    ok.m2();
    on += dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
</cutPoint2374>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2375>
    boolean lb0 = true;
    Thought lo1 = Thought54.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    double ld2 = 576.963655777366;
        Thought lo3 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        boolean lb4 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        bk = dk > dk;
        Thought lo5 = Thought86.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo6 = Thought51.getInstance(ok, ok, ok, ok);
        bk = dk > dk;
        bk = dk > dk;
        bk = dk < dk;
        on += dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        double ld7 = 809.0931170501078;
        dk *= -1;
        for(int j=0; j<10; j++){
</cutPoint2375>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2376>
    bk = !bk;
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk > dk;
    boolean lb0 = false;
    dk *= -1;
    boolean lb1 = false;
</cutPoint2376>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2377>
    dk *= -1;
    bk = bk || bk;
    double ld0 = 291.23087056201393;
    Thought lo1 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld2 = 688.806203233489;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    boolean lb3 = true;
    boolean lb4 = true;
    bk = bk || bk;
</cutPoint2377>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2378>
    bk = !bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
        on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    boolean lb0 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    on -= dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
</cutPoint2378>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2379>
    ok.m2(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk > dk;
    dk = dk + dk;
    double ld1 = 183.01658961284812;
    Thought lo2 = Thought47.getInstance();
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    ok.m1(bk, bk, bk, bk);
    double ld3 = 820.1338505651443;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
    bk = bk || bk;
    bk = bk && bk;
    boolean lb4 = false;
    on -= dk;
    bk = bk || bk;
    bk = bk && bk;
</cutPoint2379>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought68 extends Thought{
private static ArrayList<Thought68> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 338.55697310321483;
private double fd1 = 150.30374617604642;
private Thought fo0 = null;
private Thought fo1 = null;
Thought68 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought68 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought68 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought68 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought68 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought68 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought68 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought68 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought68 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought68 instance = new Thought68 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought68 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought68 instance = new Thought68 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought68 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought68 instance = new Thought68 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought68 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought68 instance = new Thought68 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought68 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought68 instance = new Thought68 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought68 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought68 instance = new Thought68 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought68 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought68 instance = new Thought68 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought68 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought68 instance = new Thought68 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2380>
    boolean lb0 = true;
    on += dk;
    bk = !bk;
    bk = !bk;
    double ld1 = 851.4362912094615;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        bk = bk && bk;
        dk *= -1;
        bk = dk > dk;
        dk *= -1;
        for(int j=0; j<10; j++){
            bk = dk > dk;
            bk = dk < dk;
            bk = dk > dk;
            dk *= -1;
            boolean lb2 = true;
            bk = bk || bk;
            bk = !bk;
            dk = dk - dk;
            bk = bk || bk;
            boolean lb3 = true;
            dk = dk + dk;
</cutPoint2380>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2381>
    bk = bk && bk;
    boolean lb0 = true;
    dk *= -1;
    dk = dk - dk;
    Thought lo1 = Thought32.getInstance(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk + dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint2381>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2382>
    double ld0 = 843.5791426836936;
    bk = bk && bk;
    boolean lb1 = false;
    on += dk;
    boolean lb2 = false;
    bk = dk > dk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb3 = false;
</cutPoint2382>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2383>
    dk = dk + dk;
    bk = bk && bk;
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought94.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
        on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought70.getInstance();
    double ld2 = 172.59423696970268;
    Thought lo3 = Thought60.getInstance(dk, dk, dk, dk);
    bk = !bk;
    dk = dk + dk;
    Thought lo4 = Thought28.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    on -= dk;
    double ld5 = 851.271703068036;
</cutPoint2383>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2384>
    bk = !bk;
    bk = dk > dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = true;
    bk = dk < dk;
    on += dk;
</cutPoint2384>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2385>
    double ld0 = 714.8128957774888;
    double ld1 = 207.2872610300153;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb2 = false;
    dk *= -1;
    dk = dk - dk;
    if (bk) {
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        } else if (bk) {
        ok = ok.m4();
        boolean lb3 = true;
        double ld4 = 559.7912594377493;
        boolean lb5 = true;
        bk = !bk;
        boolean lb6 = true;
        double ld7 = 45.384778717279104;
        dk *= -1;
        double ld8 = 947.5005170687463;
        dk *= -1;
        bk = dk > dk;
</cutPoint2385>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2386>
        dk = ok.m3(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    bk = bk || bk;
    boolean lb0 = true;
    Thought lo1 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb2 = true;
    on -= dk;
</cutPoint2386>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2387>
    Thought lo0 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2();
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = ok.m2(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2387>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2388>
    on += dk;
    double ld0 = 213.84812862313103;
    on += dk;
    boolean lb1 = true;
    boolean lb2 = false;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    dk = dk - dk;
    dk = dk + dk;
    Thought lo4 = Thought85.getInstance();
    dk = dk - dk;
    dk = dk + dk;
    bk = dk > dk;
        Thought lo5 = Thought62.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
</cutPoint2388>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2389>
    dk = dk + dk;
    ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        on += dk;
        bk = !bk;
        dk = dk - dk;
        bk = dk < dk;
        bk = bk && bk;
        bk = !bk;
</cutPoint2389>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2390>
        bk = bk || bk;
    dk = dk + dk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    bk = bk || bk;
    if (bk) {
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk < dk;
</cutPoint2390>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2391>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = false;
    bk = dk < dk;
    boolean lb2 = true;
    Thought lo3 = Thought27.getInstance(ok, ok, ok, ok);
    Thought lo4 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    </cutPoint2391>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2392>
    bk = !bk;
    ok = ok.m4();
    bk = dk < dk;
    boolean lb0 = true;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought90.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    Thought lo2 = Thought99.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb3 = false;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
</cutPoint2392>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2393>
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    on += dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 553.1423738531425;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    on -= dk;
    bk = bk || bk;
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = dk < dk;
    bk = dk > dk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 800.3609046099435;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb3 = false;
    boolean lb4 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2393>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2394>
    dk *= -1;
    dk = dk + dk;
    boolean lb0 = false;
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 871.4334660181178;
    bk = !bk;
    double ld2 = 787.9272302078725;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb3 = false;
    on += dk;
</cutPoint2394>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2395>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo0 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on += dk;
    dk = dk - dk;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 956.0930612285766;
    ok.m2();
    double ld2 = 891.62525201154;
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo3 = Thought78.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2395>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2396>
    bk = dk < dk;
    boolean lb0 = true;
    boolean lb1 = true;
    boolean lb2 = false;
    Thought lo3 = Thought92.getInstance(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    double ld4 = 248.01266293105905;
    Thought lo5 = Thought50.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb6 = true;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    boolean lb7 = false;
    boolean lb8 = true;
    dk = dk - dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2396>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2397>
    on += dk;
    ok = ok.m4();
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    double ld0 = 272.69437914618544;
    double ld1 = 808.0788623318576;
    bk = dk > dk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
</cutPoint2397>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2398>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb0 = false;
    dk *= -1;
    bk = !bk;
    double ld1 = 450.90657578131663;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2398>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2399>
    ok = ok.m4();
    bk = bk || bk;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        boolean lb0 = false;
        bk = dk > dk;
        }
    dk = dk + dk;
        dk = dk + dk;
    bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo1 = Thought42.getInstance(bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    dk *= -1;
    if (bk) {
        double ld4 = 617.7475784053682;
</cutPoint2399>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2400>
    Thought lo0 = Thought26.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = !bk;
        Thought lo1 = Thought22.getInstance(ok, ok, ok, ok);
        bk = dk > dk;
        for(int j=0; j<10; j++){
            ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb2 = false;
            dk = ok.m3();
            Thought lo3 = Thought89.getInstance(dk, dk, dk, dk);
            ok = ok.m4(bk, bk, bk, bk);
            bk = dk < dk;
            dk *= -1;
            double ld4 = 696.572888306919;
            double ld5 = 780.1826897697994;
            bk = bk && bk;
            bk = bk || bk;
            on += dk;
            bk = !bk;
            double ld6 = 107.56087784039158;
            on -= dk;
            boolean lb7 = true;
            double ld8 = 578.4096017621877;
            dk = dk + dk;
</cutPoint2400>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2401>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 662.349821671179;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2401>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2402>
    Thought lo0 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 698.0469853701441;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    double ld2 = 304.0860989683541;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb3 = false;
    bk = !bk;
</cutPoint2402>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2403>
    boolean lb0 = false;
    boolean lb1 = true;
    bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
    Thought lo2 = Thought60.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    Thought lo3 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb4 = false;
        bk = dk > dk;
        bk = dk < dk;
        boolean lb5 = false;
</cutPoint2403>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2404>
    boolean lb0 = false;
    Thought lo1 = Thought38.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    dk *= -1;
    on -= dk;
    ok.m1(dk, dk, dk, dk);
    boolean lb2 = true;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo3 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    on -= dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb4 = false;
</cutPoint2404>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2405>
    ok.m3();
    dk *= -1;
    on -= dk;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    boolean lb2 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
        Thought lo3 = Thought78.getInstance();
    bk = !bk;
    bk = dk > dk;
    bk = dk > dk;
    on += dk;
    bk = bk && bk;
</cutPoint2405>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2406>
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    on -= dk;
    dk = dk - dk;
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 790.1423104287414;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 380.13195759877743;
    boolean lb2 = false;
    bk = bk && bk;
</cutPoint2406>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2407>
    bk = !bk;
    bk = dk > dk;
    bk = dk > dk;
    dk = dk + dk;
        on += dk;
    Thought lo0 = Thought95.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 34.790703921526855;
</cutPoint2407>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2408>
    bk = bk && bk;
    bk = ok.m2();
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = true;
        ok = ok.m4();
    on -= dk;
    double ld2 = 941.1382022256082;
    dk = dk + dk;
    bk = !bk;
    Thought lo3 = Thought56.getInstance(dk, dk, dk, dk);
</cutPoint2408>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2409>
    boolean lb0 = true;
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb1 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    dk = dk + dk;
    boolean lb2 = false;
    dk *= -1;
    bk = dk < dk;
    bk = ok.m2();
    dk = dk - dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint2409>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2410>
    bk = dk < dk;
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        for(int j=0; j<10; j++){
            bk = dk > dk;
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk - dk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            on += dk;
            double ld1 = 310.16357291597876;
            double ld2 = 479.61433008578416;
            dk = dk + dk;
            Thought lo3 = Thought3.getInstance(ok, ok, ok, ok);
            dk = dk - dk;
            bk = bk || bk;
            double ld4 = 926.5595033885529;
            dk = dk + dk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4();
            dk = dk + dk;
            ok.m1(dk, dk, dk, dk);
</cutPoint2410>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2411>
    dk = dk - dk;
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought84.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    ok.m3();
    double ld2 = 595.2736819399518;
    bk = dk < dk;
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb3 = true;
    ok.m3(bk, bk, bk, bk);
        bk = dk < dk;
    dk = dk + dk;
    bk = dk < dk;
    bk = dk < dk;
    dk = dk - dk;
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2411>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2412>
    on -= dk;
    double ld0 = 519.0356094220831;
    boolean lb1 = true;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    bk = dk > dk;
    double ld2 = 244.01569681795394;
    double ld3 = 794.8495799670931;
    dk *= -1;
    double ld4 = 624.807494940351;
    double ld5 = 430.5967036776583;
    Thought lo6 = Thought72.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2412>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2413>
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk && bk;
    bk = dk > dk;
    double ld0 = 189.1796417852195;
    Thought lo1 = Thought30.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    ok.m3(ok, ok, ok, ok);
    boolean lb3 = true;
    bk = dk < dk;
    dk = dk + dk;
    boolean lb4 = true;
    bk = !bk;
</cutPoint2413>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2414>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    dk *= -1;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo2 = Thought32.getInstance(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk);
    double ld4 = 538.8632597775162;
    boolean lb5 = false;
    Thought lo6 = Thought35.getInstance(bk, bk, bk, bk);
</cutPoint2414>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought69 extends Thought{
private static ArrayList<Thought69> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 183.25055308054928;
private double fd1 = 385.7856696699923;
private Thought fo0 = null;
private Thought fo1 = null;
Thought69 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought69 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought69 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought69 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought69 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought69 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought69 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought69 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought69 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought69 instance = new Thought69 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought69 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought69 instance = new Thought69 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought69 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought69 instance = new Thought69 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought69 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought69 instance = new Thought69 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought69 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought69 instance = new Thought69 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought69 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought69 instance = new Thought69 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought69 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought69 instance = new Thought69 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought69 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought69 instance = new Thought69 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2415>
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 509.8183522698897;
    bk = bk && bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2();
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb1 = true;
    boolean lb2 = true;
    ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    boolean lb3 = false;
    bk = bk && bk;
    bk = bk || bk;
</cutPoint2415>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2416>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo0 = Thought52.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb1 = false;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2416>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2417>
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = false;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        ok = ok.m4();
        on -= dk;
        Thought lo1 = Thought60.getInstance(dk, dk, dk, dk);
        dk = dk - dk;
        dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint2417>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2418>
    Thought lo0 = Thought12.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    bk = !bk;
    bk = dk > dk;
    boolean lb2 = false;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld3 = 498.5635902801663;
    Thought lo4 = Thought71.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint2418>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2419>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    Thought lo2 = Thought10.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok);
    bk = bk || bk;
    dk *= -1;
</cutPoint2419>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2420>
    bk = dk > dk;
    double ld0 = 498.3234360487666;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    boolean lb2 = true;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4();
    Thought lo3 = Thought75.getInstance(dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2420>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2421>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo0 = Thought75.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = dk < dk;
    bk = dk > dk;
    if (bk) {
        dk = dk - dk;
        dk *= -1;
        ok = ok.m4();
        dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk);
        boolean lb2 = false;
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk + dk;
        dk = dk + dk;
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2421>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2422>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    boolean lb1 = false;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = dk + dk;
    ok = ok.m4();
    Thought lo3 = Thought8.getInstance(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb4 = true;
</cutPoint2422>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2423>
    bk = bk || bk;
    double ld0 = 349.811826083851;
    double ld1 = 321.355333806548;
    dk *= -1;
    dk = dk + dk;
    bk = bk && bk;
    bk = !bk;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought60.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    dk *= -1;
    bk = ok.m2();
    if (bk) {
        Thought lo4 = Thought24.getInstance(dk, dk, dk, dk);
        boolean lb5 = true;
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint2423>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2424>
    double ld0 = 277.57068698812196;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2();
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
</cutPoint2424>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2425>
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    dk = ok.m3();
    ok.m3(dk, dk, dk, dk);
    double ld0 = 664.6643866070095;
    on -= dk;
    Thought lo1 = Thought16.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    double ld3 = 468.70876047515674;
    ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        Thought lo4 = Thought57.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2425>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2426>
    bk = ok.m2();
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    Thought lo0 = Thought88.getInstance(bk, bk, bk, bk);
    Thought lo1 = Thought12.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    boolean lb2 = false;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    Thought lo3 = Thought1.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    bk = dk > dk;
    bk = bk && bk;
    double ld4 = 345.36457605053795;
    Thought lo5 = Thought45.getInstance(dk, dk, dk, dk);
</cutPoint2426>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2427>
    on -= dk;
    bk = ok.m2(bk, bk, bk, bk);
    double ld0 = 227.77958821422246;
    bk = bk && bk;
    Thought lo1 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    bk = dk > dk;
    dk = ok.m3();
</cutPoint2427>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2428>
    boolean lb0 = false;
    boolean lb1 = false;
    ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    for(int j=0; j<10; j++){
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought59.getInstance();
        bk = bk || bk;
        dk = dk + dk;
        boolean lb3 = true;
        ok = ok.m4(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo4 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb5 = false;
        if (bk) {
            bk = dk < dk;
            double ld6 = 662.5257739660515;
            bk = dk < dk;
</cutPoint2428>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2429>
        dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought18.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 622.4437425410638;
    dk = dk - dk;
    ok = ok.m4();
    double ld2 = 461.72080657977926;
    dk = dk + dk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    bk = bk || bk;
    double ld3 = 679.3125815423821;
    Thought lo4 = Thought47.getInstance(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
</cutPoint2429>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2430>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = false;
    boolean lb1 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    boolean lb2 = false;
    double ld3 = 668.8126642942586;
    Thought lo4 = Thought50.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk = dk - dk;
        on -= dk;
</cutPoint2430>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2431>
    dk *= -1;
    bk = bk && bk;
    boolean lb0 = true;
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = false;
    boolean lb2 = false;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    Thought lo3 = Thought87.getInstance(dk, dk, dk, dk);
    boolean lb4 = false;
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    for(int j=0; j<10; j++){
        if (bk) {
            on += dk;
            dk = dk - dk;
            dk *= -1;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            Thought lo5 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = dk - dk;
</cutPoint2431>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2432>
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2();
    Thought lo0 = Thought17.getInstance(dk, dk, dk, dk);
    double ld1 = 500.0637357666369;
    boolean lb2 = false;
    boolean lb3 = false;
    boolean lb4 = false;
    dk = dk + dk;
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo5 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2432>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2433>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        Thought lo0 = Thought80.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        dk *= -1;
        Thought lo1 = Thought19.getInstance(ok, ok, ok, ok);
        dk = dk + dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        bk = dk < dk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
</cutPoint2433>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2434>
    bk = dk > dk;
    boolean lb0 = false;
    dk = dk - dk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought70.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    bk = bk && bk;
    dk = dk - dk;
    boolean lb4 = true;
    double ld5 = 972.4755162675922;
    bk = bk || bk;
</cutPoint2434>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2435>
    dk = dk - dk;
    double ld0 = 489.89558678211796;
    Thought lo1 = Thought85.getInstance(dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    on -= dk;
    boolean lb2 = false;
    on += dk;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        dk = ok.m3(bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        boolean lb3 = false;
        bk = dk > dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        }
    bk = dk > dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2435>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2436>
    bk = bk || bk;
    Thought lo0 = Thought67.getInstance(ok, ok, ok, ok);
    bk = !bk;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb1 = true;
    bk = !bk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3();
    boolean lb2 = false;
    Thought lo3 = Thought28.getInstance(dk, dk, dk, dk);
</cutPoint2436>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2437>
    bk = !bk;
    dk *= -1;
    double ld0 = 924.6860315840449;
    bk = !bk;
    double ld1 = 61.463278148709755;
    for(int j=0; j<10; j++){
        double ld2 = 236.82758792337526;
        dk = dk + dk;
        bk = ok.m2(bk, bk, bk, bk);
        on -= dk;
        on -= dk;
</cutPoint2437>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2438>
    dk = dk + dk;
    bk = bk && bk;
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld0 = 337.6500654589868;
    ok = ok.m4();
    dk = dk - dk;
    Thought lo1 = Thought77.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = true;
        boolean lb3 = true;
    double ld4 = 547.0507910350861;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
</cutPoint2438>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2439>
    boolean lb0 = false;
    bk = bk || bk;
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought12.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld3 = 967.7919437512613;
    bk = bk || bk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
    on += dk;
    ok.m1(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    boolean lb4 = false;
    dk *= -1;
    dk = dk - dk;
    double ld5 = 919.4289711900356;
    Thought lo6 = Thought89.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
</cutPoint2439>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2440>
    boolean lb0 = true;
    double ld1 = 431.1991863691163;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    on -= dk;
    if (bk) {
        dk = dk + dk;
        dk *= -1;
        boolean lb2 = true;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        Thought lo3 = Thought43.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        bk = bk && bk;
        dk = dk - dk;
        dk = dk - dk;
</cutPoint2440>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2441>
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok);
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb0 = false;
    dk = dk - dk;
    on -= dk;
    dk *= -1;
    boolean lb1 = false;
    dk = dk + dk;
    ok.m1();
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb2 = true;
    dk *= -1;
</cutPoint2441>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2442>
    bk = !bk;
    dk *= -1;
    Thought lo0 = Thought99.getInstance(bk, bk, bk, bk);
        on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    boolean lb1 = false;
</cutPoint2442>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2443>
        bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    dk *= -1;
    double ld0 = 337.7321839125958;
    Thought lo1 = Thought50.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb2 = true;
</cutPoint2443>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2444>
        dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    boolean lb0 = false;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    on += dk;
    dk *= -1;
        dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        double ld1 = 454.5200032041686;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok);
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2444>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2445>
    bk = ok.m2();
    boolean lb0 = true;
    ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    dk = dk - dk;
    boolean lb1 = false;
    dk *= -1;
    ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    double ld2 = 643.9816033773532;
    bk = bk && bk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    bk = bk && bk;
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2445>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2446>
    Thought lo0 = Thought30.getInstance();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    on += dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    if (bk) {
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk + dk;
        bk = dk > dk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        ok.m2(ok, ok, ok, ok);
</cutPoint2446>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2447>
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    bk = bk && bk;
    boolean lb0 = true;
    double ld1 = 878.6976637612827;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 526.7587315071693;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2447>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2448>
    dk *= -1;
    Thought lo0 = Thought1.getInstance(ok, ok, ok, ok);
    double ld1 = 805.5590555574246;
    boolean lb2 = true;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    Thought lo3 = Thought40.getInstance(dk, dk, dk, dk);
    boolean lb4 = true;
    boolean lb5 = false;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint2448>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2449>
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    Thought lo0 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    Thought lo1 = Thought29.getInstance();
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo2 = Thought21.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    Thought lo3 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = bk && bk;
</cutPoint2449>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought70 extends Thought{
private static ArrayList<Thought70> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 800.9705320336377;
private double fd1 = 817.2290941406465;
private Thought fo0 = null;
private Thought fo1 = null;
Thought70 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought70 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought70 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought70 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought70 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought70 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought70 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought70 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought70 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought70 instance = new Thought70 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought70 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought70 instance = new Thought70 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought70 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought70 instance = new Thought70 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought70 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought70 instance = new Thought70 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought70 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought70 instance = new Thought70 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought70 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought70 instance = new Thought70 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought70 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought70 instance = new Thought70 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought70 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought70 instance = new Thought70 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2450>
    Thought lo0 = Thought91.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = bk && bk;
    dk *= -1;
    dk = dk + dk;
    boolean lb1 = true;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    on += dk;
    bk = bk && bk;
    bk = bk || bk;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        on -= dk;
        on -= dk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk && bk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        for(int j=0; j<10; j++){
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4();
</cutPoint2450>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2451>
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4();
        boolean lb1 = true;
        ok = ok.m4(dk, dk, dk, dk);
        }
        boolean lb2 = true;
    on -= dk;
    bk = bk || bk;
    if (bk) {
        boolean lb3 = false;
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        on -= dk;
        Thought lo4 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2451>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2452>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld1 = 773.8864694900931;
    bk = !bk;
    bk = !bk;
    dk = ok.m3();
</cutPoint2452>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2453>
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo0 = Thought56.getInstance(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought70.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought10.getInstance();
    boolean lb3 = false;
    dk = dk + dk;
    boolean lb4 = false;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo5 = Thought73.getInstance(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2453>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2454>
    ok = ok.m4();
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
    dk *= -1;
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    bk = bk && bk;
    bk = bk || bk;
    on -= dk;
    Thought lo1 = Thought72.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
</cutPoint2454>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2455>
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = true;
        bk = bk || bk;
        }
    dk = dk + dk;
    dk = dk - dk;
    bk = dk < dk;
        boolean lb2 = false;
    double ld3 = 769.9045810777051;
    Thought lo4 = Thought15.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = false;
    double ld6 = 799.6292755224546;
</cutPoint2455>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2456>
    bk = dk > dk;
    bk = !bk;
    boolean lb0 = true;
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    bk = dk > dk;
        boolean lb2 = true;
    bk = bk || bk;
    Thought lo3 = Thought87.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1();
    Thought lo4 = Thought34.getInstance(dk, dk, dk, dk);
    Thought lo5 = Thought90.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint2456>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2457>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
    double ld0 = 78.04017467063821;
    boolean lb1 = true;
    dk = dk - dk;
    bk = dk > dk;
    bk = dk < dk;
    Thought lo2 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    dk = dk - dk;
    bk = !bk;
    Thought lo3 = Thought43.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
</cutPoint2457>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2458>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 970.3062126527017;
    on -= dk;
    if (bk) {
        dk = dk + dk;
        bk = bk && bk;
        boolean lb2 = false;
        bk = dk < dk;
</cutPoint2458>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2459>
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        }
    bk = bk || bk;
    bk = bk || bk;
    boolean lb0 = true;
    boolean lb1 = true;
    bk = dk < dk;
    boolean lb2 = true;
    boolean lb3 = false;
    bk = dk > dk;
    double ld4 = 182.7231362888868;
    dk *= -1;
    bk = bk || bk;
    Thought lo5 = Thought81.getInstance(ok, ok, ok, ok);
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 238.49014871674424;
    bk = dk < dk;
    bk = ok.m2();
    bk = bk && bk;
    dk = dk - dk;
    boolean lb7 = false;
    bk = bk || bk;
    double ld8 = 677.6324192337187;
</cutPoint2459>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2460>
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    boolean lb0 = true;
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
        bk = !bk;
    dk = dk + dk;
    on -= dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = dk < dk;
        dk *= -1;
        } else if (bk) {
        double ld1 = 480.40841837350877;
        Thought lo2 = Thought58.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        dk = dk - dk;
        bk = dk < dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3();
        ok.m2(dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        Thought lo3 = Thought73.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb4 = false;
</cutPoint2460>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2461>
    Thought lo0 = Thought15.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    bk = dk < dk;
    bk = bk || bk;
    boolean lb2 = false;
    dk = dk - dk;
    if (bk) {
        dk = dk - dk;
        boolean lb3 = true;
        Thought lo4 = Thought69.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        double ld5 = 291.22538649647504;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2461>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2462>
    boolean lb0 = false;
        dk *= -1;
    dk *= -1;
    dk = dk - dk;
    boolean lb1 = true;
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb4 = true;
    double ld5 = 206.62881122080748;
    boolean lb6 = false;
    boolean lb7 = true;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb8 = false;
    boolean lb9 = false;
    Thought lo10 = Thought23.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb11 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2462>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2463>
    Thought lo0 = Thought76.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    double ld1 = 309.9421849493735;
    dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
        bk = bk && bk;
</cutPoint2463>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2464>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
        dk *= -1;
    boolean lb0 = true;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        boolean lb1 = true;
        bk = dk > dk;
        on -= dk;
        bk = ok.m2();
</cutPoint2464>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2465>
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb2 = false;
    Thought lo3 = Thought91.getInstance();
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo4 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought53.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb6 = false;
</cutPoint2465>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2466>
    boolean lb0 = true;
    Thought lo1 = Thought31.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    bk = !bk;
    bk = bk && bk;
    Thought lo2 = Thought98.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb3 = true;
    boolean lb4 = true;
    double ld5 = 260.24626031795697;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb6 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2466>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2467>
    bk = dk > dk;
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk);
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    dk *= -1;
    boolean lb1 = true;
    dk = dk - dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb2 = false;
        bk = !bk;
        dk = dk + dk;
        bk = bk && bk;
        dk = dk - dk;
        bk = dk < dk;
        dk = dk + dk;
        dk = dk - dk;
        boolean lb3 = true;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld4 = 445.48010633522597;
        bk = bk && bk;
        Thought lo5 = Thought34.getInstance(ok, ok, ok, ok);
        Thought lo6 = Thought32.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2467>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2468>
    dk = dk - dk;
    dk = dk + dk;
    double ld0 = 774.1649737519652;
    on += dk;
    dk = dk - dk;
    boolean lb1 = false;
    on += dk;
    dk = ok.m3();
    ok.m3(dk, dk, dk, dk);
    boolean lb2 = false;
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought23.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    bk = dk < dk;
    bk = bk || bk;
    double ld4 = 864.1405900854259;
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    bk = bk && bk;
</cutPoint2468>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2469>
        dk = dk + dk;
    bk = !bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        bk = bk || bk;
        dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint2469>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2470>
    bk = bk || bk;
    bk = dk > dk;
    dk = dk + dk;
    bk = bk && bk;
    dk *= -1;
    dk = ok.m3();
    bk = dk < dk;
    boolean lb0 = true;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2470>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2471>
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    boolean lb0 = false;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    on += dk;
    boolean lb2 = false;
    boolean lb3 = false;
    boolean lb4 = false;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo6 = Thought25.getInstance(ok, ok, ok, ok);
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    double ld7 = 921.6684727073441;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint2471>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2472>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);    bk = bk && bk;    bk = bk || bk;    bk = !bk;    bk = ok.m2(ok, ok, ok, ok);    bk = bk && bk;        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);    bk = bk || bk;    double ld0 = 497.1439511508974;    dk = dk + dk;    ok = ok.m4();    ok = ok.m4(dk, dk, dk, dk);    dk = dk + dk;    double ld3 = 854.1369545667773;    ok = ok.m4(ok, ok, ok, ok);    boolean lb4 = false;    bk = dk < dk;    bk = dk > dk;    dk *= -1;    boolean lb5 = true;</cutPoint2472>Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2473>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
        on -= dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    dk *= -1;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2473>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2474>
        bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    Thought lo1 = Thought43.getInstance(bk, bk, bk, bk);
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb2 = false;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk);
</cutPoint2474>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2475>
        on -= dk;
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo0 = Thought42.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    on += dk;
    Thought lo1 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2475>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2476>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb0 = true;
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2476>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2477>
    bk = !bk;
    ok.m1();
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought72.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk - dk;
    bk = bk && bk;
    dk = dk - dk;
    boolean lb3 = true;
    dk *= -1;
    boolean lb4 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb5 = true;
    bk = !bk;
    double ld6 = 593.0690918232455;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2477>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2478>
    dk = dk + dk;
    boolean lb0 = false;
    bk = !bk;
    ok.m3(ok, ok, ok, ok);
    bk = !bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    double ld2 = 943.499806598293;
        bk = bk && bk;
    double ld3 = 150.60707188587477;
    dk *= -1;
    bk = bk && bk;
    ok.m3(bk, bk, bk, bk);
    bk = !bk;
    for(int j=0; j<10; j++){
        bk = !bk;
        bk = ok.m2();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2478>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2479>
    Thought lo0 = Thought68.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = dk > dk;
    on += dk;
    dk = dk - dk;
    on += dk;
    bk = bk || bk;
    boolean lb1 = true;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint2479>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2480>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    boolean lb0 = false;
    dk = dk - dk;
    boolean lb1 = false;
    dk = dk + dk;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk);
    Thought lo2 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 2.558849038906476;
    dk = dk - dk;
</cutPoint2480>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2481>
    dk *= -1;
    bk = !bk;
    dk *= -1;
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    on -= dk;
    dk = dk + dk;
    bk = bk && bk;
    bk = bk || bk;
    dk *= -1;
    ok.m2();
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk < dk;
    Thought lo0 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo1 = Thought5.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m2(dk, dk, dk, dk);
    double ld2 = 494.14203036207095;
</cutPoint2481>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2482>
    double ld0 = 731.157408591175;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    boolean lb1 = false;
    bk = dk > dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = dk > dk;
    Thought lo2 = Thought39.getInstance();
    Thought lo3 = Thought37.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk || bk;
    dk = dk - dk;
    Thought lo4 = Thought81.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
        Thought lo5 = Thought92.getInstance(bk, bk, bk, bk);
    Thought lo6 = Thought3.getInstance();
    bk = !bk;
    Thought lo7 = Thought6.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2482>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2483>
        dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 855.0489782917143;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
    dk = ok.m3();
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb1 = true;
    boolean lb2 = true;
</cutPoint2483>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2484>
    double ld0 = 598.3524403112525;
    dk = ok.m3(ok, ok, ok, ok);
    double ld1 = 431.7417439754935;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought26.getInstance(dk, dk, dk, dk);
    Thought lo3 = Thought89.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb4 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    boolean lb5 = true;
    bk = !bk;
</cutPoint2484>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought71 extends Thought{
private static ArrayList<Thought71> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 171.48883664583406;
private double fd1 = 59.167130491256444;
private Thought fo0 = null;
private Thought fo1 = null;
Thought71 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought71 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought71 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought71 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought71 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought71 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought71 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought71 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought71 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought71 instance = new Thought71 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought71 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought71 instance = new Thought71 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought71 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought71 instance = new Thought71 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought71 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought71 instance = new Thought71 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought71 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought71 instance = new Thought71 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought71 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought71 instance = new Thought71 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought71 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought71 instance = new Thought71 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought71 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought71 instance = new Thought71 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2485>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    Thought lo0 = Thought21.getInstance(dk, dk, dk, dk);
    boolean lb1 = false;
    dk *= -1;
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    double ld3 = 315.71520493019614;
    double ld4 = 43.08155324526164;
    boolean lb5 = false;
    double ld6 = 212.61333874387756;
    dk *= -1;
    dk = ok.m3();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld7 = 305.7764132359639;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    double ld8 = 875.5980197429051;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint2485>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2486>
    dk = dk + dk;
    boolean lb0 = true;
    dk = dk + dk;
    bk = bk && bk;
    if (bk) {
        ok = ok.m4(bk, bk, bk, bk);
        dk = ok.m3();
        bk = dk > dk;
        bk = !bk;
        bk = dk < dk;
        on += dk;
        Thought lo1 = Thought45.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk && bk;
        bk = bk && bk;
        bk = bk || bk;
        Thought lo2 = Thought79.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = ok.m2();
</cutPoint2486>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2487>
    boolean lb0 = false;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = dk + dk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb1 = true;
        boolean lb2 = false;
        double ld3 = 487.26569546727774;
        bk = bk && bk;
        dk = dk - dk;
        dk = dk + dk;
        bk = dk > dk;
        for(int j=0; j<10; j++){
            boolean lb4 = true;
            bk = bk && bk;
            boolean lb5 = true;
            ok = ok.m4(dk, dk, dk, dk);
            Thought lo6 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            ok = ok.m4(bk, bk, bk, bk);
</cutPoint2487>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2488>
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    Thought lo0 = Thought17.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    boolean lb2 = false;
    boolean lb3 = true;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    double ld4 = 614.6047793714102;
    ok.m1(bk, bk, bk, bk);
    boolean lb5 = true;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4();
    Thought lo6 = Thought87.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo7 = Thought18.getInstance(ok, ok, ok, ok);
</cutPoint2488>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2489>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb0 = true;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
            bk = bk || bk;
    ok = ok.m4();
    bk = dk < dk;
    bk = bk || bk;
</cutPoint2489>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2490>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    double ld0 = 776.798564563117;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    if (bk) {
        dk = dk + dk;
        bk = !bk;
        on -= dk;
        Thought lo2 = Thought59.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m3(bk, bk, bk, bk);
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        double ld3 = 446.5739253958699;
        dk = ok.m3(ok, ok, ok, ok);
        boolean lb4 = false;
        for(int j=0; j<10; j++){
            dk = dk - dk;
</cutPoint2490>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2491>
    dk = dk - dk;
    on -= dk;
    Thought lo0 = Thought51.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    Thought lo1 = Thought3.getInstance(bk, bk, bk, bk);
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 963.4213522001533;
    dk *= -1;
    Thought lo3 = Thought73.getInstance(ok, ok, ok, ok);
        on += dk;
    boolean lb4 = false;
    boolean lb5 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint2491>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2492>
    Thought lo0 = Thought36.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb1 = false;
    Thought lo2 = Thought20.getInstance(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        for(int j=0; j<10; j++){
            dk = ok.m3(bk, bk, bk, bk);
            double ld3 = 548.8365302758425;
            bk = bk || bk;
            ok = ok.m4();
            bk = dk < dk;
            double ld4 = 54.0942833396702;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb5 = false;
            dk = ok.m3(ok, ok, ok, ok);
            bk = dk < dk;
            bk = dk > dk;
            bk = !bk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            double ld6 = 527.9236486590449;
            boolean lb7 = false;
            bk = dk > dk;
            bk = bk || bk;
            double ld8 = 609.499604931189;
            ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = dk > dk;
</cutPoint2492>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2493>
    dk *= -1;
    bk = dk < dk;
    dk *= -1;
    boolean lb0 = false;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk + dk;
    dk *= -1;
    if (bk) {
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint2493>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2494>
    boolean lb0 = false;
    bk = dk > dk;
    dk *= -1;
    bk = !bk;
    Thought lo1 = Thought6.getInstance();
    boolean lb2 = true;
    Thought lo3 = Thought40.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld4 = 828.6890566537757;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    on -= dk;
    dk *= -1;
    on -= dk;
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
</cutPoint2494>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2495>
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb1 = true;
    double ld2 = 196.8729270748371;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 320.7986071055944;
    bk = dk > dk;
    on += dk;
    Thought lo4 = Thought32.getInstance(bk, bk, bk, bk);
    double ld5 = 305.0930021174119;
</cutPoint2495>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2496>
    on += dk;
    boolean lb0 = false;
    dk = dk - dk;
    on -= dk;
    ok.m3();
    bk = bk && bk;
    bk = !bk;
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    Thought lo2 = Thought67.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    double ld3 = 991.6239352106226;
    bk = dk < dk;
    boolean lb4 = true;
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
</cutPoint2496>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2497>
    boolean lb0 = false;
    double ld1 = 341.40545066349324;
    Thought lo2 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    if (bk) {
        bk = !bk;
        ok.m1(bk, bk, bk, bk);
        dk *= -1;
        dk = dk - dk;
        ok = ok.m4();
        on += dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        dk = dk + dk;
        Thought lo3 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        for(int j=0; j<10; j++){
            boolean lb4 = false;
</cutPoint2497>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2498>
    bk = bk || bk;
        ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    double ld0 = 192.65772566801175;
    Thought lo1 = Thought56.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    on -= dk;
</cutPoint2498>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2499>
    dk *= -1;
    Thought lo0 = Thought26.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 72.73180324554414;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
    Thought lo2 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint2499>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2500>
    bk = dk < dk;
    dk = dk - dk;
    Thought lo0 = Thought31.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought53.getInstance(bk, bk, bk, bk);
    boolean lb3 = false;
    bk = bk || bk;
    bk = bk || bk;
</cutPoint2500>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2501>
    bk = bk && bk;
    boolean lb0 = true;
    if (bk) {
        ok.m2();
        boolean lb1 = true;
        Thought lo2 = Thought80.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = true;
        dk = dk + dk;
        boolean lb4 = false;
        dk = ok.m3(ok, ok, ok, ok);
</cutPoint2501>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2502>
    on -= dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    dk = dk - dk;
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    bk = !bk;
        dk = dk - dk;
</cutPoint2502>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2503>
    on -= dk;
    Thought lo0 = Thought96.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    boolean lb1 = true;
    bk = bk || bk;
    dk = dk + dk;
    bk = dk < dk;
    on += dk;
    Thought lo2 = Thought49.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    double ld3 = 832.4092007179606;
    Thought lo4 = Thought1.getInstance(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        on -= dk;
</cutPoint2503>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2504>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 358.4267676618602;
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        boolean lb1 = false;
        ok.m1(ok, ok, ok, ok);
        dk = dk - dk;
        dk = dk + dk;
        dk = dk + dk;
        bk = !bk;
        boolean lb2 = false;
        bk = dk < dk;
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb3 = false;
        bk = dk > dk;
</cutPoint2504>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2505>
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk);
        if (bk) {
            Thought lo0 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            dk = dk - dk;
            dk *= -1;
            bk = bk || bk;
            double ld1 = 442.7720360719717;
            double ld2 = 108.58062644594068;
            ok = ok.m4(bk, bk, bk, bk);
            boolean lb3 = false;
            ok = ok.m4();
            dk *= -1;
            dk *= -1;
            bk = dk > dk;
</cutPoint2505>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2506>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought87.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    bk = !bk;
    on -= dk;
    boolean lb1 = true;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 78.95545843927839;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo4 = Thought52.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    boolean lb5 = false;
    double ld6 = 118.59203522751162;
    double ld7 = 485.3361946098139;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        double ld8 = 206.5153035069749;
</cutPoint2506>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2507>
        double ld0 = 393.43061932416896;
    dk = dk - dk;
    boolean lb1 = false;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb2 = false;
    dk = dk + dk;
    bk = bk || bk;
    dk *= -1;
    on -= dk;
        boolean lb3 = false;
    bk = dk < dk;
    on += dk;
    boolean lb4 = true;
    bk = bk || bk;
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2507>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2508>
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 877.1312039153773;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo3 = Thought59.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo4 = Thought76.getInstance();
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint2508>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2509>
    ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        boolean lb0 = false;
        dk = dk + dk;
</cutPoint2509>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2510>
    double ld0 = 642.7947072219292;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo1 = Thought70.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    boolean lb3 = true;
    dk = dk + dk;
    Thought lo4 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb5 = true;
    boolean lb6 = false;
    ok.m2();
    Thought lo7 = Thought80.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb8 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2510>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2511>
    double ld0 = 777.6482603758113;
    dk *= -1;
    dk = dk - dk;
    on += dk;
    boolean lb1 = true;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought26.getInstance(bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    bk = dk > dk;
    boolean lb3 = true;
    boolean lb4 = false;
    Thought lo5 = Thought95.getInstance();
    double ld6 = 892.248404154108;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb7 = true;
    bk = dk > dk;
    bk = !bk;
    dk *= -1;
    bk = dk < dk;
        boolean lb8 = false;
</cutPoint2511>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2512>
    double ld0 = 492.8697799960498;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    double ld1 = 609.2025548456099;
    bk = !bk;
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = true;
    double ld5 = 581.1952724210497;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo6 = Thought69.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    boolean lb7 = false;
    double ld8 = 915.67166611642;
</cutPoint2512>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2513>
    on += dk;
    ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        }
    dk = dk - dk;
    boolean lb1 = false;
    boolean lb2 = false;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb3 = false;
    for(int j=0; j<10; j++){
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        boolean lb4 = false;
        double ld5 = 276.98676826351766;
        Thought lo6 = Thought65.getInstance(ok, ok, ok, ok);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld7 = 609.5407761202864;
        boolean lb8 = false;
        dk = dk + dk;
        if (bk) {
            bk = bk || bk;
            bk = bk && bk;
</cutPoint2513>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2514>
    boolean lb0 = true;
    Thought lo1 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
    dk *= -1;
    ok = ok.m4();
    bk = dk < dk;
    on += dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint2514>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2515>
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb0 = true;
    dk = dk + dk;
    on -= dk;
    double ld1 = 43.97009249838643;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo2 = Thought32.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    double ld3 = 893.3283995327257;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2515>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2516>
    bk = dk < dk;
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
        dk = dk - dk;
    bk = bk || bk;
    Thought lo0 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought85.getInstance(dk, dk, dk, dk);
    boolean lb2 = true;
    dk = dk - dk;
    boolean lb3 = false;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint2516>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2517>
    bk = dk > dk;
    boolean lb0 = true;
    ok = ok.m4();
    bk = !bk;
    boolean lb1 = false;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
        bk = dk > dk;
    bk = bk || bk;
    Thought lo3 = Thought52.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb4 = false;
    on += dk;
    dk = dk - dk;
    boolean lb5 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint2517>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2518>
        double ld0 = 770.3978070157887;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    boolean lb1 = false;
    Thought lo2 = Thought61.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
    Thought lo3 = Thought38.getInstance(dk, dk, dk, dk);
    Thought lo4 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb5 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    double ld6 = 816.3502260922363;
    bk = dk > dk;
    dk = dk + dk;
    bk = !bk;
    double ld7 = 717.4158996730505;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
</cutPoint2518>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2519>
    dk = dk + dk;
    on -= dk;
    dk = dk - dk;
    Thought lo0 = Thought31.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo2 = Thought74.getInstance();
    double ld3 = 354.9433963578335;
</cutPoint2519>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought72 extends Thought{
private static ArrayList<Thought72> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 118.574530737597;
private double fd1 = 707.5287638993119;
private Thought fo0 = null;
private Thought fo1 = null;
Thought72 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought72 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought72 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought72 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought72 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought72 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought72 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought72 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought72 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought72 instance = new Thought72 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought72 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought72 instance = new Thought72 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought72 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought72 instance = new Thought72 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought72 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought72 instance = new Thought72 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought72 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought72 instance = new Thought72 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought72 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought72 instance = new Thought72 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought72 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought72 instance = new Thought72 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought72 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought72 instance = new Thought72 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2520>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld0 = 699.0577080019184;
    ok.m1(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 462.8266849007655;
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk *= -1;
    dk = dk + dk;
</cutPoint2520>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2521>
    on += dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    on += dk;
    bk = dk > dk;
    bk = !bk;
    boolean lb0 = true;
    dk = dk - dk;
    dk = ok.m3();
        bk = dk < dk;
    bk = !bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    on += dk;
    bk = bk && bk;
    boolean lb1 = true;
    dk = ok.m3(ok, ok, ok, ok);
    </cutPoint2521>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2522>
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        if (bk) {
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk && bk;
            Thought lo0 = Thought39.getInstance(dk, dk, dk, dk);
            boolean lb1 = false;
            double ld2 = 10.083521061651316;
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
            ok = ok.m4(bk, bk, bk, bk);
            double ld3 = 104.08603944004052;
            double ld4 = 723.2785332290727;
            dk = dk - dk;
            ok.m2();
            } else if (bk) {
            ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk || bk;
</cutPoint2522>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2523>
    Thought lo0 = Thought55.getInstance(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought8.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    bk = dk > dk;
    bk = dk > dk;
    on += dk;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint2523>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2524>
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    on -= dk;
    bk = bk && bk;
    bk = dk < dk;
    bk = !bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought3.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3();
    bk = bk && bk;
    boolean lb2 = true;
    dk = dk + dk;
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    bk = dk < dk;
    bk = bk && bk;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2524>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2525>
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
    on -= dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb2 = false;
    Thought lo3 = Thought95.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo4 = Thought37.getInstance(ok, ok, ok, ok);
    double ld5 = 571.0193750354068;
    bk = dk > dk;
    bk = dk > dk;
    dk = dk - dk;
</cutPoint2525>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2526>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought95.getInstance(bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3();
    bk = dk > dk;
    boolean lb2 = false;
    dk = dk - dk;
</cutPoint2526>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2527>
    bk = bk && bk;
    if (bk) {
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        ok.m3(ok, ok, ok, ok);
        if (bk) {
            bk = bk && bk;
            bk = dk > dk;
            boolean lb0 = true;
            bk = bk && bk;
            on += dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk > dk;
            Thought lo1 = Thought31.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk && bk;
            bk = bk && bk;
            on += dk;
            boolean lb2 = false;
            boolean lb3 = true;
            ok = ok.m4(dk, dk, dk, dk);
            ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = dk > dk;
            ok = ok.m4(bk, bk, bk, bk);
            on -= dk;
            dk = ok.m3();
            bk = !bk;
</cutPoint2527>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2528>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    Thought lo0 = Thought51.getInstance(ok, ok, ok, ok);
    bk = !bk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = false;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
</cutPoint2528>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2529>
    ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    Thought lo0 = Thought54.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought1.getInstance();
    if (bk) {
        on += dk;
        bk = !bk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = dk < dk;
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok);
        Thought lo2 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb3 = true;
        ok = ok.m4(dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld4 = 704.2406640998604;
        Thought lo5 = Thought84.getInstance(bk, bk, bk, bk);
        bk = dk < dk;
        ok = ok.m4();
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        bk = bk && bk;
</cutPoint2529>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2530>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    double ld0 = 2.8588062377571246;
    dk = dk + dk;
        on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo1 = Thought75.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb2 = false;
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    on -= dk;
    Thought lo3 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = dk < dk;
</cutPoint2530>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2531>
    dk = dk - dk;
    Thought lo0 = Thought8.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    bk = !bk;
    on -= dk;
    dk = dk - dk;
    Thought lo1 = Thought50.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo2 = Thought51.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint2531>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2532>
    boolean lb0 = false;
    bk = bk || bk;
    bk = !bk;
    ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    bk = bk || bk;
    Thought lo1 = Thought13.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 53.04874001072338;
    double ld3 = 133.9242925597864;
    boolean lb4 = false;
</cutPoint2532>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2533>
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo0 = Thought70.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb1 = false;
</cutPoint2533>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2534>
    dk *= -1;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 502.1229146323072;
    ok = ok.m4();
    bk = dk > dk;
    Thought lo2 = Thought57.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    on += dk;
    dk *= -1;
    on += dk;
    bk = dk < dk;
    dk = dk + dk;
    double ld3 = 224.73910985638796;
    double ld4 = 654.7935589974192;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
</cutPoint2534>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2535>
    boolean lb0 = true;
    dk = dk + dk;
    bk = !bk;
    double ld1 = 476.36217747505134;
    bk = dk > dk;
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    ok = ok.m4(bk, bk, bk, bk);
    double ld4 = 56.913484199219425;
    Thought lo5 = Thought8.getInstance();
    Thought lo6 = Thought79.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb7 = false;
    double ld8 = 153.75292889674088;
    ok.m2(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = dk > dk;
        bk = dk < dk;
        for(int j=0; j<10; j++){
            on += dk;
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = ok.m3(dk, dk, dk, dk);
            bk = dk < dk;
            ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
            boolean lb9 = false;
</cutPoint2535>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2536>
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    on -= dk;
    for(int j=0; j<10; j++){
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb0 = true;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
        on += dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk = dk + dk;
        bk = dk < dk;
        bk = bk || bk;
        Thought lo1 = Thought6.getInstance(ok, ok, ok, ok);
        if (bk) {
</cutPoint2536>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2537>
    on -= dk;
    bk = bk && bk;
    bk = bk || bk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
    double ld0 = 839.7980300511866;
    on += dk;
    dk = dk + dk;
</cutPoint2537>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2538>
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought72.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 108.08402897667376;
    double ld3 = 608.7880882034183;
    double ld4 = 110.73404395711783;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint2538>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2539>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk < dk;
    ok.m1(bk, bk, bk, bk);
    ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint2539>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2540>
    double ld0 = 982.75888815972;
    bk = bk || bk;
    double ld1 = 266.74802181149886;
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    dk *= -1;
    bk = bk || bk;
    bk = !bk;
    bk = dk < dk;
    dk *= -1;
    dk = dk + dk;
    bk = bk && bk;
    bk = bk && bk;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2540>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2541>
    bk = bk && bk;
    bk = dk > dk;
        boolean lb0 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    bk = bk && bk;
    Thought lo2 = Thought49.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4();
    Thought lo3 = Thought3.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb4 = true;
    Thought lo5 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2541>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2542>
    bk = ok.m2(bk, bk, bk, bk);
    double ld0 = 822.8967578955339;
    Thought lo1 = Thought7.getInstance();
    dk *= -1;
    dk = dk + dk;
    on -= dk;
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    dk = dk - dk;
    bk = dk < dk;
</cutPoint2542>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2543>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    double ld0 = 593.0798130024095;
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        boolean lb2 = false;
    bk = dk < dk;
    ok.m3();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld3 = 938.2180050062234;
    for(int j=0; j<10; j++){
        bk = !bk;
        dk *= -1;
        bk = bk && bk;
        dk = dk + dk;
</cutPoint2543>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2544>
    Thought lo0 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought47.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    double ld2 = 507.57781467131986;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb3 = true;
    bk = bk || bk;
    dk = dk - dk;
</cutPoint2544>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2545>
    double ld0 = 969.0318971942911;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4();
    on += dk;
    on += dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo1 = Thought49.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb2 = false;
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2545>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2546>
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought73.getInstance();
    bk = !bk;
    bk = !bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    boolean lb2 = true;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    double ld3 = 29.981026575442634;
        bk = dk > dk;
    dk = dk - dk;
    double ld4 = 784.3816425732176;
    bk = !bk;
    Thought lo5 = Thought22.getInstance(dk, dk, dk, dk);
    Thought lo6 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    if (bk) {
        Thought lo7 = Thought89.getInstance(bk, bk, bk, bk);
        boolean lb8 = true;
</cutPoint2546>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2547>
    bk = dk < dk;
    if (bk) {
        bk = dk > dk;
        bk = ok.m2();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk || bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo0 = Thought11.getInstance(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo1 = Thought92.getInstance(bk, bk, bk, bk);
        dk = ok.m3();
</cutPoint2547>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2548>
        bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    double ld0 = 765.8268500167993;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        bk = bk || bk;
        double ld1 = 249.96782929753826;
        bk = bk && bk;
        dk = dk - dk;
        bk = dk > dk;
        dk = dk + dk;
        double ld2 = 212.4873465445593;
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        bk = dk < dk;
        bk = dk < dk;
        on -= dk;
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk);
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb3 = false;
</cutPoint2548>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2549>
    on += dk;
    on -= dk;
    bk = ok.m2(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk < dk;
        bk = bk || bk;
        dk = dk + dk;
        ok.m3();
        boolean lb0 = false;
        Thought lo1 = Thought62.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = true;
        dk = dk - dk;
        dk *= -1;
        bk = !bk;
        dk *= -1;
        Thought lo3 = Thought21.getInstance(ok, ok, ok, ok);
        bk = dk > dk;
        bk = !bk;
</cutPoint2549>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2550>
    dk = dk + dk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought63.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = false;
    bk = ok.m2();
    bk = dk < dk;
    Thought lo2 = Thought0.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    double ld3 = 1000.4120739187599;
    Thought lo4 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought81.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint2550>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2551>
        ok.m3();
    if (bk) {
        double ld0 = 823.6568854033834;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        bk = dk < dk;
        bk = dk > dk;
        double ld1 = 250.8755475271567;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb2 = false;
        boolean lb3 = true;
        dk *= -1;
        ok.m2(dk, dk, dk, dk);
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        ok = ok.m4();
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2551>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2552>
    Thought lo0 = Thought68.getInstance(ok, ok, ok, ok);
    double ld1 = 357.82467219954;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    Thought lo3 = Thought75.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = false;
    bk = dk < dk;
    bk = !bk;
    boolean lb5 = false;
    boolean lb6 = true;
    dk = dk + dk;
    bk = dk > dk;
    bk = dk > dk;
    dk *= -1;
        on += dk;
    dk = dk + dk;
    ok.m2(bk, bk, bk, bk);
    double ld7 = 854.6460065133513;
    double ld8 = 577.8238192683795;
    boolean lb9 = false;
</cutPoint2552>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2553>
    Thought lo0 = Thought44.getInstance();
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    dk = dk - dk;
    double ld1 = 906.1118486912361;
    Thought lo2 = Thought14.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk + dk;
    boolean lb3 = false;
    Thought lo4 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    on -= dk;
    Thought lo5 = Thought37.getInstance();
</cutPoint2553>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2554>
    dk *= -1;
    dk = dk + dk;
    dk = dk - dk;
    dk = dk - dk;
    bk = dk < dk;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb0 = false;
    Thought lo1 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    boolean lb2 = false;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint2554>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought73 extends Thought{
private static ArrayList<Thought73> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 156.95533177171083;
private double fd1 = 135.9007224346557;
private Thought fo0 = null;
private Thought fo1 = null;
Thought73 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought73 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought73 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought73 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought73 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought73 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought73 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought73 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought73 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought73 instance = new Thought73 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought73 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought73 instance = new Thought73 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought73 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought73 instance = new Thought73 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought73 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought73 instance = new Thought73 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought73 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought73 instance = new Thought73 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought73 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought73 instance = new Thought73 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought73 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought73 instance = new Thought73 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought73 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought73 instance = new Thought73 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2555>
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok.m3(bk, bk, bk, bk);
    boolean lb0 = true;
    dk = dk - dk;
        bk = !bk;
    ok = ok.m4();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 412.02934702147763;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought4.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    bk = bk || bk;
</cutPoint2555>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2556>
    dk = dk + dk;
    boolean lb0 = true;
    dk *= -1;
    Thought lo1 = Thought57.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
        on += dk;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld2 = 627.8673182311942;
    dk = dk - dk;
        bk = !bk;
    dk = dk + dk;
</cutPoint2556>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2557>
    ok.m2(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    bk = dk < dk;
    boolean lb0 = false;
        Thought lo1 = Thought62.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4();
    dk = dk + dk;
</cutPoint2557>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2558>
    bk = dk > dk;
    double ld0 = 869.7865414014317;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    double ld1 = 814.730989460413;
    double ld2 = 400.53865400063717;
    ok.m1(dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    boolean lb4 = false;
    ok.m1(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    Thought lo5 = Thought86.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld6 = 567.8581893553244;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
        dk = dk + dk;
</cutPoint2558>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2559>
    bk = !bk;
    bk = bk || bk;
    boolean lb0 = true;
    bk = !bk;
    Thought lo1 = Thought38.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo2 = Thought89.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint2559>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2560>
    bk = bk || bk;
    boolean lb0 = true;
    boolean lb1 = true;
    dk = dk + dk;
    ok = ok.m4();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 931.210881644572;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought56.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(dk, dk, dk, dk);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        double ld4 = 806.2004944493142;
        boolean lb5 = false;
        bk = ok.m2(bk, bk, bk, bk);
        on += dk;
        dk = dk - dk;
        ok.m3();
</cutPoint2560>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2561>
    dk = dk + dk;
    bk = bk || bk;
    bk = !bk;
    Thought lo0 = Thought30.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 498.68166866031555;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2561>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2562>
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    boolean lb1 = true;
    ok = ok.m4();
    on -= dk;
    bk = bk && bk;
    boolean lb2 = true;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld3 = 176.72161621371703;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
        dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 728.3115654357376;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2562>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2563>
    bk = !bk;
    dk = dk - dk;
    on -= dk;
    ok = ok.m4();
    Thought lo0 = Thought11.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    double ld1 = 123.66217993952256;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        bk = bk && bk;
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld3 = 567.4352240049391;
        boolean lb4 = true;
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo5 = Thought84.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        boolean lb6 = true;
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk > dk;
        boolean lb7 = true;
        bk = bk || bk;
</cutPoint2563>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2564>
    ok = ok.m4();
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok);
    Thought lo0 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    bk = bk && bk;
    bk = dk < dk;
    bk = bk || bk;
    double ld2 = 176.1608111434521;
    bk = bk || bk;
</cutPoint2564>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2565>
    double ld0 = 620.1618702937524;
    Thought lo1 = Thought27.getInstance(dk, dk, dk, dk);
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    boolean lb2 = true;
    boolean lb3 = true;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought67.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        Thought lo5 = Thought84.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb6 = true;
        bk = bk || bk;
        Thought lo7 = Thought1.getInstance(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2565>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2566>
    Thought lo0 = Thought22.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 141.96593125851743;
    dk *= -1;
    dk = dk - dk;
    double ld2 = 876.146729448776;
    on -= dk;
    dk = dk + dk;
    on += dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    double ld3 = 582.7602725438402;
    on += dk;
</cutPoint2566>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2567>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on -= dk;
    double ld0 = 975.0645886555313;
    boolean lb1 = false;
    on -= dk;
    double ld2 = 416.65009559803036;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
</cutPoint2567>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2568>
    double ld0 = 996.7246092454634;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    Thought lo2 = Thought23.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = dk < dk;
    boolean lb3 = false;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo4 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2568>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2569>
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4();
    double ld0 = 391.7605226356738;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought31.getInstance(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb2 = true;
        dk *= -1;
        double ld3 = 184.20213141134346;
        Thought lo4 = Thought92.getInstance(bk, bk, bk, bk);
</cutPoint2569>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2570>
    boolean lb0 = true;
    double ld1 = 108.57011755452896;
    ok = ok.m4();
    dk *= -1;
    dk = dk + dk;
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    double ld3 = 859.0331948870784;
    dk = dk + dk;
    boolean lb4 = true;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 848.8108788009437;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb6 = false;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    </cutPoint2570>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2571>
    bk = !bk;
    bk = !bk;
    dk = dk + dk;
    on += dk;
    bk = bk || bk;
    bk = bk && bk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    if (bk) {
        bk = !bk;
        bk = bk && bk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk > dk;
        dk *= -1;
        ok = ok.m4();
        Thought lo0 = Thought82.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        } else if (bk) {
</cutPoint2571>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2572>
    bk = dk < dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        on += dk;
        ok.m2(ok, ok, ok, ok);
        bk = bk || bk;
        double ld0 = 131.61348597433116;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk < dk;
        bk = !bk;
        bk = dk < dk;
        ok.m1(dk, dk, dk, dk);
        double ld1 = 159.02180196176238;
        on -= dk;
        dk = dk + dk;
        bk = dk < dk;
        bk = dk > dk;
        dk = dk + dk;
        if (bk) {
</cutPoint2572>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2573>
    on -= dk;
    on += dk;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 720.3013198979671;
    if (bk) {
        boolean lb2 = true;
        bk = dk > dk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = dk < dk;
        bk = !bk;
        ok.m3();
        dk *= -1;
        bk = dk > dk;
</cutPoint2573>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2574>
    Thought lo0 = Thought77.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought94.getInstance(ok, ok, ok, ok);
    dk *= -1;
    Thought lo2 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    on += dk;
    on += dk;
    bk = bk || bk;
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo3 = Thought92.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    bk = dk < dk;
    bk = dk > dk;
    bk = bk || bk;
    bk = ok.m2();
    boolean lb4 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    bk = !bk;
    on -= dk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok);
</cutPoint2574>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2575>
    Thought lo0 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
        boolean lb2 = false;
    bk = dk > dk;
    bk = dk > dk;
    bk = !bk;
    bk = bk && bk;
    Thought lo3 = Thought70.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    double ld4 = 801.3897630375102;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld5 = 72.78286145923627;
    ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4();
    dk = dk + dk;
    boolean lb6 = true;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2575>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2576>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
        dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    double ld0 = 582.4994643990188;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    if (bk) {
        dk *= -1;
</cutPoint2576>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2577>
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    bk = dk < dk;
    boolean lb0 = true;
    bk = !bk;
    dk = dk - dk;
    bk = !bk;
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok);
    boolean lb2 = false;
    dk = dk - dk;
    dk *= -1;
    bk = dk > dk;
    bk = bk || bk;
</cutPoint2577>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2578>
    dk *= -1;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb0 = true;
        bk = bk && bk;
        bk = ok.m2(dk, dk, dk, dk);
        bk = dk < dk;
        bk = bk || bk;
        for(int j=0; j<10; j++){
            on -= dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = ok.m2(bk, bk, bk, bk);
            ok = ok.m4();
            dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk > dk;
            ok = ok.m4(ok, ok, ok, ok);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            Thought lo1 = Thought94.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = ok.m2(dk, dk, dk, dk);
            bk = dk > dk;
</cutPoint2578>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2579>
    dk = dk - dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    bk = !bk;
    bk = ok.m2();
    boolean lb0 = true;
</cutPoint2579>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2580>
    dk = dk - dk;
    boolean lb0 = false;
    dk = dk - dk;
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 115.92716144005497;
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    Thought lo2 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb3 = true;
    bk = bk || bk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    ok.m3();
        dk = dk + dk;
    dk = dk + dk;
    Thought lo4 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
</cutPoint2580>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2581>
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought37.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    boolean lb1 = false;
    double ld2 = 539.9237108324704;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought8.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = bk || bk;
        bk = dk > dk;
        ok.m3(dk, dk, dk, dk);
        dk = dk - dk;
        bk = bk && bk;
        bk = !bk;
</cutPoint2581>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2582>
    if (bk) {
        double ld0 = 210.99753793502043;
        boolean lb1 = true;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb2 = true;
        dk = ok.m3(bk, bk, bk, bk);
        } else if (bk) {
        bk = ok.m2();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        } else {
        boolean lb3 = false;
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        dk = ok.m3(dk, dk, dk, dk);
</cutPoint2582>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2583>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    on -= dk;
    Thought lo0 = Thought95.getInstance(bk, bk, bk, bk);
    dk *= -1;
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
    boolean lb1 = true;
    Thought lo2 = Thought96.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
</cutPoint2583>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2584>
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 497.5113693866287;
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    on -= dk;
    bk = dk < dk;
    boolean lb1 = true;
    Thought lo2 = Thought69.getInstance(bk, bk, bk, bk);
    ok.m3();
    bk = bk && bk;
    bk = dk > dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought4.getInstance(ok, ok, ok, ok);
        bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    </cutPoint2584>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2585>
    dk = dk + dk;
    dk = dk - dk;
    Thought lo0 = Thought25.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 46.44833379994581;
    bk = bk && bk;
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb2 = false;
    dk = ok.m3();
    Thought lo3 = Thought26.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    Thought lo4 = Thought79.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    double ld6 = 657.5294104075068;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb7 = true;
    double ld8 = 632.3883258623562;
</cutPoint2585>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2586>
    dk *= -1;
    dk *= -1;
    bk = bk || bk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    boolean lb0 = true;
    double ld1 = 744.6715817391269;
    bk = dk < dk;
    boolean lb2 = true;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
</cutPoint2586>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2587>
    dk = dk + dk;
    bk = dk > dk;
    bk = dk < dk;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    on -= dk;
    dk *= -1;
    on += dk;
    boolean lb1 = false;
</cutPoint2587>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2588>
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = false;
    double ld1 = 311.11907551412594;
    double ld2 = 211.50451069755164;
    dk = dk - dk;
    ok.m2();
    dk = dk - dk;
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint2588>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2589>
    on += dk;
    bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    on -= dk;
    boolean lb0 = false;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 545.1947795846902;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = bk || bk;
    bk = dk < dk;
    Thought lo2 = Thought16.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2589>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought74 extends Thought{
private static ArrayList<Thought74> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 621.7178683188455;
private double fd1 = 773.434300903666;
private Thought fo0 = null;
private Thought fo1 = null;
Thought74 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought74 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought74 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought74 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought74 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought74 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought74 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought74 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought74 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought74 instance = new Thought74 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought74 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought74 instance = new Thought74 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought74 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought74 instance = new Thought74 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought74 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought74 instance = new Thought74 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought74 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought74 instance = new Thought74 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought74 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought74 instance = new Thought74 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought74 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought74 instance = new Thought74 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought74 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought74 instance = new Thought74 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2590>
    dk = dk - dk;
    bk = bk && bk;
    bk = dk > dk;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk > dk;
    ok = ok.m4();
    Thought lo1 = Thought22.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    boolean lb2 = false;
    boolean lb3 = true;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo4 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo5 = Thought43.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo6 = Thought13.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    Thought lo7 = Thought57.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
</cutPoint2590>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2591>
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 702.7929190650897;
    ok.m1(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    bk = dk < dk;
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2591>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2592>
    double ld0 = 97.53092061254696;
    dk = dk - dk;
    Thought lo1 = Thought52.getInstance(bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    Thought lo2 = Thought69.getInstance(ok, ok, ok, ok);
    on -= dk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2592>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2593>
    dk = dk + dk;
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        dk *= -1;
        }
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
        Thought lo1 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb2 = false;
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    double ld3 = 780.1849024492044;
    ok.m2();
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        dk *= -1;
        on += dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2593>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2594>
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    boolean lb1 = true;
    ok.m1(bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
        ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    boolean lb3 = false;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    dk *= -1;
</cutPoint2594>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2595>
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    boolean lb0 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    Thought lo1 = Thought5.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo2 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought53.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb4 = false;
    dk *= -1;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb5 = false;
    bk = bk && bk;
</cutPoint2595>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2596>
    boolean lb0 = false;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought82.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = bk && bk;
    bk = dk < dk;
    Thought lo2 = Thought23.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo3 = Thought89.getInstance(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb4 = false;
</cutPoint2596>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2597>
    ok.m2();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    double ld0 = 989.2364909520809;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 854.1279775123696;
    Thought lo2 = Thought58.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    boolean lb3 = true;
    bk = bk || bk;
    bk = bk || bk;
    on -= dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    dk = dk + dk;
</cutPoint2597>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2598>
    double ld0 = 965.8416512324131;
    bk = !bk;
        on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 68.62558111233096;
    boolean lb2 = true;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo3 = Thought62.getInstance();
    for(int j=0; j<10; j++){
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
</cutPoint2598>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2599>
    on += dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = !bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = dk > dk;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    boolean lb2 = false;
    dk = dk - dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        dk *= -1;
        double ld3 = 166.22908969970322;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        bk = !bk;
        bk = bk && bk;
        ok.m1(bk, bk, bk, bk);
        dk *= -1;
        ok = ok.m4();
        bk = dk < dk;
        dk *= -1;
</cutPoint2599>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2600>
    dk = dk - dk;
    double ld0 = 129.1618732720184;
    on -= dk;
    bk = bk || bk;
    double ld1 = 265.14736782203323;
    bk = bk && bk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    Thought lo2 = Thought97.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
        on += dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3();
    bk = dk > dk;
</cutPoint2600>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2601>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    dk = dk + dk;
    on += dk;
    on -= dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk < dk;
    boolean lb1 = false;
    dk = dk + dk;
    dk = dk - dk;
    bk = !bk;
</cutPoint2601>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2602>
    dk = dk + dk;
    dk = dk - dk;
        bk = dk < dk;
    double ld0 = 355.41260311500525;
    bk = dk < dk;
    dk = dk + dk;
    Thought lo1 = Thought18.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    bk = bk && bk;
</cutPoint2602>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2603>
    Thought lo0 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
    bk = dk < dk;
    double ld1 = 335.01701535176414;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    dk = dk - dk;
    on += dk;
        bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2603>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2604>
    double ld0 = 667.9369733011779;
    if (bk) {
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo1 = Thought81.getInstance(dk, dk, dk, dk);
        dk = dk + dk;
        dk = dk - dk;
        bk = dk < dk;
        on += dk;
        dk = dk + dk;
        boolean lb2 = true;
        bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        ok.m1(bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint2604>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2605>
    double ld0 = 445.41064965162144;
    boolean lb1 = true;
    dk = dk + dk;
    dk = ok.m3();
    boolean lb2 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo3 = Thought31.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought86.getInstance(dk, dk, dk, dk);
    boolean lb5 = true;
        bk = bk || bk;
    bk = dk > dk;
        boolean lb6 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint2605>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2606>
    Thought lo0 = Thought80.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld1 = 916.9683631025542;
    bk = dk < dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo2 = Thought52.getInstance();
    dk = dk + dk;
    Thought lo3 = Thought28.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
    bk = dk < dk;
    Thought lo4 = Thought9.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought52.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2606>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2607>
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    double ld0 = 259.38129805025596;
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb2 = false;
    bk = !bk;
    boolean lb3 = true;
    dk *= -1;
    dk = dk - dk;
    bk = ok.m2();
    if (bk) {
        double ld4 = 285.30210681133696;
        bk = bk && bk;
        boolean lb5 = false;
</cutPoint2607>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2608>
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo0 = Thought29.getInstance(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint2608>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2609>
        dk *= -1;
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb0 = true;
    ok.m1();
    boolean lb1 = false;
    boolean lb2 = false;
        double ld3 = 98.65363400492102;
    double ld4 = 16.63529070650301;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2609>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2610>
    dk = dk - dk;
    bk = !bk;
    bk = !bk;
    on += dk;
    dk *= -1;
    dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk && bk;
    bk = bk && bk;
    bk = bk || bk;
    Thought lo0 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2610>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2611>
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 969.3791010066682;
    bk = !bk;
    bk = bk || bk;
    double ld1 = 576.6037946979202;
    Thought lo2 = Thought70.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought16.getInstance(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought49.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3();
    boolean lb5 = false;
</cutPoint2611>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2612>
    Thought lo0 = Thought70.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    boolean lb3 = false;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        boolean lb4 = false;
        double ld5 = 903.8377443531582;
        Thought lo6 = Thought67.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint2612>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2613>
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
        bk = dk < dk;
    dk = dk - dk;
        ok = ok.m4();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    dk = dk + dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    boolean lb1 = true;
    dk = dk - dk;
</cutPoint2613>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2614>
    double ld0 = 9.819945865039976;
    bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 19.457430886291935;
    ok = ok.m4();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok);
    boolean lb2 = false;
    Thought lo3 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = true;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3();
    boolean lb5 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb6 = false;
    Thought lo7 = Thought29.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk - dk;
</cutPoint2614>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2615>
    bk = dk < dk;
    boolean lb0 = true;
    on += dk;
    bk = bk || bk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    double ld1 = 686.2460867572161;
    bk = !bk;
    dk = dk + dk;
    Thought lo2 = Thought9.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint2615>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2616>
    bk = bk && bk;
    bk = ok.m2();
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = true;
        dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk && bk;
    on += dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2616>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2617>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk);
    Thought lo1 = Thought65.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 544.4481830076301;
    ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    bk = !bk;
    dk = ok.m3();
    bk = dk < dk;
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
</cutPoint2617>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2618>
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    ok = ok.m4();
    double ld1 = 117.94393530827584;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2618>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2619>
    double ld0 = 633.5573202787863;
    boolean lb1 = true;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk - dk;
    dk = dk - dk;
    boolean lb2 = false;
</cutPoint2619>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2620>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    ok.m2();
    double ld1 = 460.60198839343883;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    for(int j=0; j<10; j++){
        boolean lb3 = false;
        boolean lb4 = true;
</cutPoint2620>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2621>
    Thought lo0 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought54.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld2 = 358.9329416505979;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    if (bk) {
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        ok.m2(bk, bk, bk, bk);
        double ld3 = 185.72204732361266;
        dk = dk - dk;
        ok = ok.m4();
        bk = bk || bk;
        boolean lb4 = true;
</cutPoint2621>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2622>
    double ld0 = 690.9844712870183;
    bk = dk < dk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    double ld1 = 23.412089612841946;
    bk = bk && bk;
    boolean lb2 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2622>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2623>
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    bk = !bk;
    ok.m2();
    dk *= -1;
    bk = dk > dk;
    bk = dk < dk;
    dk = dk - dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2623>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2624>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
</cutPoint2624>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought75 extends Thought{
private static ArrayList<Thought75> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 308.7467929944769;
private double fd1 = 271.8722532076646;
private Thought fo0 = null;
private Thought fo1 = null;
Thought75 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought75 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought75 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought75 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought75 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought75 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought75 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought75 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought75 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought75 instance = new Thought75 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought75 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought75 instance = new Thought75 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought75 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought75 instance = new Thought75 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought75 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought75 instance = new Thought75 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought75 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought75 instance = new Thought75 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought75 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought75 instance = new Thought75 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought75 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought75 instance = new Thought75 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought75 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought75 instance = new Thought75 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2625>
    boolean lb0 = true;
    Thought lo1 = Thought51.getInstance();
        bk = bk || bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    boolean lb2 = true;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought31.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    Thought lo4 = Thought58.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2625>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2626>
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo0 = Thought39.getInstance(ok, ok, ok, ok);
    bk = !bk;
    dk = dk + dk;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    boolean lb1 = false;
    double ld2 = 652.251907380289;
    boolean lb3 = true;
</cutPoint2626>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2627>
    on -= dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    boolean lb0 = false;
    if (bk) {
        bk = !bk;
        Thought lo1 = Thought14.getInstance(bk, bk, bk, bk);
        ok.m1();
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        } else if (bk) {
</cutPoint2627>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2628>
    boolean lb0 = true;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld2 = 458.9246335203828;
</cutPoint2628>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2629>
    Thought lo0 = Thought2.getInstance(bk, bk, bk, bk);
    ok.m3();
    bk = bk || bk;
    on -= dk;
    bk = bk || bk;
    double ld1 = 960.4093440302167;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint2629>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2630>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    if (bk) {
        bk = bk || bk;
        Thought lo0 = Thought90.getInstance(dk, dk, dk, dk);
        } else {
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        boolean lb1 = false;
        double ld2 = 207.80836495020472;
</cutPoint2630>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2631>
    boolean lb0 = false;
    if (bk) {
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
        bk = bk && bk;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        } else {
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk > dk;
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
                ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        bk = !bk;
</cutPoint2631>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2632>
    dk = dk + dk;
    boolean lb0 = false;
    boolean lb1 = false;
    bk = dk < dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo2 = Thought31.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2();
    dk *= -1;
    double ld3 = 39.527639989014865;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo4 = Thought12.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb5 = true;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    if (bk) {
</cutPoint2632>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2633>
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2();
        Thought lo0 = Thought96.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = dk < dk;
    bk = !bk;
    boolean lb2 = false;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    if (bk) {
        dk = dk + dk;
        boolean lb3 = false;
        dk = dk - dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        on -= dk;
        double ld4 = 85.73723492015003;
        dk = ok.m3(dk, dk, dk, dk);
        if (bk) {
            dk = dk - dk;
</cutPoint2633>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2634>
    boolean lb0 = true;
    dk *= -1;
    Thought lo1 = Thought7.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo2 = Thought78.getInstance(bk, bk, bk, bk);
    boolean lb3 = true;
    dk = ok.m3();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought93.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    double ld5 = 476.22222030556435;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2634>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2635>
    double ld0 = 903.378355840817;
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    for(int j=0; j<10; j++){
        on += dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        dk = dk + dk;
        dk *= -1;
        dk = dk - dk;
        boolean lb2 = false;
        bk = dk > dk;
        Thought lo3 = Thought4.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        dk = dk - dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        dk = ok.m3(dk, dk, dk, dk);
        }
    double ld4 = 586.7042518597923;
</cutPoint2635>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2636>
    dk = dk + dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo0 = Thought90.getInstance(bk, bk, bk, bk);
        double ld1 = 485.3179808935624;
        bk = !bk;
        bk = bk && bk;
        dk = dk - dk;
        boolean lb2 = true;
        bk = bk || bk;
</cutPoint2636>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2637>
    boolean lb0 = true;
    dk = dk - dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        }
    ok = ok.m4();
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo1 = Thought3.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld2 = 140.43940512878072;
</cutPoint2637>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2638>
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    on += dk;
    bk = !bk;
    Thought lo0 = Thought90.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk - dk;
    boolean lb2 = true;
</cutPoint2638>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2639>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb0 = true;
    double ld1 = 556.6735000443514;
    bk = bk || bk;
    double ld2 = 99.255312642148;
    dk = dk + dk;
    bk = bk && bk;
    dk = ok.m3();
</cutPoint2639>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2640>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    Thought lo1 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk *= -1;
    boolean lb2 = false;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    boolean lb3 = false;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = dk < dk;
        bk = bk && bk;
        boolean lb4 = true;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint2640>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2641>
    boolean lb0 = true;
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    double ld2 = 324.888635868575;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    dk *= -1;
    boolean lb4 = false;
    bk = !bk;
    double ld5 = 897.8972386707081;
    Thought lo6 = Thought15.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    Thought lo7 = Thought68.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint2641>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2642>
    Thought lo0 = Thought46.getInstance();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 647.5380875527155;
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo2 = Thought45.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld3 = 171.251739713284;
</cutPoint2642>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2643>
    boolean lb0 = false;
    ok.m2();
    if (bk) {
        Thought lo1 = Thought59.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        Thought lo2 = Thought8.getInstance(ok, ok, ok, ok);
        bk = bk || bk;
        double ld3 = 706.3671980544435;
        dk = dk + dk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo4 = Thought88.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        ok.m2(dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        } else if (bk) {
        bk = !bk;
        bk = ok.m2(bk, bk, bk, bk);
        ok.m3();
        bk = bk && bk;
</cutPoint2643>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2644>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
</cutPoint2644>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2645>
    on += dk;
    bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo0 = Thought62.getInstance(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = dk < dk;
        Thought lo1 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb2 = false;
        dk = ok.m3(bk, bk, bk, bk);
        bk = bk && bk;
        bk = !bk;
        Thought lo3 = Thought59.getInstance();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint2645>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2646>
    boolean lb0 = true;
    on += dk;
    dk *= -1;
    bk = bk && bk;
    dk *= -1;
    boolean lb1 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        bk = dk < dk;
        bk = dk < dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        dk = dk - dk;
        dk = dk + dk;
        boolean lb2 = false;
        ok.m3(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo3 = Thought69.getInstance(bk, bk, bk, bk);
        dk *= -1;
        dk = dk - dk;
        bk = dk < dk;
        bk = !bk;
        ok = ok.m4();
        Thought lo4 = Thought61.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld5 = 921.1495049823211;
        bk = bk && bk;
</cutPoint2646>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2647>
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = !bk;
    Thought lo0 = Thought88.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    Thought lo1 = Thought62.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = bk && bk;
    ok.m1(bk, bk, bk, bk);
    Thought lo2 = Thought15.getInstance();
    double ld3 = 9.874317065937683;
    for(int j=0; j<10; j++){
        }
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought41.getInstance(ok, ok, ok, ok);
    on += dk;
</cutPoint2647>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2648>
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought72.getInstance(dk, dk, dk, dk);
    double ld1 = 113.6876239444511;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
        Thought lo2 = Thought93.getInstance(bk, bk, bk, bk);
    dk *= -1;
    double ld3 = 681.1955876271668;
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo4 = Thought75.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought45.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2648>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2649>
    double ld0 = 10.289736316492574;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo1 = Thought2.getInstance();
    boolean lb2 = false;
    Thought lo3 = Thought52.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb4 = true;
    bk = bk || bk;
    Thought lo5 = Thought63.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    Thought lo6 = Thought30.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
        dk = dk + dk;
    bk = dk > dk;
    Thought lo7 = Thought65.getInstance(bk, bk, bk, bk);
    bk = ok.m2();
    Thought lo8 = Thought38.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld9 = 810.5039693987184;
    bk = dk < dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint2649>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2650>
    boolean lb0 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    boolean lb2 = true;
    dk = dk + dk;
    boolean lb3 = true;
    dk = dk - dk;
    ok = ok.m4();
    boolean lb4 = false;
    dk = dk - dk;
    on += dk;
    bk = bk && bk;
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    Thought lo5 = Thought43.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    dk = dk + dk;
</cutPoint2650>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2651>
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
    Thought lo0 = Thought72.getInstance(dk, dk, dk, dk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
        bk = dk < dk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought0.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint2651>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2652>
    bk = bk || bk;
    bk = dk < dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    bk = !bk;
    on -= dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    double ld0 = 974.2035151240119;
    bk = !bk;
    dk = ok.m3();
    if (bk) {
        bk = dk < dk;
        } else if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        ok.m3(ok, ok, ok, ok);
        bk = bk || bk;
        boolean lb1 = false;
        boolean lb2 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        on += dk;
</cutPoint2652>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2653>
    bk = dk < dk;
    bk = dk < dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo1 = Thought63.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint2653>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2654>
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
    dk = dk + dk;
    bk = !bk;
    bk = !bk;
    bk = bk || bk;
</cutPoint2654>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2655>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    if (bk) {
        bk = ok.m2();
        dk = dk - dk;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo0 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = false;
        bk = !bk;
        boolean lb2 = true;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        dk = ok.m3(dk, dk, dk, dk);
</cutPoint2655>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2656>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
    bk = bk || bk;
    dk = dk - dk;
    double ld0 = 399.00500501107706;
</cutPoint2656>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2657>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on += dk;
    on += dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought74.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought40.getInstance();
    boolean lb2 = true;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo3 = Thought50.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
</cutPoint2657>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2658>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
        bk = dk < dk;
    on += dk;
    dk *= -1;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    bk = bk && bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    dk = dk - dk;
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    double ld1 = 40.90913847914973;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2658>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2659>
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought16.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought37.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
    on += dk;
    dk = dk - dk;
    double ld2 = 462.4799127051161;
    bk = !bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
</cutPoint2659>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought76 extends Thought{
private static ArrayList<Thought76> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 175.155961592294;
private double fd1 = 225.85535121288567;
private Thought fo0 = null;
private Thought fo1 = null;
Thought76 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought76 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought76 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought76 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought76 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought76 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought76 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought76 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought76 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought76 instance = new Thought76 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought76 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought76 instance = new Thought76 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought76 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought76 instance = new Thought76 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought76 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought76 instance = new Thought76 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought76 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought76 instance = new Thought76 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought76 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought76 instance = new Thought76 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought76 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought76 instance = new Thought76 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought76 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought76 instance = new Thought76 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2660>
    bk = bk && bk;
    bk = dk > dk;
    ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    ok.m1();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    dk = dk + dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2660>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2661>
    bk = bk && bk;
    dk *= -1;
    double ld0 = 696.0254104343717;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    boolean lb1 = true;
    dk = dk + dk;
    dk = dk + dk;
        double ld2 = 867.7789536243334;
    boolean lb3 = false;
    boolean lb4 = false;
    dk = dk + dk;
    bk = !bk;
    boolean lb5 = false;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
</cutPoint2661>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2662>
    bk = !bk;
    boolean lb0 = false;
    Thought lo1 = Thought40.getInstance(bk, bk, bk, bk);
    bk = ok.m2();
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(dk, dk, dk, dk);
        dk = dk - dk;
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        bk = dk < dk;
        bk = dk < dk;
        dk = dk + dk;
        dk *= -1;
        Thought lo2 = Thought16.getInstance(bk, bk, bk, bk);
        boolean lb3 = false;
        ok = ok.m4();
        bk = bk && bk;
        on += dk;
        bk = dk > dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        ok.m3(ok, ok, ok, ok);
</cutPoint2662>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2663>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    double ld0 = 916.1635735215646;
    double ld1 = 966.201640397657;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    bk = !bk;
    dk = dk - dk;
    dk = dk - dk;
</cutPoint2663>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2664>
    Thought lo0 = Thought96.getInstance();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 985.0324464486076;
    boolean lb2 = true;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4();
    bk = dk > dk;
</cutPoint2664>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2665>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = true;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought57.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    on += dk;
    bk = dk > dk;
        on += dk;
</cutPoint2665>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2666>
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought19.getInstance(dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    double ld2 = 321.6525393748235;
    bk = bk && bk;
    bk = bk && bk;
    dk *= -1;
    dk *= -1;
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
        ok = ok.m4();
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    bk = bk && bk;
        bk = !bk;
</cutPoint2666>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2667>
    on += dk;
    dk *= -1;
    bk = bk && bk;
    dk = dk + dk;
        bk = dk < dk;
    boolean lb0 = true;
    Thought lo1 = Thought54.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
</cutPoint2667>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2668>
    Thought lo0 = Thought20.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    on += dk;
    double ld1 = 19.15078032947444;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
    bk = !bk;
    bk = dk < dk;
    boolean lb2 = false;
    dk = dk + dk;
    dk = dk + dk;
    dk = dk - dk;
    on -= dk;
    bk = dk > dk;
    bk = dk < dk;
    double ld3 = 481.26920698195465;
    ok = ok.m4();
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought70.getInstance(ok, ok, ok, ok);
</cutPoint2668>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2669>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    bk = bk && bk;
    ok.m3(bk, bk, bk, bk);
    boolean lb1 = false;
    bk = bk && bk;
    bk = ok.m2();
    bk = !bk;
    bk = bk || bk;
    bk = bk || bk;
    Thought lo2 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    dk *= -1;
</cutPoint2669>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2670>
    dk = dk - dk;
        if (bk) {
        on -= dk;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb0 = false;
        Thought lo1 = Thought58.getInstance(dk, dk, dk, dk);
        dk *= -1;
        boolean lb2 = false;
        double ld3 = 810.8494287644309;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld4 = 652.7906037497683;
        Thought lo5 = Thought45.getInstance(bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint2670>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2671>
    boolean lb0 = true;
    dk = dk - dk;
    bk = bk && bk;
    dk *= -1;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    on += dk;
    bk = dk < dk;
    bk = bk && bk;
    dk = dk - dk;
    boolean lb2 = true;
    Thought lo3 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo4 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = true;
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint2671>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2672>
    if (bk) {
        dk *= -1;
        Thought lo0 = Thought62.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld1 = 379.9677306992737;
        bk = dk > dk;
        dk = dk - dk;
        bk = bk || bk;
        double ld2 = 912.4180379830547;
        ok.m1(bk, bk, bk, bk);
        boolean lb3 = false;
        double ld4 = 502.42384120705987;
        Thought lo5 = Thought78.getInstance();
</cutPoint2672>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2673>
    bk = dk > dk;
    double ld0 = 399.45273073505274;
    on += dk;
    double ld1 = 909.2989170165641;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    dk *= -1;
    boolean lb3 = false;
    dk *= -1;
    bk = dk > dk;
    bk = !bk;
    boolean lb4 = true;
    boolean lb5 = false;
    dk = dk + dk;
    Thought lo6 = Thought0.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo7 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb8 = false;
    Thought lo9 = Thought59.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb10 = true;
    bk = dk < dk;
    Thought lo11 = Thought72.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    bk = bk && bk;
</cutPoint2673>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2674>
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    ok.m2();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb0 = false;
    Thought lo1 = Thought59.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    dk *= -1;
    bk = bk && bk;
    boolean lb2 = true;
    bk = dk < dk;
    double ld3 = 247.74131970660983;
    dk *= -1;
    bk = bk || bk;
</cutPoint2674>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2675>
    boolean lb0 = true;
    boolean lb1 = false;
    bk = dk < dk;
    boolean lb2 = false;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 369.3755245326266;
    Thought lo4 = Thought57.getInstance(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb5 = false;
</cutPoint2675>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2676>
    bk = dk < dk;
    ok.m1();
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld0 = 816.4503401936436;
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 976.9495325320668;
    bk = dk > dk;
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
        dk *= -1;
    dk = dk - dk;
</cutPoint2676>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2677>
    dk *= -1;
    bk = dk > dk;
    on += dk;
    bk = ok.m2();
    bk = !bk;
    dk = dk + dk;
    on += dk;
    bk = bk && bk;
    double ld0 = 950.8895419987547;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb1 = true;
    double ld2 = 598.42599021424;
    bk = dk > dk;
    dk *= -1;
    on += dk;
    bk = bk || bk;
    bk = bk && bk;
    on -= dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
</cutPoint2677>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2678>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 523.4136205997665;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
    on += dk;
    Thought lo1 = Thought50.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk + dk;
    bk = !bk;
    ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint2678>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2679>
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    Thought lo1 = Thought53.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    for(int j=0; j<10; j++){
        ok = ok.m4();
        if (bk) {
            bk = bk && bk;
            boolean lb2 = false;
            dk *= -1;
            Thought lo3 = Thought31.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
            dk *= -1;
            boolean lb4 = false;
            ok = ok.m4(ok, ok, ok, ok);
            dk *= -1;
            boolean lb5 = false;
            } else {
</cutPoint2679>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2680>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought85.getInstance(bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
    bk = dk > dk;
    bk = !bk;
    bk = bk && bk;
    dk = ok.m3();
    double ld1 = 419.4243999872155;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    double ld2 = 937.8275385162965;
    dk = dk - dk;
    bk = bk && bk;
    boolean lb3 = true;
    bk = bk || bk;
    bk = !bk;
</cutPoint2680>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2681>
    bk = !bk;
    Thought lo0 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 814.5398697381542;
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        bk = dk < dk;
        dk = dk - dk;
        ok = ok.m4();
        Thought lo2 = Thought61.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok);
        dk *= -1;
        dk *= -1;
        boolean lb3 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld4 = 402.9221624889312;
        dk *= -1;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        double ld5 = 10.199406480877606;
        dk = dk + dk;
</cutPoint2681>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2682>
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    boolean lb0 = true;
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok);
    boolean lb1 = true;
    bk = dk > dk;
    bk = bk || bk;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = bk || bk;
</cutPoint2682>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2683>
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo0 = Thought62.getInstance();
    dk *= -1;
    Thought lo1 = Thought93.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    bk = dk > dk;
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    dk *= -1;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo2 = Thought65.getInstance();
    bk = dk > dk;
    bk = !bk;
</cutPoint2683>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2684>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
        bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought39.getInstance(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = bk && bk;
        bk = bk && bk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    boolean lb1 = false;
    dk = dk - dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought56.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2684>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2685>
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    boolean lb0 = true;
    boolean lb1 = false;
    bk = dk > dk;
    boolean lb2 = true;
    dk *= -1;
    Thought lo3 = Thought99.getInstance(bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    bk = bk || bk;
    dk = ok.m3();
    bk = !bk;
    dk = dk - dk;
    double ld4 = 587.1117647270958;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    bk = dk < dk;
    bk = dk > dk;
</cutPoint2685>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2686>
    double ld0 = 690.8150594931632;
    double ld1 = 860.7516021622143;
    bk = !bk;
    Thought lo2 = Thought37.getInstance(dk, dk, dk, dk);
    boolean lb3 = false;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    on -= dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
</cutPoint2686>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2687>
    ok = ok.m4();
    double ld0 = 782.9060049093531;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
    bk = dk < dk;
    boolean lb1 = false;
    bk = dk > dk;
    on -= dk;
    ok.m3(ok, ok, ok, ok);
    dk *= -1;
</cutPoint2687>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2688>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld0 = 372.15735404007;
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk > dk;
        if (bk) {
            bk = dk < dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            boolean lb1 = true;
            dk = ok.m3(bk, bk, bk, bk);
            bk = bk || bk;
            dk *= -1;
            Thought lo2 = Thought61.getInstance();
            boolean lb3 = true;
            on += dk;
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = !bk;
            bk = ok.m2(ok, ok, ok, ok);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk > dk;
</cutPoint2688>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2689>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    double ld0 = 60.90760892733199;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
</cutPoint2689>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2690>
    for(int j=0; j<10; j++){
        bk = bk && bk;
        double ld0 = 400.2618514330831;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        double ld1 = 527.6550060280205;
        ok.m3(dk, dk, dk, dk);
        boolean lb2 = false;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        ok.m2();
        dk = dk + dk;
        bk = bk && bk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought25.getInstance(ok, ok, ok, ok);
        bk = !bk;
        Thought lo4 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        }
    Thought lo5 = Thought64.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo6 = Thought74.getInstance(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk *= -1;
    for(int j=0; j<10; j++){
        dk = ok.m3();
        dk *= -1;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld7 = 638.3873995338515;
</cutPoint2690>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2691>
    on += dk;
    double ld0 = 499.30405496421344;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 508.79134732256244;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    on -= dk;
    boolean lb2 = true;
    dk = dk - dk;
</cutPoint2691>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2692>
    bk = dk < dk;
    Thought lo0 = Thought41.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo1 = Thought64.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    boolean lb2 = false;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo3 = Thought69.getInstance();
    boolean lb4 = true;
    bk = !bk;
    dk = dk - dk;
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb6 = false;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
</cutPoint2692>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2693>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    double ld0 = 464.23662669796647;
        ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought7.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    boolean lb2 = true;
    bk = !bk;
    bk = bk || bk;
    bk = bk || bk;
</cutPoint2693>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2694>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    double ld1 = 78.86799567703243;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    double ld2 = 134.8568023848338;
    boolean lb3 = false;
    bk = bk && bk;
    dk = dk + dk;
    bk = !bk;
    boolean lb4 = true;
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2694>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought77 extends Thought{
private static ArrayList<Thought77> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 506.8120179702199;
private double fd1 = 873.7966336927993;
private Thought fo0 = null;
private Thought fo1 = null;
Thought77 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought77 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought77 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought77 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought77 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought77 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought77 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought77 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought77 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought77 instance = new Thought77 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought77 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought77 instance = new Thought77 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought77 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought77 instance = new Thought77 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought77 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought77 instance = new Thought77 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought77 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought77 instance = new Thought77 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought77 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought77 instance = new Thought77 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought77 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought77 instance = new Thought77 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought77 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought77 instance = new Thought77 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2695>
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought34.getInstance();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought74.getInstance(dk, dk, dk, dk);
    on -= dk;
    dk *= -1;
    bk = bk && bk;
    boolean lb2 = true;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    bk = dk > dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    ok.m1();
    boolean lb4 = true;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint2695>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2696>
    bk = !bk;
    on += dk;
    on += dk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought47.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2696>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2697>
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    boolean lb0 = false;
    on += dk;
    double ld1 = 845.6508576169873;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    boolean lb2 = false;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 156.49864797818202;
    on += dk;
    boolean lb4 = false;
    dk = dk + dk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2697>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2698>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    dk = dk + dk;
    bk = !bk;
    boolean lb0 = false;
    ok = ok.m4();
    double ld1 = 432.2063270065686;
    on += dk;
</cutPoint2698>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2699>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
        on += dk;
    bk = dk > dk;
    bk = !bk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    double ld2 = 557.2163294071212;
</cutPoint2699>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2700>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 962.8017753424631;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    dk = dk - dk;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint2700>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2701>
    dk = dk - dk;
    double ld0 = 712.7489178799813;
    bk = dk < dk;
    bk = dk > dk;
    double ld1 = 305.30234602244735;
    bk = !bk;
    boolean lb2 = true;
    bk = bk && bk;
    dk = dk + dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
    dk *= -1;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    bk = dk > dk;
    dk = dk - dk;
    on -= dk;
</cutPoint2701>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2702>
    dk = dk + dk;
    Thought lo0 = Thought1.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    for(int j=0; j<10; j++){
        boolean lb1 = true;
        Thought lo2 = Thought37.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld3 = 687.1526744393107;
        dk *= -1;
        bk = dk > dk;
        boolean lb4 = false;
        Thought lo5 = Thought82.getInstance(dk, dk, dk, dk);
        on += dk;
        bk = bk || bk;
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m3(bk, bk, bk, bk);
</cutPoint2702>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2703>
    boolean lb0 = false;
    dk = dk - dk;
    boolean lb1 = false;
    boolean lb2 = false;
    ok = ok.m4();
    double ld3 = 695.898757871606;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo4 = Thought57.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought80.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2703>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2704>
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk && bk;
    double ld0 = 564.7065838974582;
    dk *= -1;
    bk = dk < dk;
    bk = !bk;
    boolean lb1 = true;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = !bk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    double ld2 = 451.95513038115934;
    on += dk;
    Thought lo3 = Thought77.getInstance(dk, dk, dk, dk);
    Thought lo4 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = true;
    dk = dk + dk;
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
</cutPoint2704>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2705>
    bk = ok.m2();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
        double ld0 = 720.1180329688577;
        dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk + dk;
    boolean lb1 = true;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo2 = Thought65.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2705>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2706>
    Thought lo0 = Thought85.getInstance(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    boolean lb1 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb2 = true;
    ok.m3(ok, ok, ok, ok);
    double ld3 = 972.5581091101832;
    Thought lo4 = Thought52.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb5 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint2706>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2707>
    on += dk;
    ok = ok.m4();
    dk = dk - dk;
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok);
    Thought lo0 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2707>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2708>
    double ld0 = 595.7531871489616;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought83.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    bk = !bk;
    Thought lo2 = Thought98.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
</cutPoint2708>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2709>
    double ld0 = 796.1617854678759;
    bk = dk > dk;
    boolean lb1 = false;
        bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo2 = Thought52.getInstance();
    dk *= -1;
    on += dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo3 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
</cutPoint2709>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2710>
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought54.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
    double ld1 = 637.9360871025132;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2710>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2711>
    on += dk;
    bk = dk < dk;
    bk = dk < dk;
    bk = !bk;
    on -= dk;
    for(int j=0; j<10; j++){
        }
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo0 = Thought68.getInstance();
    Thought lo1 = Thought17.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought78.getInstance(dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2711>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2712>
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        double ld0 = 168.53904440205025;
        bk = bk || bk;
        ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        double ld1 = 743.3814428557124;
</cutPoint2712>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2713>
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    boolean lb1 = true;
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
    ok.m2();
    bk = !bk;
    bk = dk < dk;
    dk *= -1;
    Thought lo2 = Thought83.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought14.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought62.getInstance(dk, dk, dk, dk);
</cutPoint2713>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2714>
    bk = dk < dk;
    double ld0 = 771.8813372006807;
        Thought lo1 = Thought47.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
    double ld2 = 135.00216836456437;
    ok = ok.m4();
    bk = !bk;
    dk = dk - dk;
</cutPoint2714>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2715>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb1 = true;
    boolean lb2 = false;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2715>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2716>
    Thought lo0 = Thought35.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk < dk;
        dk = dk - dk;
        dk = dk - dk;
        ok.m3(dk, dk, dk, dk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        Thought lo2 = Thought76.getInstance(bk, bk, bk, bk);
        dk *= -1;
        bk = !bk;
        dk = ok.m3();
        bk = bk || bk;
        if (bk) {
            dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb3 = true;
            double ld4 = 431.39185472578566;
            ok.m2(ok, ok, ok, ok);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = dk < dk;
            bk = bk || bk;
            ok.m1(dk, dk, dk, dk);
</cutPoint2716>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2717>
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    bk = bk || bk;
    bk = !bk;
    bk = dk > dk;
    if (bk) {
        dk *= -1;
        dk *= -1;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok);
        boolean lb0 = true;
        on -= dk;
</cutPoint2717>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2718>
    Thought lo0 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    Thought lo2 = Thought28.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought27.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    bk = bk || bk;
    boolean lb4 = true;
    dk *= -1;
    double ld5 = 503.61480936912636;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    boolean lb6 = false;
    dk = dk + dk;
    bk = bk && bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    double ld7 = 470.8180747817231;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
</cutPoint2718>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2719>
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo1 = Thought56.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2719>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2720>
    bk = dk > dk;
    double ld0 = 872.7349964898098;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = dk < dk;
    boolean lb2 = true;
    boolean lb3 = true;
    boolean lb4 = false;
    bk = dk < dk;
    boolean lb5 = true;
    Thought lo6 = Thought37.getInstance(dk, dk, dk, dk);
    if (bk) {
</cutPoint2720>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2721>
    dk = dk + dk;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    bk = !bk;
    Thought lo0 = Thought6.getInstance();
        dk = dk - dk;
    dk = dk + dk;
</cutPoint2721>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2722>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    double ld1 = 61.16184629751928;
    bk = ok.m2(bk, bk, bk, bk);
    double ld2 = 25.457563436407124;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb3 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2722>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2723>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    ok.m1(dk, dk, dk, dk);
    dk = dk + dk;
    double ld0 = 227.2567775928145;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 453.3206762978985;
    bk = dk > dk;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint2723>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2724>
    on += dk;
    dk = dk + dk;
    ok.m2();
    on += dk;
    if (bk) {
        bk = bk && bk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk *= -1;
        double ld0 = 749.5106392927281;
        bk = bk && bk;
        bk = bk || bk;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 145.7019616702737;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        dk = dk - dk;
        boolean lb2 = true;
        Thought lo3 = Thought56.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb4 = true;
        } else {
        Thought lo5 = Thought44.getInstance(bk, bk, bk, bk);
        dk = dk - dk;
</cutPoint2724>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2725>
    boolean lb0 = false;
    ok.m2();
    boolean lb1 = true;
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    bk = dk > dk;
    double ld3 = 82.40761817412671;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    Thought lo4 = Thought25.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2725>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2726>
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk && bk;
    dk = ok.m3();
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        on += dk;
        bk = !bk;
        dk = dk - dk;
        on += dk;
        dk = dk + dk;
        dk = dk - dk;
        bk = bk || bk;
        double ld1 = 942.8239456824472;
        boolean lb2 = true;
        Thought lo3 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
</cutPoint2726>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2727>
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = false;
    bk = !bk;
    double ld1 = 547.2937056278162;
    bk = bk || bk;
</cutPoint2727>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2728>
    bk = bk && bk;
    double ld0 = 770.1280251485141;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld1 = 15.96089814983355;
    ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
    bk = dk > dk;
    dk *= -1;
    bk = bk || bk;
    Thought lo2 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    Thought lo4 = Thought6.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld5 = 254.2241394907789;
    bk = !bk;
    bk = dk < dk;
    Thought lo6 = Thought23.getInstance(dk, dk, dk, dk);
    Thought lo7 = Thought84.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb8 = true;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2728>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2729>
    on -= dk;
    dk *= -1;
    bk = dk < dk;
    bk = dk > dk;
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    dk *= -1;
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2729>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought78 extends Thought{
private static ArrayList<Thought78> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 975.6524752421336;
private double fd1 = 827.5690581488826;
private Thought fo0 = null;
private Thought fo1 = null;
Thought78 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought78 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought78 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought78 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought78 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought78 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought78 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought78 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought78 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought78 instance = new Thought78 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought78 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought78 instance = new Thought78 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought78 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought78 instance = new Thought78 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought78 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought78 instance = new Thought78 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought78 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought78 instance = new Thought78 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought78 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought78 instance = new Thought78 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought78 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought78 instance = new Thought78 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought78 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought78 instance = new Thought78 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2730>
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 243.80230562641415;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld2 = 901.7101978995622;
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
        Thought lo3 = Thought61.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    dk = dk + dk;
</cutPoint2730>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2731>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought45.getInstance(dk, dk, dk, dk);
    bk = !bk;
    double ld1 = 861.0792638486456;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    ok.m1(bk, bk, bk, bk);
    boolean lb2 = false;
    for(int j=0; j<10; j++){
        on -= dk;
        ok.m3();
        bk = dk > dk;
        dk = dk + dk;
        bk = bk || bk;
        boolean lb3 = false;
        boolean lb4 = true;
        on += dk;
        on -= dk;
        Thought lo5 = Thought10.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        on -= dk;
        bk = bk && bk;
        bk = !bk;
        dk *= -1;
</cutPoint2731>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2732>
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
    Thought lo0 = Thought71.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld2 = 32.14534934308367;
    Thought lo3 = Thought23.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint2732>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2733>
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb0 = true;
    boolean lb1 = false;
    bk = dk > dk;
    boolean lb2 = true;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        bk = bk && bk;
        dk = dk + dk;
        boolean lb3 = false;
        dk = dk + dk;
        bk = dk < dk;
</cutPoint2733>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2734>
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    dk = dk - dk;
    on += dk;
    boolean lb0 = false;
    Thought lo1 = Thought87.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2734>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2735>
    boolean lb0 = true;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    on += dk;
    double ld1 = 606.7152525478924;
    double ld2 = 21.14688370643552;
    dk = dk + dk;
    bk = bk && bk;
    double ld3 = 573.6060206036384;
    bk = !bk;
    on -= dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo4 = Thought7.getInstance(dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    on -= dk;
    dk = dk + dk;
    bk = bk && bk;
</cutPoint2735>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2736>
    bk = ok.m2();
    dk = dk + dk;
    double ld0 = 206.45325079282242;
    dk = dk - dk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        boolean lb1 = false;
        on += dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2736>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2737>
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought59.getInstance(bk, bk, bk, bk);
    bk = ok.m2();
        boolean lb1 = false;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld2 = 964.1101536169971;
    for(int j=0; j<10; j++){
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb3 = false;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk < dk;
        bk = dk > dk;
        ok = ok.m4();
</cutPoint2737>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2738>
    bk = dk > dk;
    Thought lo0 = Thought73.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = true;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok.m1(bk, bk, bk, bk);
    bk = bk && bk;
    on -= dk;
        boolean lb2 = false;
    bk = dk > dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    double ld4 = 534.9147872278679;
    bk = dk < dk;
    bk = dk > dk;
</cutPoint2738>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2739>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb0 = true;
    dk = dk - dk;
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
    bk = dk < dk;
    dk *= -1;
    Thought lo1 = Thought19.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo2 = Thought31.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    on -= dk;
    on += dk;
    Thought lo3 = Thought33.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint2739>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2740>
    double ld0 = 527.4271861155977;
    dk *= -1;
    boolean lb1 = true;
    bk = !bk;
    on -= dk;
    on += dk;
    on += dk;
    for(int j=0; j<10; j++){
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        }
    Thought lo2 = Thought31.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought84.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought41.getInstance(dk, dk, dk, dk);
    boolean lb5 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2740>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2741>
    bk = !bk;
    dk *= -1;
    on -= dk;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4();
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    double ld1 = 105.27106299074741;
    on += dk;
    </cutPoint2741>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2742>
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = true;
    bk = dk < dk;
    dk *= -1;
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo2 = Thought13.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo3 = Thought73.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb4 = true;
    Thought lo5 = Thought52.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    boolean lb6 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint2742>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2743>
    boolean lb0 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    Thought lo1 = Thought86.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    boolean lb3 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb4 = false;
    Thought lo5 = Thought40.getInstance(dk, dk, dk, dk);
    double ld6 = 245.61489019961408;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4();
</cutPoint2743>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2744>
    Thought lo0 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk || bk;
    bk = bk && bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought16.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
    boolean lb3 = false;
    if (bk) {
        Thought lo4 = Thought69.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok.m1(bk, bk, bk, bk);
        } else if (bk) {
        ok.m3();
        dk = dk + dk;
        dk = dk - dk;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        dk = dk + dk;
        } else if (bk) {
        dk = dk - dk;
        boolean lb5 = true;
</cutPoint2744>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2745>
    boolean lb0 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    on -= dk;
    Thought lo1 = Thought24.getInstance(dk, dk, dk, dk);
    double ld2 = 900.9664481231374;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    Thought lo3 = Thought49.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb4 = true;
        dk = dk + dk;
        bk = dk > dk;
        dk *= -1;
        bk = dk < dk;
        dk = dk - dk;
        bk = ok.m2(ok, ok, ok, ok);
        Thought lo5 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(dk, dk, dk, dk);
        bk = !bk;
</cutPoint2745>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2746>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
    if (bk) {
        boolean lb0 = true;
        if (bk) {
            dk *= -1;
            bk = !bk;
            ok = ok.m4();
            Thought lo1 = Thought19.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk || bk;
            bk = !bk;
            bk = ok.m2(ok, ok, ok, ok);
            double ld2 = 943.0105069073863;
            bk = dk < dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = ok.m3(dk, dk, dk, dk);
            dk = dk - dk;
            dk = dk - dk;
            dk *= -1;
            bk = !bk;
            ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            double ld3 = 739.088268113585;
</cutPoint2746>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2747>
    bk = bk && bk;
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    on -= dk;
    on -= dk;
    ok = ok.m4();
        bk = dk > dk;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought50.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb2 = true;
    dk = dk + dk;
    bk = bk && bk;
    boolean lb3 = true;
</cutPoint2747>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2748>
    bk = bk || bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    boolean lb1 = true;
    bk = dk > dk;
    Thought lo2 = Thought51.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    bk = dk < dk;
</cutPoint2748>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2749>
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    on -= dk;
    dk = dk + dk;
    dk = dk + dk;
    double ld0 = 807.127889165734;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb2 = false;
    Thought lo3 = Thought36.getInstance(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 807.7473627295049;
    bk = !bk;
    dk = dk - dk;
        dk = dk + dk;
    Thought lo5 = Thought93.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2749>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2750>
    bk = dk > dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    double ld0 = 519.027712747902;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 28.955523349948063;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    double ld3 = 201.17701261485828;
    dk *= -1;
    Thought lo4 = Thought23.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought99.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    Thought lo6 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo7 = Thought16.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo8 = Thought87.getInstance(bk, bk, bk, bk);
</cutPoint2750>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2751>
    bk = ok.m2();
    boolean lb0 = false;
    double ld1 = 242.16506837621856;
    Thought lo2 = Thought56.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    boolean lb4 = true;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    Thought lo5 = Thought48.getInstance(dk, dk, dk, dk);
    double ld6 = 240.14695401610615;
    dk *= -1;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo7 = Thought5.getInstance(bk, bk, bk, bk);
    bk = !bk;
</cutPoint2751>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2752>
        bk = dk < dk;
    boolean lb0 = false;
    bk = bk && bk;
    boolean lb1 = false;
    ok.m2();
    bk = bk || bk;
    Thought lo2 = Thought24.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld3 = 21.935809331513322;
    double ld4 = 433.26501182884726;
    boolean lb5 = true;
    on += dk;
    on += dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb6 = true;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb7 = false;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    bk = dk > dk;
    dk *= -1;
    boolean lb8 = false;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2();
</cutPoint2752>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2753>
    bk = dk < dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    on -= dk;
        bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb0 = false;
    bk = bk && bk;
    bk = dk > dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2753>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2754>
        bk = dk > dk;
    bk = !bk;
    bk = dk < dk;
    boolean lb0 = false;
    ok.m2();
    bk = dk < dk;
    for(int j=0; j<10; j++){
        bk = !bk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        boolean lb1 = false;
        dk = dk - dk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m2(dk, dk, dk, dk);
        Thought lo2 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        Thought lo3 = Thought50.getInstance();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        }
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2754>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2755>
    boolean lb0 = true;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk *= -1;
        bk = dk < dk;
        }
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought1.getInstance(bk, bk, bk, bk);
    ok.m3();
    Thought lo2 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
</cutPoint2755>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2756>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 797.5495350871455;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    double ld1 = 347.9925125116988;
    bk = bk || bk;
    boolean lb2 = true;
    bk = dk < dk;
    double ld3 = 744.244688444835;
    on += dk;
    dk = dk + dk;
    if (bk) {
        bk = bk || bk;
        bk = dk > dk;
        bk = !bk;
        bk = !bk;
</cutPoint2756>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2757>
    dk = dk + dk;
    double ld0 = 500.11277247375403;
    Thought lo1 = Thought70.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok.m3(ok, ok, ok, ok);
    Thought lo3 = Thought55.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 22.456595996081205;
    dk = dk + dk;
    Thought lo5 = Thought68.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint2757>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2758>
    boolean lb0 = false;
    dk = dk + dk;
    Thought lo1 = Thought62.getInstance(dk, dk, dk, dk);
    double ld2 = 953.2598239450791;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    ok.m2(bk, bk, bk, bk);
    ok.m1();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo3 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 342.5991713940544;
    Thought lo5 = Thought77.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo6 = Thought19.getInstance(dk, dk, dk, dk);
    Thought lo7 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    Thought lo8 = Thought39.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2758>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2759>
    ok.m1(ok, ok, ok, ok);
    boolean lb0 = true;
    on -= dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    boolean lb1 = true;
    dk *= -1;
    dk *= -1;
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought75.getInstance(bk, bk, bk, bk);
    boolean lb4 = false;
    ok = ok.m4();
    boolean lb5 = true;
    on -= dk;
</cutPoint2759>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2760>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought3.getInstance(dk, dk, dk, dk);
    Thought lo3 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
        ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk < dk;
    boolean lb4 = false;
</cutPoint2760>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2761>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    Thought lo0 = Thought11.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought8.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought71.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    boolean lb3 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2761>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2762>
    ok = ok.m4();
    bk = bk && bk;
    dk *= -1;
    bk = bk || bk;
    bk = dk > dk;
    double ld0 = 899.5870473845165;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 351.45546186529333;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = true;
    bk = bk || bk;
    bk = !bk;
    on += dk;
    on -= dk;
    on += dk;
</cutPoint2762>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2763>
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    double ld0 = 161.9353016720358;
    boolean lb1 = false;
    bk = dk > dk;
    bk = dk < dk;
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb2 = false;
    bk = !bk;
    boolean lb3 = false;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo4 = Thought78.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk *= -1;
</cutPoint2763>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2764>
    dk = dk + dk;
    double ld0 = 992.840337439993;
    Thought lo1 = Thought39.getInstance(dk, dk, dk, dk);
    on += dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo2 = Thought5.getInstance(bk, bk, bk, bk);
    ok.m2();
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    boolean lb3 = true;
    bk = dk < dk;
    boolean lb4 = false;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint2764>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought79 extends Thought{
private static ArrayList<Thought79> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 302.3523238949395;
private double fd1 = 904.3356939582666;
private Thought fo0 = null;
private Thought fo1 = null;
Thought79 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought79 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought79 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought79 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought79 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought79 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought79 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought79 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought79 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought79 instance = new Thought79 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought79 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought79 instance = new Thought79 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought79 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought79 instance = new Thought79 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought79 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought79 instance = new Thought79 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought79 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought79 instance = new Thought79 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought79 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought79 instance = new Thought79 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought79 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought79 instance = new Thought79 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought79 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought79 instance = new Thought79 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2765>
    dk = dk + dk;
    dk = dk - dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    dk = dk + dk;
    boolean lb1 = true;
    bk = ok.m2(bk, bk, bk, bk);
    double ld2 = 858.9986408277216;
    dk = dk + dk;
    double ld3 = 108.4005130560405;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2765>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2766>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    Thought lo0 = Thought37.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    bk = bk || bk;
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint2766>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2767>
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk - dk;
    on += dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    dk = ok.m3();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
        bk = dk < dk;
    bk = bk && bk;
</cutPoint2767>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2768>
    dk = dk + dk;
    boolean lb0 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo1 = Thought83.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought50.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    if (bk) {
        Thought lo4 = Thought91.getInstance();
        dk *= -1;
        double ld5 = 494.75665264327;
        dk *= -1;
        boolean lb6 = true;
        bk = !bk;
        Thought lo7 = Thought44.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        bk = bk && bk;
</cutPoint2768>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2769>
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    Thought lo0 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    Thought lo2 = Thought29.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2769>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2770>
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought38.getInstance(dk, dk, dk, dk);
    if (bk) {
        dk *= -1;
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld1 = 184.47055287093144;
        bk = !bk;
</cutPoint2770>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2771>
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 781.3151643316058;
    Thought lo1 = Thought88.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    double ld2 = 166.18847228142468;
    boolean lb3 = true;
    bk = !bk;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        double ld4 = 718.0857597563038;
        bk = ok.m2(ok, ok, ok, ok);
        if (bk) {
            ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk - dk;
            boolean lb5 = false;
            double ld6 = 12.068791210460082;
            dk *= -1;
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            ok = ok.m4(dk, dk, dk, dk);
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            ok.m1(bk, bk, bk, bk);
            dk = dk + dk;
</cutPoint2771>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2772>
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4();
    double ld0 = 541.6558602983722;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought42.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    double ld2 = 803.1100912256419;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb3 = true;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = true;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2772>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2773>
    Thought lo0 = Thought43.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    dk *= -1;
    Thought lo1 = Thought27.getInstance();
    bk = dk < dk;
    boolean lb2 = false;
    bk = bk || bk;
    Thought lo3 = Thought58.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    for(int j=0; j<10; j++){
        ok.m1(ok, ok, ok, ok);
        boolean lb4 = false;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        bk = !bk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld5 = 560.5686071477529;
        dk = dk + dk;
        dk = dk + dk;
        bk = dk < dk;
        double ld6 = 483.1382974919161;
        for(int j=0; j<10; j++){
</cutPoint2773>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2774>
    bk = bk && bk;
    if (bk) {
        boolean lb0 = true;
        dk = dk + dk;
        } else if (bk) {
        bk = !bk;
        Thought lo1 = Thought20.getInstance(dk, dk, dk, dk);
        bk = dk > dk;
        dk *= -1;
        Thought lo2 = Thought11.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        bk = bk || bk;
        bk = !bk;
        on -= dk;
        ok.m3(bk, bk, bk, bk);
        double ld3 = 679.3624092340389;
        ok.m3();
        if (bk) {
</cutPoint2774>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2775>
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought74.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = dk < dk;
    bk = dk > dk;
    boolean lb1 = true;
    double ld2 = 678.7574023853056;
    Thought lo3 = Thought90.getInstance(bk, bk, bk, bk);
        dk *= -1;
    dk *= -1;
    ok = ok.m4();
    dk *= -1;
</cutPoint2775>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2776>
    bk = dk < dk;
    bk = dk > dk;
    on -= dk;
    on -= dk;
    bk = dk > dk;
    double ld0 = 706.9070442996895;
    boolean lb1 = true;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb2 = false;
    dk = dk - dk;
    bk = bk && bk;
</cutPoint2776>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2777>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld0 = 649.4613428309345;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    Thought lo1 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought51.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
</cutPoint2777>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2778>
    boolean lb0 = false;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok);
    boolean lb1 = false;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought60.getInstance(dk, dk, dk, dk);
    boolean lb3 = false;
    bk = bk || bk;
    dk = dk - dk;
    double ld4 = 160.20514267077883;
    dk *= -1;
    boolean lb5 = false;
    boolean lb6 = false;
    bk = bk && bk;
</cutPoint2778>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2779>
    bk = dk < dk;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        dk = dk + dk;
        on += dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk > dk;
        bk = !bk;
        bk = bk || bk;
        boolean lb0 = true;
</cutPoint2779>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2780>
    bk = bk || bk;
    ok.m1();
    bk = bk || bk;
    boolean lb0 = true;
    bk = bk || bk;
    bk = bk && bk;
    Thought lo1 = Thought13.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought15.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought58.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok.m1(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb4 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    bk = dk < dk;
    ok.m1();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    bk = !bk;
    bk = dk > dk;
    Thought lo5 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2780>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2781>
    on += dk;
    dk = dk + dk;
    double ld0 = 729.4678035476293;
    dk = dk + dk;
    bk = bk && bk;
    on += dk;
    boolean lb1 = true;
    Thought lo2 = Thought21.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    Thought lo3 = Thought14.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb4 = false;
    dk = dk + dk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on += dk;
    bk = bk || bk;
</cutPoint2781>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2782>
    dk *= -1;
    Thought lo0 = Thought92.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    double ld1 = 243.85089302250805;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    bk = dk < dk;
    dk *= -1;
    boolean lb3 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
</cutPoint2782>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2783>
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought90.getInstance(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought59.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
        ok.m3(bk, bk, bk, bk);
    on -= dk;
        boolean lb3 = true;
    bk = dk > dk;
</cutPoint2783>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2784>
    boolean lb0 = true;
    bk = bk && bk;
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = true;
    bk = dk < dk;
    Thought lo2 = Thought61.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
        dk = dk - dk;
    Thought lo4 = Thought96.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = false;
</cutPoint2784>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2785>
    double ld0 = 278.7431248196117;
    on -= dk;
    dk *= -1;
    dk = dk + dk;
    on -= dk;
    ok.m1(ok, ok, ok, ok);
    bk = dk > dk;
    boolean lb1 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    Thought lo2 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought18.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    Thought lo4 = Thought15.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 571.7562081698338;
    double ld6 = 1000.1432947612973;
    boolean lb7 = false;
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2785>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2786>
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld0 = 84.4727247760848;
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2786>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2787>
    dk *= -1;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk > dk;
    Thought lo0 = Thought0.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb1 = false;
    double ld2 = 475.7835818071092;
    on += dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
</cutPoint2787>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2788>
    dk = dk - dk;
    bk = !bk;
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
    dk = dk + dk;
    if (bk) {
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        bk = ok.m2(bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            if (bk) {
                bk = dk < dk;
                dk = dk - dk;
                ok = ok.m4();
                bk = !bk;
                boolean lb1 = true;
                double ld2 = 51.76213553577092;
                ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
                dk = dk - dk;
                dk = dk - dk;
                double ld3 = 677.6817844624986;
                bk = dk > dk;
</cutPoint2788>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2789>
    ok.m2(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought80.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    dk = dk - dk;
    on += dk;
    dk = dk - dk;
    boolean lb2 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    boolean lb3 = false;
    double ld4 = 875.5933217549906;
    dk = dk - dk;
    dk = dk - dk;
    bk = ok.m2();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 55.91954760116163;
    dk = dk + dk;
    bk = dk > dk;
    Thought lo6 = Thought90.getInstance(ok, ok, ok, ok);
    boolean lb7 = true;
    bk = !bk;
    bk = dk < dk;
</cutPoint2789>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2790>
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk < dk;
        dk = ok.m3(dk, dk, dk, dk);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        ok = ok.m4();
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        bk = bk || bk;
        boolean lb1 = false;
        }
    Thought lo2 = Thought92.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo3 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
    Thought lo4 = Thought35.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    dk = dk + dk;
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk);
    boolean lb5 = false;
</cutPoint2790>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2791>
    bk = dk < dk;
    bk = bk && bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    Thought lo0 = Thought45.getInstance(bk, bk, bk, bk);
    bk = ok.m2();
    bk = !bk;
    boolean lb1 = true;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint2791>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2792>
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = false;
    Thought lo1 = Thought44.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
        dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2792>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2793>
    ok.m1(bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb0 = true;
    bk = bk || bk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2793>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2794>
    double ld0 = 464.82928799299987;
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    bk = dk > dk;
    bk = dk < dk;
    dk = dk + dk;
    boolean lb1 = true;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    double ld2 = 969.1461036348915;
    bk = bk || bk;
    Thought lo3 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    bk = !bk;
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb4 = true;
    bk = bk || bk;
    bk = dk > dk;
    ok.m3();
</cutPoint2794>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2795>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    on -= dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    for(int j=0; j<10; j++){
        dk *= -1;
        bk = dk > dk;
        bk = bk || bk;
        boolean lb0 = true;
        boolean lb1 = false;
        Thought lo2 = Thought46.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m3(dk, dk, dk, dk);
        bk = bk || bk;
</cutPoint2795>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2796>
    for(int j=0; j<10; j++){
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        bk = bk || bk;
        dk = ok.m3(bk, bk, bk, bk);
        dk = dk - dk;
        Thought lo0 = Thought22.getInstance();
        for(int j=0; j<10; j++){
            }
        dk = dk + dk;
        on += dk;
        double ld1 = 561.7174724339839;
        }
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    double ld2 = 977.5236809976252;
    boolean lb3 = true;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought46.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    Thought lo5 = Thought47.getInstance(bk, bk, bk, bk);
    bk = !bk;
</cutPoint2796>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2797>
    bk = ok.m2();
    boolean lb0 = false;
        bk = bk && bk;
    double ld1 = 16.555246853693802;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    on += dk;
    dk *= -1;
    bk = dk > dk;
    double ld2 = 229.08355036630596;
    bk = !bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    bk = dk > dk;
    Thought lo3 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2797>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2798>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
    double ld1 = 742.9504745113647;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb3 = false;
        bk = dk < dk;
    bk = !bk;
    Thought lo4 = Thought53.getInstance();
    bk = bk || bk;
        boolean lb5 = false;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
</cutPoint2798>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2799>
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought95.getInstance(bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    dk = dk - dk;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = !bk;
    double ld5 = 521.3020701348753;
    dk = dk - dk;
    Thought lo6 = Thought78.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2();
    on -= dk;
    boolean lb7 = true;
</cutPoint2799>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought80 extends Thought{
private static ArrayList<Thought80> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 867.2724762527433;
private double fd1 = 48.91715368083274;
private Thought fo0 = null;
private Thought fo1 = null;
Thought80 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought80 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought80 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought80 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought80 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought80 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought80 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought80 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought80 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought80 instance = new Thought80 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought80 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought80 instance = new Thought80 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought80 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought80 instance = new Thought80 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought80 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought80 instance = new Thought80 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought80 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought80 instance = new Thought80 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought80 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought80 instance = new Thought80 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought80 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought80 instance = new Thought80 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought80 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought80 instance = new Thought80 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2800>
    Thought lo0 = Thought91.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought38.getInstance(ok, ok, ok, ok);
        dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo2 = Thought64.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    double ld4 = 78.02761149882069;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo5 = Thought2.getInstance();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
    boolean lb6 = true;
    Thought lo7 = Thought95.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2800>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2801>
    dk *= -1;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb0 = true;
        bk = dk > dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb1 = true;
    boolean lb2 = false;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    on -= dk;
    boolean lb3 = false;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = dk > dk;
</cutPoint2801>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2802>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    on -= dk;
    double ld0 = 378.4199840555811;
    for(int j=0; j<10; j++){
        double ld1 = 172.90073350584606;
        bk = !bk;
        dk *= -1;
        Thought lo2 = Thought97.getInstance(bk, bk, bk, bk);
        dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld3 = 381.3007917132684;
        Thought lo4 = Thought1.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb5 = true;
        boolean lb6 = true;
        on -= dk;
</cutPoint2802>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2803>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk > dk;
    boolean lb0 = false;
    boolean lb1 = false;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    on -= dk;
    Thought lo2 = Thought90.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
</cutPoint2803>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2804>
    dk = dk + dk;
    dk = dk + dk;
    Thought lo0 = Thought76.getInstance(dk, dk, dk, dk);
    Thought lo1 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    double ld2 = 497.14207894596126;
    dk = dk + dk;
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo3 = Thought6.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
</cutPoint2804>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2805>
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    on -= dk;
    double ld0 = 477.63566311545713;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb1 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo2 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb3 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk && bk;
    on += dk;
    bk = bk || bk;
    bk = dk < dk;
    boolean lb4 = true;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint2805>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2806>
    boolean lb0 = false;
    bk = bk && bk;
    dk = dk - dk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        bk = !bk;
        boolean lb1 = true;
        dk = dk + dk;
        double ld2 = 538.9244697090877;
        boolean lb3 = false;
        ok.m2(bk, bk, bk, bk);
</cutPoint2806>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2807>
    ok = ok.m4();
    dk *= -1;
    dk *= -1;
    on += dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought37.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    boolean lb1 = false;
    dk *= -1;
    bk = dk < dk;
    Thought lo2 = Thought42.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk && bk;
    on -= dk;
    double ld3 = 465.1734669526029;
    bk = bk || bk;
</cutPoint2807>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2808>
    dk = dk + dk;
    bk = bk || bk;
    Thought lo0 = Thought0.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk && bk;
    double ld1 = 878.3653830329081;
    bk = dk > dk;
    dk = dk + dk;
    bk = bk && bk;
    double ld2 = 318.73965368288475;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2808>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2809>
    bk = !bk;
    if (bk) {
        bk = dk < dk;
        for(int j=0; j<10; j++){
            ok.m1(dk, dk, dk, dk);
            on += dk;
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
            dk = dk + dk;
            }
        on -= dk;
        bk = dk > dk;
        boolean lb0 = false;
        bk = bk && bk;
</cutPoint2809>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2810>
        boolean lb0 = true;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = dk - dk;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = false;
        bk = bk || bk;
        bk = bk || bk;
        boolean lb2 = true;
</cutPoint2810>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2811>
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    double ld0 = 248.39375993008764;
    ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    bk = !bk;
    double ld1 = 424.2840721098824;
    bk = bk || bk;
    bk = dk < dk;
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    double ld2 = 375.07469764587205;
    dk *= -1;
    bk = dk > dk;
    boolean lb3 = true;
    dk = dk + dk;
    bk = !bk;
    Thought lo4 = Thought87.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought36.getInstance(ok, ok, ok, ok);
</cutPoint2811>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2812>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        dk *= -1;
        dk = dk - dk;
        boolean lb1 = true;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        bk = bk && bk;
        bk = bk && bk;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
        dk = dk + dk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk && bk;
</cutPoint2812>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2813>
    on -= dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    on -= dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    bk = bk || bk;
    boolean lb1 = true;
    ok.m1();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok.m2(ok, ok, ok, ok);
    on += dk;
</cutPoint2813>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2814>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    dk = dk + dk;
    double ld0 = 312.13289352272386;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    for(int j=0; j<10; j++){
        ok.m2();
        bk = dk > dk;
        bk = bk && bk;
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 850.0449340984031;
        dk = ok.m3(ok, ok, ok, ok);
        bk = bk && bk;
        bk = dk < dk;
        boolean lb2 = true;
        bk = dk > dk;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
</cutPoint2814>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2815>
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 560.8355158427458;
    Thought lo2 = Thought15.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk > dk;
    boolean lb3 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo4 = Thought0.getInstance();
    double ld5 = 46.343708934424136;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb6 = true;
    ok = ok.m4(bk, bk, bk, bk);
    double ld7 = 621.0961989933854;
</cutPoint2815>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2816>
    ok.m2();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = bk || bk;
    Thought lo1 = Thought7.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb2 = true;
    on -= dk;
    Thought lo3 = Thought5.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = false;
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    double ld5 = 802.2592178537027;
    bk = !bk;
    boolean lb6 = true;
</cutPoint2816>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2817>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk < dk;
    ok.m1();
    bk = !bk;
    bk = bk || bk;
    boolean lb1 = false;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
</cutPoint2817>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2818>
    boolean lb0 = false;
    Thought lo1 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    dk *= -1;
    ok.m3();
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo3 = Thought30.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought10.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    if (bk) {
        dk *= -1;
        bk = bk && bk;
        bk = ok.m2();
        bk = dk > dk;
</cutPoint2818>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2819>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    double ld0 = 306.8104724928215;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 166.47353142067507;
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    dk *= -1;
    Thought lo2 = Thought64.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb3 = true;
    boolean lb4 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    on -= dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2819>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2820>
    bk = !bk;
    on += dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    for(int j=0; j<10; j++){
        on -= dk;
        dk = dk - dk;
        ok = ok.m4();
        }
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought35.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk > dk;
    bk = bk || bk;
    on += dk;
    bk = bk && bk;
        on += dk;
</cutPoint2820>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2821>
    double ld0 = 214.80537820349338;
    bk = !bk;
    Thought lo1 = Thought0.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    for(int j=0; j<10; j++){
        bk = bk || bk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4();
        for(int j=0; j<10; j++){
            bk = dk < dk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk && bk;
            dk = ok.m3(ok, ok, ok, ok);
            Thought lo2 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            }
        boolean lb3 = true;
        boolean lb4 = true;
</cutPoint2821>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2822>
    bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought51.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    dk *= -1;
    boolean lb1 = true;
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk - dk;
    Thought lo2 = Thought82.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2822>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2823>
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk || bk;
    double ld0 = 738.5727943710239;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    if (bk) {
        dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        dk *= -1;
        on += dk;
        bk = bk || bk;
        bk = !bk;
        bk = bk || bk;
        bk = dk > dk;
        dk = dk + dk;
        boolean lb1 = false;
        bk = bk || bk;
        bk = bk || bk;
</cutPoint2823>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2824>
    double ld0 = 369.9275109252676;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo1 = Thought73.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo2 = Thought55.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    boolean lb3 = true;
    Thought lo4 = Thought7.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = false;
    bk = dk < dk;
        bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo6 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    if (bk) {
</cutPoint2824>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2825>
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    on += dk;
    bk = dk > dk;
    boolean lb0 = true;
    dk = ok.m3();
    bk = !bk;
    on += dk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought44.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk || bk;
    double ld2 = 434.21476734562793;
</cutPoint2825>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2826>
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    on += dk;
    dk = dk - dk;
    Thought lo1 = Thought86.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    dk *= -1;
    boolean lb2 = false;
    for(int j=0; j<10; j++){
        ok.m1(dk, dk, dk, dk);
        Thought lo3 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        dk = dk + dk;
        dk = dk - dk;
        double ld4 = 604.9405794537661;
        bk = bk && bk;
        dk = dk - dk;
        double ld5 = 987.213759826094;
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk > dk;
        dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok);
        bk = dk > dk;
</cutPoint2826>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2827>
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 100.50817455359021;
        bk = dk < dk;
    Thought lo1 = Thought21.getInstance(dk, dk, dk, dk);
    double ld2 = 186.4026812214781;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint2827>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2828>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought79.getInstance(bk, bk, bk, bk);
    bk = !bk;
    double ld1 = 555.0650270225234;
    ok = ok.m4();
    boolean lb2 = false;
    double ld3 = 414.2733687317591;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        bk = ok.m2(dk, dk, dk, dk);
        boolean lb4 = true;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        dk = ok.m3(bk, bk, bk, bk);
</cutPoint2828>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2829>
    bk = dk > dk;
    bk = dk < dk;
    bk = !bk;
    Thought lo0 = Thought2.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    boolean lb1 = true;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
</cutPoint2829>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2830>
    dk = dk + dk;
    boolean lb0 = false;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        Thought lo1 = Thought74.getInstance(dk, dk, dk, dk);
        bk = dk > dk;
        } else if (bk) {
        Thought lo2 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        dk = dk - dk;
        boolean lb3 = false;
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk < dk;
        bk = dk > dk;
        bk = bk || bk;
        double ld4 = 505.4626687269251;
        } else {
        bk = bk && bk;
        Thought lo5 = Thought26.getInstance();
        bk = dk < dk;
        bk = dk > dk;
</cutPoint2830>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2831>
    bk = dk < dk;
    bk = bk && bk;
    bk = bk || bk;
    dk = dk + dk;
    on += dk;
    Thought lo0 = Thought68.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        double ld1 = 271.08840097070765;
        boolean lb2 = false;
        ok.m2(ok, ok, ok, ok);
        bk = !bk;
        Thought lo3 = Thought56.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        } else {
        dk = ok.m3(dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        on -= dk;
        dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint2831>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2832>
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    bk = dk > dk;
    bk = bk || bk;
    Thought lo0 = Thought95.getInstance();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2832>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2833>
    dk *= -1;
    boolean lb0 = false;
    ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    bk = dk > dk;
    Thought lo1 = Thought89.getInstance();
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
</cutPoint2833>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2834>
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
</cutPoint2834>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought81 extends Thought{
private static ArrayList<Thought81> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 625.7227555294642;
private double fd1 = 860.6384103157632;
private Thought fo0 = null;
private Thought fo1 = null;
Thought81 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought81 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought81 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought81 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought81 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought81 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought81 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought81 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought81 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought81 instance = new Thought81 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought81 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought81 instance = new Thought81 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought81 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought81 instance = new Thought81 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought81 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought81 instance = new Thought81 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought81 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought81 instance = new Thought81 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought81 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought81 instance = new Thought81 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought81 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought81 instance = new Thought81 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought81 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought81 instance = new Thought81 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2835>
    bk = dk > dk;
    on -= dk;
    dk = ok.m3();
    bk = dk < dk;
    dk *= -1;
    bk = dk > dk;
    boolean lb0 = false;
    bk = bk && bk;
    boolean lb1 = true;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb2 = true;
    boolean lb3 = false;
    on -= dk;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = dk < dk;
    double ld5 = 551.4206325714293;
    dk *= -1;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
        bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb6 = true;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint2835>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2836>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    if (bk) {
        bk = dk > dk;
        ok = ok.m4();
        boolean lb0 = false;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        } else {
        dk = dk + dk;
        boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        ok.m1(dk, dk, dk, dk);
        Thought lo3 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo4 = Thought80.getInstance(bk, bk, bk, bk);
        bk = ok.m2();
</cutPoint2836>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2837>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    bk = dk < dk;
    double ld0 = 616.4999411507727;
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought1.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    if (bk) {
        dk = dk - dk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
</cutPoint2837>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2838>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb0 = true;
    Thought lo1 = Thought16.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    ok.m1();
    bk = !bk;
    boolean lb2 = false;
    on += dk;
    dk *= -1;
    on += dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = dk < dk;
    dk = dk - dk;
    bk = bk && bk;
    Thought lo4 = Thought96.getInstance(ok, ok, ok, ok);
    on -= dk;
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    on += dk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2838>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2839>
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    double ld0 = 890.0981247826121;
    Thought lo1 = Thought47.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb2 = false;
    bk = dk > dk;
    dk = ok.m3();
    dk = dk + dk;
    Thought lo3 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 715.4635664710535;
    ok.m3(ok, ok, ok, ok);
    boolean lb5 = true;
    bk = bk && bk;
    Thought lo6 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb7 = false;
    boolean lb8 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint2839>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2840>
    bk = !bk;
    boolean lb0 = true;
    double ld1 = 808.382291612435;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb2 = false;
    boolean lb3 = true;
    dk = dk - dk;
    on += dk;
    boolean lb4 = false;
    bk = !bk;
    dk = dk + dk;
    dk = dk - dk;
    boolean lb5 = false;
    Thought lo6 = Thought57.getInstance();
    boolean lb7 = false;
</cutPoint2840>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2841>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought5.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    if (bk) {
        ok.m3(bk, bk, bk, bk);
        boolean lb1 = false;
        double ld2 = 980.1665311662953;
        bk = bk && bk;
        dk = dk - dk;
        dk = dk - dk;
        on += dk;
        ok = ok.m4();
        boolean lb3 = true;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        boolean lb4 = true;
        bk = bk || bk;
        bk = dk > dk;
        for(int j=0; j<10; j++){
</cutPoint2841>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2842>
    double ld0 = 554.9831179417931;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    Thought lo2 = Thought59.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo3 = Thought93.getInstance(bk, bk, bk, bk);
    Thought lo4 = Thought28.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint2842>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2843>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    boolean lb0 = false;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    double ld1 = 459.18771761478246;
    ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
</cutPoint2843>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2844>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    double ld1 = 844.4962829778074;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb2 = false;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo3 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    double ld4 = 408.569974408351;
    boolean lb5 = true;
    double ld6 = 592.2263074656875;
    dk = dk - dk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo7 = Thought48.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
</cutPoint2844>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2845>
    dk = dk + dk;
    boolean lb0 = false;
    bk = dk > dk;
    boolean lb1 = false;
    boolean lb2 = true;
    bk = dk > dk;
    bk = dk > dk;
    boolean lb3 = false;
    bk = bk && bk;
    dk *= -1;
    bk = !bk;
    bk = !bk;
    ok.m1(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4();
        bk = dk < dk;
        double ld4 = 48.037296742486305;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo5 = Thought69.getInstance(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        Thought lo6 = Thought62.getInstance();
</cutPoint2845>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2846>
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb0 = false;
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    boolean lb2 = false;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld3 = 129.1049823074843;
    double ld4 = 196.34122615484858;
    bk = bk && bk;
    ok = ok.m4();
    bk = dk > dk;
    bk = bk || bk;
    boolean lb5 = false;
</cutPoint2846>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2847>
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    boolean lb0 = false;
    bk = dk < dk;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk + dk;
    bk = !bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    Thought lo1 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
        on -= dk;
    double ld2 = 99.10145932927423;
    on -= dk;
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint2847>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2848>
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = false;
    boolean lb1 = true;
    Thought lo2 = Thought4.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb3 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = true;
    double ld5 = 185.66649895729404;
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
</cutPoint2848>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2849>
    for(int j=0; j<10; j++){
        boolean lb0 = false;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        dk = ok.m3(bk, bk, bk, bk);
        bk = !bk;
        dk = dk - dk;
        bk = dk > dk;
        dk = ok.m3();
        Thought lo1 = Thought36.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        bk = dk > dk;
        bk = !bk;
        dk *= -1;
        bk = dk < dk;
        bk = dk > dk;
</cutPoint2849>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2850>
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought90.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2850>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2851>
    boolean lb0 = true;
    dk = dk + dk;
    Thought lo1 = Thought38.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    double ld2 = 654.7876756070215;
    double ld3 = 103.6803817246227;
    Thought lo4 = Thought78.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    dk = dk + dk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb5 = true;
    bk = !bk;
    dk = dk - dk;
    if (bk) {
        boolean lb6 = false;
        ok.m3();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        Thought lo7 = Thought6.getInstance(ok, ok, ok, ok);
</cutPoint2851>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2852>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    bk = !bk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    double ld0 = 301.2226274628124;
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
</cutPoint2852>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2853>
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk + dk;
    bk = dk < dk;
    double ld0 = 233.6292353191648;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought48.getInstance(ok, ok, ok, ok);
    Thought lo2 = Thought30.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought82.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo4 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 401.01348405937097;
        on -= dk;
    boolean lb6 = false;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    dk *= -1;
</cutPoint2853>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2854>
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 951.8485915079347;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3();
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = true;
    dk = dk - dk;
    double ld2 = 474.525819673934;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2854>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2855>
    double ld0 = 818.6091885951357;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    bk = bk || bk;
    Thought lo1 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    if (bk) {
        bk = !bk;
        ok.m2(bk, bk, bk, bk);
        boolean lb3 = true;
        bk = bk || bk;
        ok = ok.m4();
</cutPoint2855>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2856>
    bk = dk > dk;
    boolean lb0 = true;
    Thought lo1 = Thought80.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
        bk = bk && bk;
    Thought lo2 = Thought72.getInstance(ok, ok, ok, ok);
    double ld3 = 127.09220776687216;
    dk *= -1;
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2856>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2857>
    on += dk;
    bk = bk && bk;
    boolean lb0 = true;
    bk = bk && bk;
    dk *= -1;
    double ld1 = 681.5420590010597;
    dk = dk + dk;
        Thought lo2 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1();
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo3 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2857>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2858>
    bk = dk > dk;
    bk = dk < dk;
    if (bk) {
        Thought lo0 = Thought49.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb1 = true;
        bk = dk < dk;
        bk = dk < dk;
        bk = dk < dk;
</cutPoint2858>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2859>
    bk = bk && bk;
    dk = dk + dk;
    dk = ok.m3();
    dk *= -1;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk > dk;
    Thought lo1 = Thought57.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought18.getInstance(ok, ok, ok, ok);
</cutPoint2859>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2860>
    dk = dk + dk;
    dk = dk - dk;
    dk *= -1;
    bk = bk && bk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought24.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = false;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    on += dk;
    bk = dk < dk;
    bk = dk < dk;
    Thought lo2 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    dk = dk + dk;
    bk = bk || bk;
</cutPoint2860>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2861>
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 292.66682786777324;
    if (bk) {
        dk = dk + dk;
        if (bk) {
            boolean lb1 = false;
            bk = bk || bk;
            ok = ok.m4(ok, ok, ok, ok);
            ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = dk > dk;
            ok.m2(dk, dk, dk, dk);
</cutPoint2861>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2862>
    dk *= -1;
    Thought lo0 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        Thought lo1 = Thought25.getInstance(bk, bk, bk, bk);
        dk *= -1;
        double ld2 = 933.6000623788677;
        ok = ok.m4();
        boolean lb3 = false;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        dk *= -1;
        on -= dk;
        bk = ok.m2(ok, ok, ok, ok);
        bk = !bk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        ok.m1(dk, dk, dk, dk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld4 = 982.723835581085;
</cutPoint2862>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2863>
    Thought lo0 = Thought43.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb1 = false;
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2863>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2864>
    double ld0 = 209.96542892083573;
        Thought lo1 = Thought48.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    dk = dk - dk;
    boolean lb2 = false;
    Thought lo3 = Thought52.getInstance(bk, bk, bk, bk);
    double ld4 = 918.8232179881304;
    on += dk;
    if (bk) {
        dk = dk + dk;
        bk = bk || bk;
        double ld5 = 999.7072017553058;
        bk = dk < dk;
        ok = ok.m4();
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo6 = Thought93.getInstance(ok, ok, ok, ok);
        bk = bk && bk;
        bk = dk < dk;
        on += dk;
        Thought lo7 = Thought58.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        double ld8 = 87.13076759335082;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk - dk;
        bk = !bk;
</cutPoint2864>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2865>
    Thought lo0 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
        bk = bk && bk;
    ok.m3();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = false;
    double ld3 = 872.0653504652139;
    Thought lo4 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = false;
    boolean lb6 = true;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2865>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2866>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo0 = Thought68.getInstance(bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb1 = true;
    Thought lo2 = Thought14.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought1.getInstance(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = bk || bk;
    double ld4 = 352.2321411322654;
    Thought lo5 = Thought79.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint2866>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2867>
    ok.m1();
    dk = dk - dk;
    Thought lo0 = Thought93.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = false;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought8.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    double ld3 = 346.39780205270125;
    ok = ok.m4();
    bk = bk && bk;
    bk = bk || bk;
</cutPoint2867>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2868>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok.m1(bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb0 = true;
    ok.m2();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    </cutPoint2868>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2869>
        ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    Thought lo0 = Thought37.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
</cutPoint2869>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought82 extends Thought{
private static ArrayList<Thought82> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 189.27904537554332;
private double fd1 = 703.7238554590864;
private Thought fo0 = null;
private Thought fo1 = null;
Thought82 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought82 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought82 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought82 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought82 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought82 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought82 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought82 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought82 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought82 instance = new Thought82 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought82 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought82 instance = new Thought82 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought82 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought82 instance = new Thought82 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought82 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought82 instance = new Thought82 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought82 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought82 instance = new Thought82 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought82 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought82 instance = new Thought82 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought82 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought82 instance = new Thought82 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought82 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought82 instance = new Thought82 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2870>
        if (bk) {
        dk = dk - dk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = ok.m2();
        boolean lb0 = true;
        bk = bk && bk;
        boolean lb1 = true;
        Thought lo2 = Thought31.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought59.getInstance(ok, ok, ok, ok);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        boolean lb4 = true;
        dk = dk - dk;
        ok = ok.m4();
        Thought lo5 = Thought85.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld6 = 915.4432251696466;
</cutPoint2870>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2871>
    dk *= -1;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4();
    boolean lb0 = false;
    bk = bk && bk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on += dk;
    Thought lo1 = Thought23.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2871>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2872>
    bk = dk < dk;
    double ld0 = 522.7800402271432;
    boolean lb1 = true;
    bk = dk < dk;
    bk = dk > dk;
    dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld2 = 301.95609844165625;
    boolean lb3 = true;
    bk = dk < dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb4 = true;
    ok = ok.m4();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2872>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2873>
    on -= dk;
    bk = !bk;
    Thought lo0 = Thought52.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok.m3(dk, dk, dk, dk);
    boolean lb1 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok.m2();
</cutPoint2873>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2874>
    boolean lb0 = false;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    Thought lo1 = Thought47.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    bk = !bk;
    boolean lb2 = true;
    dk *= -1;
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    double ld3 = 485.81755822244054;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought93.getInstance(ok, ok, ok, ok);
    boolean lb5 = false;
</cutPoint2874>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2875>
    dk = dk - dk;
    double ld0 = 493.0576296051214;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk *= -1;
    dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    dk *= -1;
    double ld2 = 474.04446208770213;
    bk = bk || bk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
</cutPoint2875>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2876>
    double ld0 = 990.0400162523656;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    double ld1 = 433.79550029055093;
    Thought lo2 = Thought51.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    bk = dk < dk;
    bk = dk < dk;
</cutPoint2876>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2877>
    dk *= -1;
    ok = ok.m4();
    on += dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 79.04351010931852;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 807.9328293362814;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo3 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2877>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2878>
    ok = ok.m4();
    double ld0 = 486.6310196809507;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = false;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought32.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought23.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    Thought lo4 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld5 = 830.3059596318749;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2878>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2879>
    dk = dk + dk;
    bk = dk < dk;
    bk = bk || bk;
    Thought lo0 = Thought0.getInstance(dk, dk, dk, dk);
    bk = !bk;
    boolean lb1 = true;
    boolean lb2 = false;
    Thought lo3 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    on -= dk;
</cutPoint2879>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2880>
    bk = dk > dk;
    bk = bk || bk;
    double ld0 = 798.7103394447757;
    ok.m1(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 628.0432532132439;
    bk = dk < dk;
    ok = ok.m4();
    bk = bk || bk;
    double ld2 = 400.4185045524623;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 677.4478624701275;
</cutPoint2880>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2881>
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = bk && bk;
    bk = bk || bk;
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk || bk;
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought37.getInstance();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought88.getInstance(ok, ok, ok, ok);
        if (bk) {
        bk = dk > dk;
        dk = dk - dk;
        bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2881>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2882>
    double ld0 = 444.04778059108577;
    boolean lb1 = true;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    double ld2 = 241.0390495212572;
    on += dk;
    on += dk;
    bk = !bk;
    double ld3 = 427.3771724033399;
    double ld4 = 786.2927242203708;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    double ld5 = 647.227417257963;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk > dk;
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2882>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2883>
    bk = bk || bk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
    bk = !bk;
    dk = dk + dk;
    dk = dk - dk;
    dk *= -1;
    bk = dk > dk;
    dk *= -1;
    double ld0 = 730.8352547086917;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb1 = true;
    dk = dk + dk;
    bk = bk && bk;
    on += dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought31.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
</cutPoint2883>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2884>
    boolean lb0 = true;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought16.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 828.2301559087798;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        dk = dk + dk;
        bk = ok.m2(bk, bk, bk, bk);
        bk = dk < dk;
        bk = ok.m2();
        }
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld3 = 892.0605374806062;
    dk = dk + dk;
</cutPoint2884>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2885>
    double ld0 = 437.3154755585014;
    bk = dk > dk;
    dk *= -1;
    Thought lo1 = Thought10.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought78.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo3 = Thought47.getInstance(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb4 = false;
    bk = ok.m2();
</cutPoint2885>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2886>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought53.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
        dk *= -1;
    bk = bk || bk;
    Thought lo1 = Thought43.getInstance();
    boolean lb2 = false;
    Thought lo3 = Thought6.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
</cutPoint2886>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2887>
    dk *= -1;
    dk *= -1;
    dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2887>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2888>
    bk = dk > dk;
    Thought lo0 = Thought53.getInstance(dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    if (bk) {
        ok.m1(bk, bk, bk, bk);
        dk *= -1;
        Thought lo1 = Thought77.getInstance();
        bk = !bk;
        bk = dk < dk;
        bk = dk > dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
</cutPoint2888>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2889>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    double ld0 = 708.8575496555046;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4();
    boolean lb1 = true;
    boolean lb2 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
</cutPoint2889>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2890>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = !bk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
        dk *= -1;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    for(int j=0; j<10; j++){
        dk *= -1;
        bk = bk || bk;
</cutPoint2890>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2891>
    on += dk;
    boolean lb0 = false;
    ok.m1(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought85.getInstance(bk, bk, bk, bk);
    boolean lb2 = false;
    Thought lo3 = Thought49.getInstance();
    boolean lb4 = true;
    bk = bk && bk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 226.5772842707756;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    on -= dk;
    dk *= -1;
</cutPoint2891>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2892>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk < dk;
    dk = dk - dk;
    bk = !bk;
    boolean lb1 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk < dk;
</cutPoint2892>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2893>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    bk = dk > dk;
    double ld0 = 336.47029961050066;
    double ld1 = 481.6805316911279;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb2 = false;
    boolean lb3 = false;
    dk = dk - dk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo4 = Thought7.getInstance(ok, ok, ok, ok);
    double ld5 = 51.83044718929417;
    dk *= -1;
    Thought lo6 = Thought30.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    Thought lo7 = Thought40.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2893>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2894>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk + dk;
    double ld0 = 519.6603285862641;
    on -= dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 958.4677407655449;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    ok.m1(dk, dk, dk, dk);
    dk = dk + dk;
    double ld3 = 726.8918749829512;
    bk = dk > dk;
    bk = !bk;
    double ld4 = 171.13504206942085;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = true;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2894>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2895>
    dk = dk + dk;
    Thought lo0 = Thought21.getInstance();
    dk *= -1;
    dk = dk + dk;
    bk = !bk;
    bk = bk && bk;
    double ld1 = 439.7611128035774;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = dk > dk;
    dk = dk + dk;
</cutPoint2895>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2896>
    bk = dk < dk;
    bk = bk || bk;
    bk = dk < dk;
    double ld0 = 248.91110118604507;
    ok.m2(dk, dk, dk, dk);
    boolean lb1 = false;
    boolean lb2 = false;
    bk = bk && bk;
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
</cutPoint2896>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2897>
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 741.0719629999686;
    dk = dk - dk;
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    dk *= -1;
    ok.m1(bk, bk, bk, bk);
    boolean lb1 = true;
    dk = dk + dk;
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk - dk;
    bk = bk || bk;
    if (bk) {
        Thought lo2 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
</cutPoint2897>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2898>
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    double ld0 = 990.12557169338;
    bk = !bk;
    ok.m1(bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    bk = !bk;
    bk = bk || bk;
    bk = dk > dk;
    bk = dk < dk;
    on += dk;
    dk = ok.m3();
    boolean lb1 = true;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        if (bk) {
        boolean lb2 = false;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
        dk = dk - dk;
</cutPoint2898>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2899>
    double ld0 = 885.5402998712988;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought85.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    bk = bk && bk;
    boolean lb2 = false;
    bk = bk || bk;
    ok = ok.m4();
    dk = dk + dk;
    for(int j=0; j<10; j++){
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk = ok.m3(ok, ok, ok, ok);
        bk = bk && bk;
        dk *= -1;
        bk = bk && bk;
        bk = !bk;
        dk = dk - dk;
        }
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2899>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2900>
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    bk = dk < dk;
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    double ld1 = 956.543147782582;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought11.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    on -= dk;
    bk = bk && bk;
    Thought lo3 = Thought73.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = bk || bk;
    boolean lb5 = false;
</cutPoint2900>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2901>
    double ld0 = 55.17834928871217;
    Thought lo1 = Thought14.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    Thought lo2 = Thought21.getInstance();
    bk = bk && bk;
    double ld3 = 851.8030758019194;
        Thought lo4 = Thought2.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
        boolean lb5 = true;
    dk = dk + dk;
    dk = dk - dk;
    Thought lo6 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb7 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = bk && bk;
        bk = !bk;
</cutPoint2901>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2902>
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    ok = ok.m4();
    bk = dk < dk;
    bk = bk && bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought93.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb2 = true;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb3 = true;
        bk = bk || bk;
    bk = dk > dk;
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4();
    boolean lb4 = true;
</cutPoint2902>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2903>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    on += dk;
    double ld0 = 187.96876577091984;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought71.getInstance();
    bk = dk > dk;
</cutPoint2903>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2904>
        double ld0 = 651.1254821451369;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought49.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
        dk = dk + dk;
    dk *= -1;
    Thought lo2 = Thought36.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    Thought lo3 = Thought95.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    Thought lo4 = Thought97.getInstance(bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2904>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought83 extends Thought{
private static ArrayList<Thought83> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 120.85664105294032;
private double fd1 = 596.93933712112;
private Thought fo0 = null;
private Thought fo1 = null;
Thought83 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought83 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought83 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought83 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought83 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought83 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought83 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought83 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought83 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought83 instance = new Thought83 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought83 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought83 instance = new Thought83 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought83 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought83 instance = new Thought83 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought83 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought83 instance = new Thought83 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought83 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought83 instance = new Thought83 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought83 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought83 instance = new Thought83 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought83 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought83 instance = new Thought83 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought83 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought83 instance = new Thought83 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2905>
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 135.12137395085534;
    dk *= -1;
    boolean lb1 = false;
    boolean lb2 = false;
    Thought lo3 = Thought74.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    bk = dk > dk;
    ok = ok.m4();
    for(int j=0; j<10; j++){
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = !bk;
        bk = dk < dk;
        boolean lb5 = false;
        boolean lb6 = false;
        Thought lo7 = Thought81.getInstance(ok, ok, ok, ok);
        dk *= -1;
</cutPoint2905>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2906>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld0 = 703.0286179521175;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok.m2(dk, dk, dk, dk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    ok.m3();
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    Thought lo1 = Thought7.getInstance(ok, ok, ok, ok);
    bk = !bk;
</cutPoint2906>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2907>
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    if (bk) {
        boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        bk = bk || bk;
        boolean lb2 = false;
        Thought lo3 = Thought69.getInstance(dk, dk, dk, dk);
        dk = dk + dk;
        boolean lb4 = true;
        dk *= -1;
        bk = dk > dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        bk = ok.m2();
        } else {
        dk = dk - dk;
        if (bk) {
            bk = !bk;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            on -= dk;
</cutPoint2907>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2908>
    for(int j=0; j<10; j++){
        dk = dk - dk;
        on -= dk;
        bk = dk < dk;
        bk = bk && bk;
        boolean lb0 = true;
        dk = dk + dk;
        boolean lb1 = true;
        bk = ok.m2(ok, ok, ok, ok);
        dk = dk + dk;
        Thought lo2 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = false;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk || bk;
        dk = ok.m3();
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb4 = true;
</cutPoint2908>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2909>
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = !bk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk = ok.m3(bk, bk, bk, bk);
        dk = ok.m3();
        dk = dk + dk;
        dk = dk - dk;
</cutPoint2909>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2910>
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 7.174994283933632;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    boolean lb1 = false;
    Thought lo2 = Thought80.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought65.getInstance(bk, bk, bk, bk);
    Thought lo4 = Thought18.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    bk = !bk;
    boolean lb5 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
</cutPoint2910>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2911>
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    boolean lb0 = false;
    boolean lb1 = true;
    on += dk;
    on -= dk;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        ok = ok.m4();
        dk *= -1;
        dk = dk - dk;
        double ld2 = 739.4038206086755;
        boolean lb3 = true;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        Thought lo4 = Thought55.getInstance(ok, ok, ok, ok);
        boolean lb5 = true;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2911>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2912>
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb0 = false;
    on -= dk;
    on -= dk;
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk < dk;
    dk = dk + dk;
    bk = dk > dk;
    on += dk;
    double ld1 = 484.30014809059213;
    for(int j=0; j<10; j++){
        bk = bk || bk;
        dk = dk + dk;
        on -= dk;
        bk = ok.m2(bk, bk, bk, bk);
        dk = ok.m3();
</cutPoint2912>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2913>
    dk = dk - dk;
    boolean lb0 = false;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    Thought lo2 = Thought40.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    Thought lo3 = Thought16.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    bk = ok.m2();
    bk = dk < dk;
    boolean lb4 = true;
    on += dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok);
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2913>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2914>
    boolean lb0 = false;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 425.4202920458325;
    dk = dk - dk;
    bk = !bk;
    bk = bk || bk;
    dk = dk - dk;
    bk = !bk;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo2 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    ok.m1();
    dk = dk - dk;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo3 = Thought95.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    boolean lb4 = false;
    bk = dk > dk;
    boolean lb5 = true;
    dk = dk + dk;
    dk = dk + dk;
</cutPoint2914>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2915>
    bk = dk < dk;
    bk = !bk;
    bk = dk < dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 497.8023717765718;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    boolean lb1 = true;
    bk = dk > dk;
    boolean lb2 = false;
</cutPoint2915>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2916>
    boolean lb0 = true;
    Thought lo1 = Thought23.getInstance(dk, dk, dk, dk);
    bk = dk > dk;
    double ld2 = 424.28727518902207;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought42.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        ok = ok.m4();
        dk = dk + dk;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        bk = dk > dk;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2916>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2917>
    dk = dk - dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    if (bk) {
        Thought lo0 = Thought58.getInstance();
        on += dk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        on += dk;
        dk = ok.m3(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk && bk;
        dk = dk - dk;
        bk = !bk;
        dk = dk + dk;
        Thought lo1 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo2 = Thought23.getInstance(bk, bk, bk, bk);
        ok.m2();
</cutPoint2917>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2918>
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 945.5916906729002;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    dk = dk - dk;
    Thought lo2 = Thought51.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
</cutPoint2918>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2919>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    Thought lo1 = Thought58.getInstance(bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = true;
    Thought lo3 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo4 = Thought98.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk || bk;
    dk = dk + dk;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb5 = true;
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
</cutPoint2919>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2920>
    dk *= -1;
    bk = !bk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = true;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo1 = Thought4.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought44.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb3 = false;
    on += dk;
    boolean lb4 = true;
    boolean lb5 = true;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok);
    dk *= -1;
    </cutPoint2920>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2921>
    Thought lo0 = Thought13.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    on += dk;
    Thought lo1 = Thought4.getInstance(dk, dk, dk, dk);
    boolean lb2 = false;
    double ld3 = 29.50716744520018;
    bk = bk || bk;
    Thought lo4 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint2921>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2922>
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    boolean lb0 = false;
    Thought lo1 = Thought7.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    dk *= -1;
</cutPoint2922>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2923>
    bk = bk && bk;
    Thought lo0 = Thought14.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk);
    double ld1 = 319.5007387844171;
    bk = bk && bk;
    dk *= -1;
    boolean lb2 = true;
    bk = !bk;
    bk = bk && bk;
    bk = bk && bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    dk *= -1;
    bk = dk > dk;
    double ld3 = 363.0903822709433;
    ok.m1(bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
</cutPoint2923>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2924>
    bk = bk && bk;
    for(int j=0; j<10; j++){
        boolean lb0 = true;
        dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok);
        on -= dk;
        bk = dk > dk;
        dk = dk + dk;
        double ld1 = 294.06516164583263;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = true;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        dk = ok.m3(dk, dk, dk, dk);
        bk = bk && bk;
        bk = bk || bk;
        if (bk) {
            ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
            } else {
            bk = bk && bk;
            double ld3 = 334.38285241444015;
            dk = dk + dk;
            ok = ok.m4(bk, bk, bk, bk);
            on -= dk;
            boolean lb4 = false;
            ok = ok.m4();
</cutPoint2924>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2925>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb1 = true;
    dk *= -1;
    dk = dk - dk;
    </cutPoint2925>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2926>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 720.3577703710511;
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
        ok.m2();
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    bk = bk || bk;
    dk = dk + dk;
    double ld2 = 199.55231866351605;
    double ld3 = 458.5833273582922;
    bk = bk || bk;
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2926>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2927>
    Thought lo0 = Thought33.getInstance(ok, ok, ok, ok);
    boolean lb1 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    dk *= -1;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk < dk;
    Thought lo2 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        ok.m1(dk, dk, dk, dk);
        bk = dk < dk;
        double ld4 = 652.7484779990327;
        boolean lb5 = false;
</cutPoint2927>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2928>
    bk = bk && bk;
    dk *= -1;
    bk = bk || bk;
    bk = bk && bk;
    Thought lo0 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld2 = 571.9337365424911;
    dk = dk + dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    on -= dk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    double ld3 = 151.94259860271174;
    boolean lb4 = true;
    dk = dk + dk;
    dk *= -1;
    boolean lb5 = false;
    bk = bk || bk;
    bk = bk || bk;
    double ld6 = 821.096961711604;
    dk = dk - dk;
    double ld7 = 368.8437629133837;
    boolean lb8 = true;
    boolean lb9 = true;
</cutPoint2928>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2929>
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo1 = Thought96.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk - dk;
    Thought lo2 = Thought35.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2929>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2930>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 296.0215815738814;
    boolean lb1 = true;
    Thought lo2 = Thought85.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    Thought lo3 = Thought84.getInstance();
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    on += dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 755.1379880548595;
</cutPoint2930>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2931>
    dk = dk + dk;
    boolean lb0 = false;
    dk = dk + dk;
    on += dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    dk = dk - dk;
    double ld1 = 321.15324290344813;
    ok.m2(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
</cutPoint2931>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2932>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo0 = Thought34.getInstance();
    dk = dk - dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        double ld1 = 2.0574702508086857;
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        }
        bk = !bk;
    Thought lo2 = Thought0.getInstance(dk, dk, dk, dk);
    boolean lb3 = false;
    bk = !bk;
    dk = dk - dk;
    Thought lo4 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo5 = Thought1.getInstance();
    bk = dk < dk;
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2932>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2933>
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought70.getInstance(dk, dk, dk, dk);
    double ld1 = 3.2036041100977997;
    bk = bk && bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    bk = !bk;
    dk = dk - dk;
    bk = dk < dk;
    on += dk;
        ok = ok.m4(bk, bk, bk, bk);
    Thought lo2 = Thought15.getInstance();
    boolean lb3 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    bk = !bk;
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint2933>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2934>
    Thought lo0 = Thought42.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    Thought lo1 = Thought15.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = true;
    dk = dk + dk;
    double ld3 = 299.287276906349;
    dk *= -1;
    bk = !bk;
    bk = bk && bk;
</cutPoint2934>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2935>
        bk = !bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought26.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 307.6193215132098;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
        Thought lo3 = Thought89.getInstance();
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint2935>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2936>
    dk *= -1;
    double ld0 = 810.7359674712815;
    bk = bk || bk;
    bk = !bk;
    dk = dk - dk;
    dk = dk + dk;
    bk = !bk;
    boolean lb1 = true;
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo4 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb5 = true;
    bk = !bk;
    boolean lb6 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
</cutPoint2936>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2937>
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought2.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    ok.m1();
    Thought lo2 = Thought33.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
        bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    double ld3 = 696.995521565241;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint2937>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2938>
    boolean lb0 = false;
    bk = bk || bk;
    ok.m1();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 416.83007876297745;
    ok.m2(ok, ok, ok, ok);
    double ld2 = 637.9480334162783;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    on -= dk;
    bk = bk || bk;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint2938>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2939>
        Thought lo0 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    boolean lb1 = true;
    dk *= -1;
    Thought lo2 = Thought51.getInstance();
    dk *= -1;
    double ld3 = 171.14597595107264;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought85.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb5 = false;
    Thought lo6 = Thought71.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    double ld7 = 423.5610130863964;
</cutPoint2939>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought84 extends Thought{
private static ArrayList<Thought84> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 83.89667105674711;
private double fd1 = 682.0673527022191;
private Thought fo0 = null;
private Thought fo1 = null;
Thought84 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought84 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought84 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought84 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought84 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought84 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought84 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought84 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought84 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought84 instance = new Thought84 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought84 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought84 instance = new Thought84 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought84 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought84 instance = new Thought84 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought84 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought84 instance = new Thought84 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought84 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought84 instance = new Thought84 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought84 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought84 instance = new Thought84 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought84 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought84 instance = new Thought84 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought84 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought84 instance = new Thought84 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2940>
    bk = !bk;
    Thought lo0 = Thought47.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    for(int j=0; j<10; j++){
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok);
        dk *= -1;
        dk = dk + dk;
        bk = dk < dk;
        dk = dk + dk;
        bk = !bk;
        boolean lb1 = false;
        bk = dk > dk;
        dk = dk - dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld2 = 425.146972452045;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        dk = dk - dk;
</cutPoint2940>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2941>
    bk = dk > dk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    on += dk;
    if (bk) {
        ok.m3(bk, bk, bk, bk);
        boolean lb0 = true;
        bk = !bk;
        dk = dk + dk;
        ok = ok.m4();
        boolean lb1 = false;
        boolean lb2 = true;
        bk = dk > dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        dk = dk + dk;
        bk = !bk;
        bk = dk > dk;
        Thought lo3 = Thought50.getInstance(ok, ok, ok, ok);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb4 = true;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        bk = bk || bk;
        dk = dk + dk;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint2941>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2942>
    dk = dk + dk;
    bk = dk < dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo0 = Thought44.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb1 = true;
    double ld2 = 913.8040525709102;
    boolean lb3 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    Thought lo4 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk *= -1;
        dk = dk + dk;
</cutPoint2942>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2943>
    boolean lb0 = true;
    bk = bk || bk;
    dk = dk + dk;
    if (bk) {
        dk = ok.m3(bk, bk, bk, bk);
        dk = ok.m3();
        boolean lb1 = true;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok);
        boolean lb2 = true;
        on -= dk;
        dk *= -1;
        on += dk;
        double ld3 = 802.7157070148522;
        } else if (bk) {
        double ld4 = 988.7500038522148;
        dk *= -1;
</cutPoint2943>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2944>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb0 = false;
    for(int j=0; j<10; j++){
        dk *= -1;
        Thought lo1 = Thought57.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        }
    bk = !bk;
    bk = bk && bk;
    Thought lo2 = Thought68.getInstance(dk, dk, dk, dk);
    boolean lb3 = true;
    Thought lo4 = Thought47.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo5 = Thought29.getInstance(bk, bk, bk, bk);
    boolean lb6 = false;
    Thought lo7 = Thought81.getInstance();
</cutPoint2944>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2945>
    bk = bk && bk;
    boolean lb0 = true;
    Thought lo1 = Thought96.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        bk = bk || bk;
        bk = dk < dk;
        on += dk;
</cutPoint2945>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2946>
    bk = bk && bk;
    boolean lb0 = false;
    bk = bk && bk;
    dk *= -1;
    bk = dk > dk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 549.3860005260748;
    bk = !bk;
    Thought lo2 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo3 = Thought86.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb4 = false;
    double ld5 = 412.4933202557246;
    on += dk;
    ok = ok.m4();
    Thought lo6 = Thought52.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    on += dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld7 = 139.6136582448226;
    on -= dk;
    Thought lo8 = Thought26.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2946>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2947>
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    double ld0 = 717.3554505454017;
    Thought lo1 = Thought69.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    bk = bk && bk;
    bk = dk > dk;
    bk = bk || bk;
    bk = dk < dk;
    dk *= -1;
    on -= dk;
    boolean lb2 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
</cutPoint2947>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2948>
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3();
    dk *= -1;
    boolean lb1 = false;
    boolean lb2 = false;
    boolean lb3 = true;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m2(ok, ok, ok, ok);
    boolean lb4 = true;
    on -= dk;
    bk = bk && bk;
    boolean lb5 = false;
    bk = bk || bk;
</cutPoint2948>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2949>
    bk = bk || bk;
    boolean lb0 = true;
    on += dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    boolean lb2 = true;
    ok.m1(bk, bk, bk, bk);
    double ld3 = 173.26213216911492;
    dk = dk + dk;
    dk = ok.m3();
    double ld4 = 96.90482454411;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        double ld5 = 483.5215822987152;
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo6 = Thought2.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2949>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2950>
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    boolean lb0 = false;
    ok = ok.m4();
    bk = !bk;
    boolean lb1 = false;
</cutPoint2950>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2951>
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok);
    if (bk) {
        on += dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        on += dk;
        if (bk) {
            bk = bk && bk;
            boolean lb1 = false;
            dk = dk + dk;
            Thought lo2 = Thought61.getInstance(dk, dk, dk, dk);
            bk = bk && bk;
            bk = bk || bk;
            on += dk;
            on += dk;
            double ld3 = 741.003615374533;
            bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
            if (bk) {
</cutPoint2951>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2952>
    bk = dk < dk;
    double ld0 = 880.9028564772069;
    bk = dk < dk;
    on += dk;
    ok.m1(bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4();
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk > dk;
    boolean lb1 = false;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        bk = dk < dk;
        boolean lb2 = true;
        bk = dk > dk;
        dk = dk + dk;
        bk = bk && bk;
        bk = bk || bk;
</cutPoint2952>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2953>
    Thought lo0 = Thought58.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = false;
    bk = !bk;
    on += dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
        on += dk;
    bk = ok.m2();
    Thought lo2 = Thought79.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    bk = !bk;
    double ld3 = 794.1902242678697;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought80.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint2953>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2954>
    bk = !bk;
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk < dk;
    bk = !bk;
    double ld0 = 246.0377103689928;
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint2954>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2955>
    ok.m2(dk, dk, dk, dk);
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 263.160681075448;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2955>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2956>
    dk = dk + dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    double ld0 = 539.5667898084997;
    Thought lo1 = Thought26.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought49.getInstance(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint2956>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2957>
    boolean lb0 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    bk = bk || bk;
    double ld2 = 481.85649139800853;
    bk = dk < dk;
    double ld3 = 701.812468679933;
    on -= dk;
    dk *= -1;
    ok.m1(bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    dk = dk + dk;
    dk = ok.m3();
    on -= dk;
    dk *= -1;
</cutPoint2957>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2958>
    double ld0 = 633.0317731757638;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        boolean lb1 = true;
        for(int j=0; j<10; j++){
            bk = bk || bk;
            bk = !bk;
            ok = ok.m4(ok, ok, ok, ok);
            bk = bk || bk;
            dk *= -1;
            ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk + dk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            on += dk;
            ok = ok.m4(dk, dk, dk, dk);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            dk = ok.m3(bk, bk, bk, bk);
            dk = dk - dk;
            on += dk;
            dk = dk - dk;
            bk = bk && bk;
</cutPoint2958>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2959>
    bk = dk > dk;
    boolean lb0 = false;
    dk = dk - dk;
    ok.m2();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 520.5856268434926;
    bk = bk || bk;
    boolean lb2 = false;
    double ld3 = 640.8337901026368;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
</cutPoint2959>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2960>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    Thought lo0 = Thought86.getInstance();
    bk = bk || bk;
    boolean lb1 = false;
    bk = dk > dk;
    double ld2 = 566.4026170735252;
    dk *= -1;
    dk *= -1;
    Thought lo3 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    bk = !bk;
</cutPoint2960>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2961>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought38.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint2961>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2962>
    bk = bk || bk;
    on -= dk;
    ok = ok.m4();
    boolean lb0 = false;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought90.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = !bk;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        dk = dk + dk;
        bk = !bk;
        dk = dk - dk;
        dk *= -1;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb3 = true;
        boolean lb4 = false;
        for(int j=0; j<10; j++){
            ok = ok.m4();
            ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2962>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2963>
    boolean lb0 = true;
    Thought lo1 = Thought13.getInstance(ok, ok, ok, ok);
    Thought lo2 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 942.1360386353746;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    if (bk) {
        bk = !bk;
        boolean lb4 = false;
        double ld5 = 108.7520339924881;
        bk = dk < dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        dk = dk - dk;
        Thought lo6 = Thought25.getInstance(bk, bk, bk, bk);
        dk = dk + dk;
        Thought lo7 = Thought97.getInstance();
        double ld8 = 322.08780578859097;
        bk = dk < dk;
        on -= dk;
        on -= dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo9 = Thought23.getInstance(ok, ok, ok, ok);
</cutPoint2963>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2964>
    boolean lb0 = true;
    boolean lb1 = true;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    double ld2 = 428.0770406849312;
    bk = bk && bk;
    boolean lb3 = false;
    if (bk) {
        bk = bk && bk;
        bk = dk < dk;
        boolean lb4 = false;
        bk = dk > dk;
</cutPoint2964>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2965>
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    dk = dk + dk;
    dk *= -1;
    boolean lb0 = false;
    on -= dk;
    dk *= -1;
    bk = bk && bk;
    bk = bk && bk;
    bk = dk < dk;
        boolean lb1 = true;
    dk = dk - dk;
    dk *= -1;
    dk = dk - dk;
</cutPoint2965>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2966>
    dk *= -1;
    double ld0 = 914.0866236568763;
    dk *= -1;
        boolean lb1 = true;
    bk = bk || bk;
    double ld2 = 842.9554330925765;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk - dk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    bk = dk < dk;
    bk = !bk;
</cutPoint2966>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2967>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo0 = Thought7.getInstance(ok, ok, ok, ok);
    boolean lb1 = false;
    double ld2 = 367.15039567852597;
    dk = dk - dk;
    dk *= -1;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld4 = 297.8505187398728;
</cutPoint2967>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2968>
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk > dk;
        on += dk;
    boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = false;
    dk = ok.m3();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 508.67239213017785;
    boolean lb3 = false;
    boolean lb4 = false;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    on += dk;
    double ld5 = 224.97387898484206;
    boolean lb6 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb7 = true;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
</cutPoint2968>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2969>
    ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb0 = false;
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    dk = dk + dk;
</cutPoint2969>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2970>
    dk = dk + dk;
    Thought lo0 = Thought49.getInstance();
    bk = dk > dk;
    Thought lo1 = Thought87.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo2 = Thought51.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 794.0981181148045;
        dk = dk - dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld4 = 437.4354411696397;
    dk = dk - dk;
        bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo5 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2();
    on -= dk;
    Thought lo6 = Thought22.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    bk = !bk;
    dk = dk + dk;
</cutPoint2970>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2971>
    boolean lb0 = true;
    bk = !bk;
    dk = dk - dk;
    Thought lo1 = Thought62.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    double ld2 = 298.3739249459162;
    Thought lo3 = Thought8.getInstance();
    boolean lb4 = true;
    on += dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought43.getInstance(ok, ok, ok, ok);
    double ld6 = 835.019616185295;
    Thought lo7 = Thought96.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
        bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2971>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2972>
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk > dk;
    boolean lb0 = false;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    boolean lb2 = true;
    boolean lb3 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
        boolean lb4 = true;
    Thought lo5 = Thought68.getInstance(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok);
    boolean lb6 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2972>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2973>
    dk *= -1;
    Thought lo0 = Thought40.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    boolean lb1 = false;
    boolean lb2 = true;
    bk = bk || bk;
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought75.getInstance(bk, bk, bk, bk);
    ok.m2();
    bk = !bk;
    bk = bk || bk;
</cutPoint2973>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2974>
    Thought lo0 = Thought62.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
        bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = true;
    bk = bk && bk;
    on -= dk;
    Thought lo2 = Thought15.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    on -= dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
</cutPoint2974>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought85 extends Thought{
private static ArrayList<Thought85> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 368.2941667586431;
private double fd1 = 73.82957062935584;
private Thought fo0 = null;
private Thought fo1 = null;
Thought85 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought85 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought85 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought85 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought85 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought85 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought85 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought85 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought85 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought85 instance = new Thought85 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought85 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought85 instance = new Thought85 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought85 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought85 instance = new Thought85 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought85 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought85 instance = new Thought85 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought85 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought85 instance = new Thought85 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought85 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought85 instance = new Thought85 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought85 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought85 instance = new Thought85 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought85 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought85 instance = new Thought85 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2975>
    dk = dk + dk;
    ok = ok.m4();
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        Thought lo1 = Thought19.getInstance(ok, ok, ok, ok);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            bk = dk < dk;
            bk = dk > dk;
            boolean lb2 = true;
            ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = dk > dk;
            bk = ok.m2(dk, dk, dk, dk);
            bk = bk && bk;
            boolean lb3 = false;
            Thought lo4 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            ok.m1(bk, bk, bk, bk);
            dk = dk - dk;
</cutPoint2975>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2976>
    bk = !bk;
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = dk < dk;
    double ld0 = 912.4745916653532;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 315.0234294041904;
    ok.m3(dk, dk, dk, dk);
</cutPoint2976>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2977>
    double ld0 = 318.18723522406043;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought69.getInstance();
    double ld2 = 862.2231278964733;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    boolean lb3 = false;
    bk = dk > dk;
    double ld4 = 487.68174852250513;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint2977>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2978>
    on -= dk;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
        ok.m1(dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    boolean lb0 = false;
    boolean lb1 = true;
    bk = bk && bk;
    Thought lo2 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    double ld3 = 372.2343062137563;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    double ld4 = 922.841548138041;
    dk *= -1;
    bk = !bk;
    bk = bk && bk;
</cutPoint2978>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2979>
    boolean lb0 = true;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought61.getInstance(ok, ok, ok, ok);
    bk = !bk;
    bk = bk && bk;
    on -= dk;
    Thought lo3 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought84.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint2979>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2980>
    dk *= -1;
    bk = !bk;
    bk = dk < dk;
    bk = dk < dk;
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    Thought lo1 = Thought18.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb2 = true;
        dk *= -1;
        bk = !bk;
</cutPoint2980>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2981>
    boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    if (bk) {
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        on += dk;
        dk = dk + dk;
        ok.m2(bk, bk, bk, bk);
        double ld1 = 610.9035767257242;
        bk = dk > dk;
        bk = dk < dk;
        double ld2 = 10.98617735626163;
</cutPoint2981>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2982>
    double ld0 = 240.4306739749719;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    on += dk;
    bk = !bk;
    bk = !bk;
    double ld1 = 321.745199643571;
    ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk > dk;
    dk = dk - dk;
</cutPoint2982>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2983>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought92.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    double ld1 = 339.7941108731742;
    dk = dk + dk;
    boolean lb2 = false;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
</cutPoint2983>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2984>
    dk = dk - dk;
    boolean lb0 = true;
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        ok = ok.m4(bk, bk, bk, bk);
        if (bk) {
            ok = ok.m4();
            } else {
            ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            on += dk;
            bk = dk < dk;
            boolean lb1 = false;
            dk = dk - dk;
            on -= dk;
            bk = dk > dk;
            ok = ok.m4(ok, ok, ok, ok);
            dk = dk - dk;
            bk = dk > dk;
</cutPoint2984>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2985>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    dk *= -1;
    on -= dk;
    boolean lb2 = false;
    double ld3 = 840.4785274170829;
    Thought lo4 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo5 = Thought13.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb6 = true;
    bk = dk > dk;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld7 = 623.1663815714708;
        bk = bk && bk;
        on += dk;
        bk = !bk;
        bk = bk || bk;
</cutPoint2985>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2986>
    boolean lb0 = true;
    bk = dk > dk;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        boolean lb1 = true;
        ok = ok.m4(bk, bk, bk, bk);
        ok.m2();
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        Thought lo2 = Thought59.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        double ld3 = 800.2984371565298;
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo4 = Thought16.getInstance(dk, dk, dk, dk);
        bk = dk > dk;
        double ld5 = 497.43575179071416;
        }
</cutPoint2986>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2987>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
    bk = dk < dk;
    bk = ok.m2();
    dk = dk - dk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb0 = true;
    bk = dk < dk;
    double ld1 = 37.86479625613299;
    dk *= -1;
    on += dk;
</cutPoint2987>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2988>
    dk = dk + dk;
    boolean lb0 = false;
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 107.82571394270055;
    on -= dk;
    ok = ok.m4();
    dk *= -1;
    dk *= -1;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2988>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2989>
    boolean lb0 = true;
    Thought lo1 = Thought14.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
</cutPoint2989>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2990>
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    ok.m3();
    dk = dk - dk;
    double ld0 = 137.94634023137044;
    bk = bk && bk;
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb2 = false;
    ok.m3(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
    boolean lb4 = false;
    boolean lb5 = true;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2990>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2991>
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    boolean lb0 = true;
    bk = bk && bk;
</cutPoint2991>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2992>
    double ld0 = 596.5478834090621;
    double ld1 = 901.5092271564279;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    double ld2 = 612.3031851223778;
    dk *= -1;
    double ld3 = 916.9236187505117;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4();
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2992>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2993>
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk *= -1;
    boolean lb2 = true;
    ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    Thought lo3 = Thought0.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk < dk;
</cutPoint2993>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2994>
    boolean lb0 = false;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    bk = bk && bk;
    double ld1 = 779.1298037803482;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    boolean lb3 = true;
    bk = !bk;
    bk = bk && bk;
    Thought lo4 = Thought49.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb5 = false;
    boolean lb6 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint2994>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2995>
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo0 = Thought38.getInstance(ok, ok, ok, ok);
    dk *= -1;
    dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb2 = false;
    boolean lb3 = false;
    dk = dk - dk;
    bk = dk > dk;
    Thought lo4 = Thought65.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo5 = Thought88.getInstance();
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    if (bk) {
</cutPoint2995>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2996>
    bk = dk > dk;
    bk = dk < dk;
    boolean lb0 = false;
    ok.m2(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld1 = 764.6282696733479;
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk || bk;
        bk = dk > dk;
        for(int j=0; j<10; j++){
            double ld2 = 821.0281450336107;
            bk = !bk;
            ok.m2();
</cutPoint2996>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2997>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk && bk;
    on += dk;
    dk = dk + dk;
    on += dk;
    bk = bk && bk;
    double ld1 = 467.3890064540279;
        bk = bk && bk;
    dk = dk - dk;
</cutPoint2997>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2998>
    boolean lb0 = true;
    on -= dk;
    bk = ok.m2();
    boolean lb1 = false;
    dk *= -1;
    bk = bk && bk;
    bk = !bk;
    bk = !bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    Thought lo2 = Thought63.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    boolean lb3 = false;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint2998>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint2999>
    bk = bk || bk;
    bk = bk && bk;
        dk *= -1;
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    double ld0 = 675.4427095355768;
    dk = dk + dk;
        bk = bk && bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld1 = 252.63415631275808;
    dk = dk - dk;
    ok.m2(bk, bk, bk, bk);
    ok.m2();
    Thought lo2 = Thought59.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought46.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint2999>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3000>
    on -= dk;
    bk = dk > dk;
    double ld0 = 721.0579049063887;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    bk = !bk;
    bk = bk || bk;
    bk = bk && bk;
    bk = !bk;
    boolean lb2 = true;
    bk = !bk;
    boolean lb3 = false;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    bk = dk > dk;
    bk = dk < dk;
</cutPoint3000>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3001>
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    boolean lb0 = true;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    dk = dk + dk;
    bk = bk && bk;
    boolean lb1 = true;
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
</cutPoint3001>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3002>
    double ld0 = 693.2283909199574;
    bk = dk < dk;
    ok = ok.m4();
    bk = !bk;
    Thought lo1 = Thought30.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld3 = 162.36385741133756;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint3002>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3003>
    dk *= -1;
    bk = !bk;
    Thought lo0 = Thought67.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok);
        dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld2 = 533.0419016670984;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint3003>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3004>
    ok = ok.m4();
        dk *= -1;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = dk > dk;
        dk = dk + dk;
        bk = bk || bk;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
        bk = dk > dk;
        boolean lb0 = false;
        Thought lo1 = Thought63.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = !bk;
        bk = ok.m2(ok, ok, ok, ok);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint3004>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3005>
    bk = bk || bk;
    boolean lb0 = true;
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    bk = !bk;
    dk *= -1;
    Thought lo1 = Thought24.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought67.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    boolean lb3 = false;
    bk = bk || bk;
    dk = dk + dk;
    Thought lo4 = Thought95.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo5 = Thought1.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3005>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3006>
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 517.1310577676309;
    double ld1 = 797.5504869095699;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    dk = dk - dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3006>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3007>
    double ld0 = 562.7139111815867;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk);
    on += dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    Thought lo1 = Thought96.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = bk && bk;
</cutPoint3007>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3008>
    bk = dk > dk;
    bk = dk > dk;
    Thought lo0 = Thought22.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    double ld1 = 588.5929454460761;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo2 = Thought22.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk && bk;
</cutPoint3008>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3009>
    bk = bk && bk;
    boolean lb0 = false;
    bk = !bk;
    dk = dk + dk;
    bk = dk < dk;
    bk = dk < dk;
    double ld1 = 292.9138547310395;
    dk *= -1;
    double ld2 = 623.9332445031457;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb3 = true;
</cutPoint3009>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought86 extends Thought{
private static ArrayList<Thought86> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 590.262628622148;
private double fd1 = 932.2932659891826;
private Thought fo0 = null;
private Thought fo1 = null;
Thought86 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought86 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought86 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought86 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought86 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought86 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought86 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought86 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought86 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought86 instance = new Thought86 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought86 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought86 instance = new Thought86 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought86 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought86 instance = new Thought86 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought86 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought86 instance = new Thought86 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought86 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought86 instance = new Thought86 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought86 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought86 instance = new Thought86 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought86 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought86 instance = new Thought86 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought86 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought86 instance = new Thought86 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3010>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    dk = dk - dk;
    dk = ok.m3();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    double ld1 = 742.7618791742618;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        Thought lo2 = Thought76.getInstance(dk, dk, dk, dk);
        if (bk) {
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            double ld3 = 346.5691408185514;
            bk = bk || bk;
</cutPoint3010>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3011>
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        dk = dk + dk;
        ok.m1();
        if (bk) {
            double ld0 = 763.2966978156011;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb1 = false;
            dk = dk + dk;
            ok.m2(ok, ok, ok, ok);
            dk = dk - dk;
            } else if (bk) {
            on -= dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk - dk;
            bk = bk && bk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            Thought lo2 = Thought23.getInstance(dk, dk, dk, dk);
            Thought lo3 = Thought31.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = dk > dk;
            double ld4 = 722.7687721788623;
</cutPoint3011>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3012>
    dk = dk - dk;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk && bk;
    bk = bk || bk;
    on -= dk;
    dk = dk + dk;
    Thought lo0 = Thought91.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint3012>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3013>
    bk = ok.m2();
    dk = dk - dk;
    bk = bk || bk;
        dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = false;
</cutPoint3013>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3014>
    bk = dk < dk;
    dk = dk + dk;
    boolean lb0 = false;
    bk = bk && bk;
    dk = dk - dk;
    boolean lb1 = false;
    bk = dk < dk;
    Thought lo2 = Thought85.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo3 = Thought43.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = true;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    double ld5 = 934.8308987956647;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
</cutPoint3014>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3015>
    ok = ok.m4();
    Thought lo0 = Thought91.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = dk < dk;
    Thought lo1 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    if (bk) {
        bk = dk > dk;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        double ld2 = 838.2592579038034;
        Thought lo3 = Thought98.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        on -= dk;
        dk = dk + dk;
        bk = dk > dk;
        bk = ok.m2();
        Thought lo4 = Thought26.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld5 = 423.762176698815;
</cutPoint3015>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3016>
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    boolean lb0 = false;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    Thought lo1 = Thought68.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
        dk *= -1;
    ok = ok.m4();
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok);
    double ld3 = 309.37783508637625;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3016>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3017>
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = ok.m2();
        bk = bk || bk;
        for(int j=0; j<10; j++){
            bk = !bk;
            on += dk;
            double ld0 = 687.0057548973768;
            dk *= -1;
            for(int j=0; j<10; j++){
                boolean lb1 = false;
                ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
                dk = dk - dk;
                Thought lo2 = Thought1.getInstance(ok, ok, ok, ok);
</cutPoint3017>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3018>
    dk = dk + dk;
    bk = !bk;
    dk *= -1;
    boolean lb0 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
        boolean lb1 = true;
        dk *= -1;
        dk *= -1;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb2 = true;
        bk = bk && bk;
        dk = dk - dk;
</cutPoint3018>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3019>
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk > dk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb0 = true;
        Thought lo1 = Thought51.getInstance();
        dk = dk - dk;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        on += dk;
        double ld2 = 602.242996890952;
</cutPoint3019>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3020>
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    if (bk) {
        dk *= -1;
        for(int j=0; j<10; j++){
            bk = bk || bk;
</cutPoint3020>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3021>
    boolean lb0 = false;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4();
    on += dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint3021>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3022>
        bk = dk > dk;
    on += dk;
    dk *= -1;
        double ld0 = 271.1496525720747;
        bk = bk && bk;
    bk = dk < dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    double ld1 = 922.7526735626988;
    boolean lb2 = false;
</cutPoint3022>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3023>
    dk = dk - dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo0 = Thought86.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    Thought lo2 = Thought55.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    bk = !bk;
    bk = bk || bk;
    Thought lo3 = Thought0.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint3023>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3024>
    dk *= -1;
    bk = dk > dk;
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    dk *= -1;
    double ld0 = 251.85204449012357;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint3024>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3025>
    bk = !bk;
    Thought lo0 = Thought73.getInstance();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought94.getInstance(dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3025>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3026>
    boolean lb0 = true;
    ok.m2(bk, bk, bk, bk);
    ok.m1();
    bk = dk > dk;
    Thought lo1 = Thought9.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought30.getInstance(dk, dk, dk, dk);
    Thought lo3 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    bk = dk < dk;
    Thought lo4 = Thought47.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    Thought lo5 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    for(int j=0; j<10; j++){
        bk = !bk;
        dk = ok.m3(ok, ok, ok, ok);
        bk = dk < dk;
        dk = dk - dk;
        dk = dk - dk;
</cutPoint3026>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3027>
    dk = dk - dk;
    double ld0 = 45.091151906602505;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = bk || bk;
    bk = bk && bk;
    bk = dk < dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk *= -1;
    boolean lb2 = false;
    Thought lo3 = Thought56.getInstance(bk, bk, bk, bk);
</cutPoint3027>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3028>
    ok.m3();
    dk = dk + dk;
    bk = dk < dk;
    boolean lb0 = true;
    bk = dk < dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok);
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        double ld1 = 978.3840850171845;
        boolean lb2 = true;
        } else if (bk) {
        dk = dk + dk;
        dk *= -1;
        } else {
</cutPoint3028>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3029>
    bk = bk || bk;
        on += dk;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    bk = !bk;
    bk = bk || bk;
        bk = bk || bk;
</cutPoint3029>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3030>
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 57.63753195971975;
    bk = dk < dk;
    on += dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk - dk;
        on -= dk;
        bk = ok.m2(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk && bk;
        dk = dk + dk;
</cutPoint3030>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3031>
    ok.m2();
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought93.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
</cutPoint3031>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3032>
    bk = bk && bk;
    boolean lb0 = false;
    bk = dk > dk;
    dk = dk + dk;
    bk = bk && bk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
        ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = true;
    bk = bk || bk;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb2 = true;
    ok = ok.m4();
    Thought lo3 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo4 = Thought67.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo5 = Thought95.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3032>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3033>
    ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    Thought lo0 = Thought67.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb1 = true;
    boolean lb2 = true;
        dk = dk + dk;
</cutPoint3033>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3034>
    on -= dk;
    double ld0 = 138.5957633213877;
    bk = dk < dk;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld1 = 957.0434368648854;
    Thought lo2 = Thought66.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    boolean lb4 = false;
    bk = dk < dk;
    on += dk;
    boolean lb5 = true;
    bk = bk || bk;
</cutPoint3034>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3035>
    boolean lb0 = true;
    bk = !bk;
    on += dk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld1 = 155.3377811629237;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = dk < dk;
    on -= dk;
    bk = !bk;
    bk = !bk;
    bk = bk || bk;
    bk = !bk;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3035>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3036>
    bk = !bk;
    on += dk;
    ok.m2(ok, ok, ok, ok);
    double ld0 = 478.49508160960727;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    ok.m2(dk, dk, dk, dk);
    dk *= -1;
    Thought lo2 = Thought12.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 322.46815909274204;
    bk = bk && bk;
</cutPoint3036>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3037>
    bk = dk > dk;
    double ld0 = 633.647044229629;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought48.getInstance();
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    Thought lo3 = Thought76.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk *= -1;
    if (bk) {
        bk = !bk;
        dk = dk + dk;
        on -= dk;
        ok.m2(bk, bk, bk, bk);
        dk = dk - dk;
        on += dk;
        boolean lb4 = false;
        bk = dk > dk;
        double ld5 = 272.09158218358897;
        dk = ok.m3();
        bk = bk || bk;
        if (bk) {
            for(int j=0; j<10; j++){
</cutPoint3037>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3038>
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk - dk;
    on -= dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    Thought lo3 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok);
    bk = !bk;
    dk *= -1;
    Thought lo4 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought83.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    double ld6 = 780.464156463718;
</cutPoint3038>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3039>
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    bk = !bk;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    on += dk;
    dk = ok.m3(bk, bk, bk, bk);
    double ld1 = 353.9054209736058;
    boolean lb2 = true;
    on += dk;
    if (bk) {
        bk = bk && bk;
</cutPoint3039>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3040>
    ok = ok.m4();
    dk *= -1;
    on += dk;
    bk = bk && bk;
    Thought lo0 = Thought71.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = bk && bk;
        boolean lb1 = true;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        dk *= -1;
        ok.m2(bk, bk, bk, bk);
        ok = ok.m4();
        double ld2 = 451.8695895161071;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought69.getInstance(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        dk *= -1;
        double ld4 = 515.1622997627294;
</cutPoint3040>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3041>
    double ld0 = 133.45625984067382;
    bk = !bk;
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    bk = bk && bk;
        boolean lb1 = false;
    boolean lb2 = false;
    bk = dk < dk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    Thought lo3 = Thought22.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought82.getInstance(ok, ok, ok, ok);
    boolean lb5 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok.m1(bk, bk, bk, bk);
        boolean lb6 = true;
        }
</cutPoint3041>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3042>
    bk = dk > dk;
    Thought lo0 = Thought81.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought36.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    dk *= -1;
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo2 = Thought90.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 354.0438415510842;
    bk = bk && bk;
</cutPoint3042>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3043>
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    dk = dk - dk;
    double ld1 = 660.7923559088018;
    ok = ok.m4();
    dk = dk + dk;
    Thought lo2 = Thought97.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok.m3();
</cutPoint3043>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3044>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 11.928483901726006;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb3 = false;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    double ld4 = 845.9213868673575;
    bk = !bk;
    boolean lb5 = false;
</cutPoint3044>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought87 extends Thought{
private static ArrayList<Thought87> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 379.6618187475431;
private double fd1 = 48.65991567601049;
private Thought fo0 = null;
private Thought fo1 = null;
Thought87 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought87 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought87 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought87 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought87 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought87 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought87 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought87 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought87 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought87 instance = new Thought87 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought87 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought87 instance = new Thought87 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought87 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought87 instance = new Thought87 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought87 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought87 instance = new Thought87 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought87 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought87 instance = new Thought87 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought87 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought87 instance = new Thought87 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought87 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought87 instance = new Thought87 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought87 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought87 instance = new Thought87 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3045>
    boolean lb0 = true;
    dk = dk + dk;
    if (bk) {
        dk = ok.m3();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        bk = dk < dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        bk = bk || bk;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo1 = Thought60.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3045>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3046>
    double ld0 = 958.8676605652091;
    ok.m1(bk, bk, bk, bk);
    boolean lb1 = false;
    bk = !bk;
    dk = ok.m3();
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo2 = Thought17.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint3046>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3047>
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    bk = !bk;
    ok.m1(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk *= -1;
        bk = dk < dk;
        ok = ok.m4();
        bk = dk < dk;
        bk = bk || bk;
</cutPoint3047>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3048>
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought23.getInstance(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb1 = false;
    Thought lo2 = Thought86.getInstance(dk, dk, dk, dk);
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought2.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    double ld4 = 730.383842245132;
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    double ld6 = 843.9950712844336;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb7 = true;
    double ld8 = 536.6875080164115;
    double ld9 = 18.7308729580176;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3048>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3049>
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    bk = ok.m2(bk, bk, bk, bk);
    double ld0 = 670.0691085351625;
    on -= dk;
    bk = ok.m2();
    on -= dk;
    dk *= -1;
    boolean lb1 = false;
    Thought lo2 = Thought42.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo3 = Thought69.getInstance(dk, dk, dk, dk);
    boolean lb4 = true;
    on += dk;
    Thought lo5 = Thought15.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    ok.m2();
    bk = bk && bk;
    dk = dk - dk;
</cutPoint3049>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3050>
    dk *= -1;
    double ld0 = 217.60189953240027;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = true;
    dk = dk - dk;
    bk = bk || bk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = ok.m3(dk, dk, dk, dk);
        double ld2 = 492.2794900467881;
</cutPoint3050>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3051>
    Thought lo0 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    on += dk;
    Thought lo1 = Thought91.getInstance(bk, bk, bk, bk);
    on -= dk;
        dk = dk + dk;
        dk = dk - dk;
    Thought lo2 = Thought6.getInstance();
    dk = dk - dk;
    Thought lo3 = Thought64.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    boolean lb4 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3051>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3052>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought35.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb1 = true;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = !bk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    boolean lb2 = false;
    if (bk) {
        on -= dk;
        dk = dk + dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        } else if (bk) {
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        dk = ok.m3(bk, bk, bk, bk);
        dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
        dk = dk - dk;
</cutPoint3052>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3053>
    dk *= -1;
    boolean lb0 = true;
    dk = dk + dk;
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    bk = bk && bk;
    double ld1 = 399.0338158160241;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    Thought lo2 = Thought70.getInstance();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    dk = dk + dk;
    dk = dk - dk;
    if (bk) {
        dk *= -1;
        bk = !bk;
        dk *= -1;
        Thought lo3 = Thought58.getInstance(ok, ok, ok, ok);
        bk = bk || bk;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3053>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3054>
        bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3054>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3055>
    bk = bk && bk;
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m2(dk, dk, dk, dk);
        bk = bk && bk;
        double ld0 = 654.258335957988;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb1 = true;
        bk = bk && bk;
        ok = ok.m4();
        } else {
</cutPoint3055>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3056>
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    bk = !bk;
    bk = dk < dk;
        boolean lb0 = true;
    on += dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    double ld1 = 782.9397984616538;
    double ld2 = 281.3814675475285;
    boolean lb3 = true;
    boolean lb4 = true;
    boolean lb5 = false;
    on -= dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint3056>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3057>
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought97.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo1 = Thought8.getInstance(bk, bk, bk, bk);
    Thought lo2 = Thought79.getInstance();
    dk = dk - dk;
    Thought lo3 = Thought87.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint3057>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3058>
    bk = dk > dk;
    on -= dk;
    boolean lb0 = true;
    ok.m1();
    bk = bk && bk;
    boolean lb1 = true;
    bk = bk && bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok);
    on += dk;
    bk = !bk;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 994.6171425784527;
    bk = dk > dk;
    on += dk;
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    dk = dk - dk;
    double ld3 = 725.435645413711;
    Thought lo4 = Thought43.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3058>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3059>
    dk *= -1;
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    double ld0 = 393.0192588023744;
    dk = dk - dk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    Thought lo4 = Thought45.getInstance(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
    double ld5 = 189.2477361562248;
    ok.m1();
    boolean lb6 = true;
    bk = bk || bk;
    Thought lo7 = Thought26.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo8 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3059>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3060>
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        dk = ok.m3(bk, bk, bk, bk);
        bk = !bk;
        ok = ok.m4();
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        boolean lb0 = true;
        boolean lb1 = false;
        boolean lb2 = false;
        Thought lo3 = Thought47.getInstance(ok, ok, ok, ok);
        Thought lo4 = Thought6.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        } else {
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3060>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3061>
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk + dk;
    boolean lb1 = true;
    bk = dk > dk;
    ok.m2(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = true;
    boolean lb5 = false;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint3061>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3062>
    bk = dk > dk;
    boolean lb0 = true;
    boolean lb1 = true;
        on -= dk;
    dk = dk + dk;
    if (bk) {
        dk = dk + dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
</cutPoint3062>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3063>
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        boolean lb0 = true;
        ok.m3();
        bk = dk > dk;
        boolean lb1 = true;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        boolean lb2 = true;
        ok = ok.m4(ok, ok, ok, ok);
        dk *= -1;
        double ld3 = 315.2578593083181;
        dk = dk + dk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        bk = !bk;
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb4 = false;
        on += dk;
        Thought lo5 = Thought80.getInstance();
        bk = bk && bk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3063>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3064>
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo0 = Thought72.getInstance(bk, bk, bk, bk);
    double ld1 = 211.6701153313108;
    ok = ok.m4();
    dk *= -1;
            on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought23.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
    dk = dk + dk;
</cutPoint3064>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3065>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    on += dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
        boolean lb1 = true;
    bk = bk && bk;
    double ld2 = 733.7959597379803;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3065>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3066>
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = false;
    Thought lo1 = Thought95.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    double ld3 = 73.14388205544543;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb4 = false;
    bk = bk || bk;
    ok = ok.m4();
    dk *= -1;
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld5 = 721.6173666698776;
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint3066>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3067>
    dk = dk + dk;
    boolean lb0 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = ok.m2(bk, bk, bk, bk);
        dk = dk + dk;
        bk = bk || bk;
        bk = bk || bk;
        bk = dk > dk;
        boolean lb1 = false;
        boolean lb2 = true;
</cutPoint3067>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3068>
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    double ld0 = 774.1392750882524;
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb1 = true;
    bk = !bk;
    ok.m2();
    Thought lo2 = Thought63.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    dk *= -1;
</cutPoint3068>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3069>
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok);
    dk = dk - dk;
    Thought lo0 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    dk *= -1;
    double ld1 = 545.2904144559923;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 800.5396064943053;
    on -= dk;
    Thought lo3 = Thought99.getInstance(bk, bk, bk, bk);
    dk *= -1;
    ok.m2();
    Thought lo4 = Thought36.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    Thought lo5 = Thought57.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
        dk = dk + dk;
    bk = dk < dk;
    boolean lb6 = true;
    bk = !bk;
    boolean lb7 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3069>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3070>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on += dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = !bk;
    Thought lo0 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
        bk = bk || bk;
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
</cutPoint3070>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3071>
    ok.m2(ok, ok, ok, ok);
    double ld0 = 256.2478399615723;
    if (bk) {
        on += dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
        Thought lo1 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        boolean lb2 = false;
        bk = dk > dk;
        dk = dk - dk;
        double ld3 = 343.88406290610817;
        on -= dk;
        double ld4 = 876.2341861627101;
</cutPoint3071>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3072>
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = true;
    bk = !bk;
    double ld2 = 679.44914137694;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    if (bk) {
        bk = dk < dk;
        bk = !bk;
        dk = dk + dk;
        dk = dk + dk;
        bk = dk > dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        if (bk) {
            bk = dk > dk;
            dk = ok.m3(dk, dk, dk, dk);
</cutPoint3072>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3073>
        bk = dk > dk;
    Thought lo0 = Thought18.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    double ld1 = 631.5152708170574;
    Thought lo2 = Thought99.getInstance();
    boolean lb3 = false;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    Thought lo4 = Thought1.getInstance();
</cutPoint3073>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3074>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought8.getInstance(ok, ok, ok, ok);
    boolean lb1 = false;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    on -= dk;
    bk = !bk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint3074>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3075>
    dk *= -1;
    boolean lb0 = false;
    ok = ok.m4();
    bk = !bk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
    Thought lo1 = Thought26.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    if (bk) {
        bk = dk < dk;
        bk = dk < dk;
        bk = dk > dk;
</cutPoint3075>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3076>
    dk *= -1;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought80.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    bk = !bk;
    bk = dk < dk;
    bk = bk && bk;
    double ld1 = 25.727813528246816;
    dk = ok.m3();
    bk = dk > dk;
</cutPoint3076>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3077>
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought55.getInstance(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = false;
    dk = dk - dk;
    bk = !bk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    on += dk;
    boolean lb2 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = false;
</cutPoint3077>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3078>
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = false;
    ok = ok.m4();
    bk = dk > dk;
    bk = bk && bk;
    Thought lo1 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought62.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    double ld4 = 810.4269025271333;
    bk = dk > dk;
    dk = dk - dk;
    boolean lb5 = true;
</cutPoint3078>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3079>
    double ld0 = 929.6320681671122;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 158.9379545470804;
        dk *= -1;
            ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    dk *= -1;
    on -= dk;
    dk = dk - dk;
    bk = dk < dk;
    boolean lb2 = true;
    ok = ok.m4();
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3079>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought88 extends Thought{
private static ArrayList<Thought88> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 524.7183227938074;
private double fd1 = 38.197663495710465;
private Thought fo0 = null;
private Thought fo1 = null;
Thought88 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought88 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought88 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought88 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought88 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought88 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought88 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought88 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought88 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought88 instance = new Thought88 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought88 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought88 instance = new Thought88 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought88 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought88 instance = new Thought88 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought88 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought88 instance = new Thought88 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought88 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought88 instance = new Thought88 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought88 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought88 instance = new Thought88 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought88 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought88 instance = new Thought88 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought88 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought88 instance = new Thought88 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3080>
    bk = bk && bk;
    Thought lo0 = Thought95.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    </cutPoint3080>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3081>
    boolean lb0 = false;
    dk = dk + dk;
    Thought lo1 = Thought35.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = !bk;
    bk = !bk;
    bk = bk && bk;
    bk = !bk;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo2 = Thought57.getInstance(dk, dk, dk, dk);
    Thought lo3 = Thought91.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb4 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    boolean lb5 = false;
    bk = bk && bk;
    ok = ok.m4();
    bk = dk > dk;
</cutPoint3081>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3082>
            boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok.m1(dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb1 = false;
    dk = dk + dk;
    dk = dk - dk;
</cutPoint3082>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3083>
    dk *= -1;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought38.getInstance(bk, bk, bk, bk);
    double ld1 = 365.6998565331354;
    bk = !bk;
    on += dk;
    boolean lb2 = true;
    on -= dk;
    bk = bk && bk;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 601.4775209150891;
    double ld4 = 789.0549874599402;
    Thought lo5 = Thought94.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3083>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3084>
    dk = dk - dk;
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    bk = dk > dk;
    dk = dk - dk;
    bk = dk < dk;
    bk = bk && bk;
    if (bk) {
        dk = dk - dk;
        bk = bk && bk;
        Thought lo0 = Thought81.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint3084>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3085>
    dk = dk + dk;
    bk = bk && bk;
    dk = dk + dk;
    bk = bk || bk;
    Thought lo0 = Thought87.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    on -= dk;
    bk = dk > dk;
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    for(int j=0; j<10; j++){
        on -= dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo1 = Thought71.getInstance(ok, ok, ok, ok);
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought85.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        on += dk;
        Thought lo3 = Thought8.getInstance(dk, dk, dk, dk);
        bk = dk < dk;
        }
</cutPoint3085>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3086>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
        Thought lo0 = Thought23.getInstance(bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok);
    Thought lo1 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb2 = false;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
        bk = bk && bk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2();
</cutPoint3086>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3087>
    dk = dk + dk;
    Thought lo0 = Thought61.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    on += dk;
    bk = ok.m2(ok, ok, ok, ok);
    on -= dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = dk + dk;
    double ld2 = 4.0233844949733095;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    boolean lb3 = true;
    on += dk;
    double ld4 = 613.825666675494;
    boolean lb5 = false;
    dk *= -1;
    bk = dk > dk;
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3087>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3088>
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    dk = dk - dk;
    dk *= -1;
    bk = ok.m2();
    if (bk) {
        on += dk;
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        } else if (bk) {
        bk = dk < dk;
        on -= dk;
        bk = dk < dk;
        Thought lo0 = Thought35.getInstance(ok, ok, ok, ok);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint3088>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3089>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought91.getInstance();
    boolean lb1 = false;
    bk = bk && bk;
    boolean lb2 = false;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    Thought lo3 = Thought16.getInstance(ok, ok, ok, ok);
    boolean lb4 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on -= dk;
    dk = dk + dk;
    double ld5 = 1.6179977681013193;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo6 = Thought91.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
</cutPoint3089>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3090>
    ok = ok.m4();
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld0 = 299.54396883818026;
        bk = bk || bk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok);
        }
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint3090>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3091>
    boolean lb0 = true;
        bk = dk > dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    Thought lo2 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb3 = false;
    Thought lo4 = Thought27.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    double ld5 = 664.7197608890314;
    on += dk;
</cutPoint3091>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3092>
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo0 = Thought23.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    if (bk) {
        bk = dk > dk;
        } else if (bk) {
</cutPoint3092>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3093>
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = !bk;
    bk = dk > dk;
        dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    bk = dk > dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought57.getInstance();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    Thought lo2 = Thought39.getInstance(ok, ok, ok, ok);
    boolean lb3 = true;
    bk = dk < dk;
    double ld4 = 331.08951741900347;
    Thought lo5 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo6 = Thought47.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
</cutPoint3093>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3094>
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    bk = dk > dk;
    dk = dk + dk;
    Thought lo0 = Thought62.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought73.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 933.3413994435954;
    on += dk;
    ok.m2(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    Thought lo3 = Thought22.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    boolean lb4 = true;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3094>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3095>
    on -= dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    on -= dk;
    boolean lb0 = true;
    dk = dk - dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2();
    double ld1 = 302.140271513617;
    Thought lo2 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = false;
    bk = !bk;
    Thought lo4 = Thought29.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    if (bk) {
        double ld5 = 709.4197750497653;
        double ld6 = 471.86796819927747;
        ok.m1();
</cutPoint3095>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3096>
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 788.1815021760121;
    on += dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 184.024347017968;
    boolean lb2 = true;
    dk = dk + dk;
    Thought lo3 = Thought93.getInstance(dk, dk, dk, dk);
    boolean lb4 = true;
</cutPoint3096>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3097>
    boolean lb0 = false;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought45.getInstance(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        ok = ok.m4();
        bk = bk || bk;
        bk = bk || bk;
        Thought lo2 = Thought9.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        }
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb3 = true;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 169.97652654264073;
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
</cutPoint3097>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3098>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = !bk;
    Thought lo0 = Thought60.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    double ld1 = 52.86175466948025;
    bk = bk && bk;
    Thought lo2 = Thought34.getInstance();
    bk = bk || bk;
    bk = dk < dk;
    double ld3 = 76.14813129108786;
    dk = dk - dk;
    Thought lo4 = Thought6.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3098>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3099>
    dk *= -1;
    boolean lb0 = true;
    on -= dk;
    boolean lb1 = true;
    Thought lo2 = Thought56.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    ok.m1(dk, dk, dk, dk);
    double ld4 = 273.09733663305235;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo5 = Thought16.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo6 = Thought5.getInstance(bk, bk, bk, bk);
    bk = bk || bk;
    on += dk;
    boolean lb7 = true;
    dk *= -1;
    ok.m2();
    boolean lb8 = true;
    dk = dk + dk;
</cutPoint3099>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3100>
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    boolean lb0 = true;
    boolean lb1 = true;
    bk = dk < dk;
    Thought lo2 = Thought68.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought51.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    on += dk;
    bk = bk && bk;
    bk = bk || bk;
    Thought lo4 = Thought0.getInstance();
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
</cutPoint3100>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3101>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    on -= dk;
    bk = !bk;
    dk = dk + dk;
        double ld0 = 131.47562198413786;
    bk = bk && bk;
    boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    boolean lb3 = true;
    Thought lo4 = Thought6.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    bk = dk < dk;
    double ld5 = 396.6541289708529;
    bk = bk || bk;
    ok.m1();
    double ld6 = 91.97733097369286;
</cutPoint3101>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3102>
    boolean lb0 = false;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought20.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    bk = !bk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    double ld2 = 677.8186213258045;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3();
    on -= dk;
    Thought lo3 = Thought72.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok);
    on -= dk;
</cutPoint3102>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3103>
    Thought lo0 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 256.07780966108965;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 409.04005561832616;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    </cutPoint3103>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3104>
    double ld0 = 398.1123355155744;
    bk = bk || bk;
    boolean lb1 = true;
    boolean lb2 = false;
    dk = dk - dk;
    bk = dk > dk;
    boolean lb3 = false;
    double ld4 = 448.80524621506964;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought48.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb6 = true;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld7 = 618.157579998141;
</cutPoint3104>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3105>
    dk = ok.m3(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        boolean lb0 = true;
    Thought lo1 = Thought89.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb2 = true;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought84.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    on += dk;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo4 = Thought9.getInstance(ok, ok, ok, ok);
</cutPoint3105>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3106>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    boolean lb1 = false;
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint3106>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3107>
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 664.9483308259142;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    dk = dk + dk;
    dk = dk - dk;
    boolean lb1 = true;
    Thought lo2 = Thought25.getInstance();
    boolean lb3 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo4 = Thought27.getInstance(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3107>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3108>
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    dk *= -1;
    bk = dk < dk;
    bk = dk < dk;
    bk = bk || bk;
    boolean lb0 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = ok.m3(bk, bk, bk, bk);
    double ld2 = 197.29228702448322;
    bk = bk || bk;
    ok = ok.m4();
    bk = dk < dk;
    dk = dk - dk;
    dk = dk + dk;
    double ld3 = 97.71287520372185;
</cutPoint3108>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3109>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk *= -1;
    Thought lo0 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
        double ld1 = 550.510228573477;
    bk = bk && bk;
    double ld2 = 208.16550660912065;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb3 = false;
</cutPoint3109>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3110>
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = bk || bk;
    boolean lb0 = false;
    Thought lo1 = Thought95.getInstance(ok, ok, ok, ok);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    Thought lo2 = Thought0.getInstance();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    on += dk;
    ok.m3(dk, dk, dk, dk);
    Thought lo4 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = false;
</cutPoint3110>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3111>
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    boolean lb0 = true;
    bk = ok.m2(bk, bk, bk, bk);
    double ld1 = 502.33545103714204;
    boolean lb2 = false;
    bk = dk > dk;
    double ld3 = 351.22006292418735;
    ok.m3();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = true;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint3111>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3112>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
            bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb0 = true;
    double ld1 = 640.2689700975503;
    dk = dk + dk;
    boolean lb2 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk < dk;
    Thought lo3 = Thought4.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    double ld4 = 777.7104360080484;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo5 = Thought63.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
</cutPoint3112>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3113>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    double ld0 = 20.127545153057632;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 72.69298928294393;
    dk = ok.m3(ok, ok, ok, ok);
    boolean lb2 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    Thought lo3 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 417.84386615895534;
    ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk - dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    </cutPoint3113>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3114>
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo0 = Thought54.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 339.05756331668044;
    Thought lo2 = Thought40.getInstance(bk, bk, bk, bk);
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought77.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought88.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    bk = dk < dk;
    double ld5 = 979.8295002515262;
    double ld6 = 975.1388512336396;
    boolean lb7 = false;
</cutPoint3114>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought89 extends Thought{
private static ArrayList<Thought89> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 829.0050069354572;
private double fd1 = 375.88039262264243;
private Thought fo0 = null;
private Thought fo1 = null;
Thought89 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought89 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought89 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought89 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought89 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought89 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought89 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought89 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought89 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought89 instance = new Thought89 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought89 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought89 instance = new Thought89 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought89 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought89 instance = new Thought89 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought89 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought89 instance = new Thought89 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought89 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought89 instance = new Thought89 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought89 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought89 instance = new Thought89 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought89 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought89 instance = new Thought89 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought89 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought89 instance = new Thought89 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3115>
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = false;
    boolean lb1 = true;
    dk = dk + dk;
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    double ld2 = 905.9139524415406;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 540.5972704751541;
    on += dk;
    dk = dk + dk;
    bk = dk < dk;
    for(int j=0; j<10; j++){
        bk = ok.m2(bk, bk, bk, bk);
        dk = ok.m3();
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk > dk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        bk = dk < dk;
        dk = dk - dk;
        bk = dk > dk;
</cutPoint3115>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3116>
    dk = dk + dk;
    bk = dk > dk;
    ok.m3(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = bk && bk;
        bk = bk || bk;
        boolean lb0 = false;
        ok.m2();
        double ld1 = 29.995580680628063;
        boolean lb2 = true;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        for(int j=0; j<10; j++){
            ok = ok.m4(ok, ok, ok, ok);
            ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3116>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3117>
    Thought lo0 = Thought2.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    dk = dk + dk;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 246.84289906995;
</cutPoint3117>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3118>
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought7.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought58.getInstance(bk, bk, bk, bk);
    double ld2 = 514.9568718400113;
    bk = bk || bk;
    bk = dk > dk;
    on += dk;
    ok = ok.m4();
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 392.2045809338977;
    double ld4 = 400.4161040114126;
</cutPoint3118>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3119>
        dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    on -= dk;
    bk = bk || bk;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo0 = Thought78.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        ok = ok.m4();
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = true;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3119>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3120>
    dk = dk - dk;
    Thought lo0 = Thought83.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    on -= dk;
    bk = bk || bk;
    bk = bk || bk;
    bk = bk && bk;
    bk = !bk;
    bk = bk || bk;
    double ld1 = 209.41880773446456;
    bk = bk || bk;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    Thought lo3 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    bk = !bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint3120>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3121>
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 3.167159025215348;
    bk = bk || bk;
    dk = ok.m3();
    on += dk;
    dk = dk - dk;
    dk = dk - dk;
    boolean lb1 = true;
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 664.720493768097;
    double ld3 = 152.67220194010858;
    dk = dk - dk;
    boolean lb4 = false;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = false;
    Thought lo6 = Thought45.getInstance(dk, dk, dk, dk);
    bk = !bk;
    double ld7 = 855.6259304014209;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3121>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3122>
    boolean lb0 = false;
    dk *= -1;
    bk = bk && bk;
    Thought lo1 = Thought48.getInstance(bk, bk, bk, bk);
        ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    bk = dk < dk;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb2 = true;
    bk = !bk;
    Thought lo3 = Thought13.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3122>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3123>
    Thought lo0 = Thought42.getInstance(bk, bk, bk, bk);
    Thought lo1 = Thought29.getInstance();
    bk = bk || bk;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb2 = false;
    dk = dk - dk;
    if (bk) {
        dk *= -1;
        dk *= -1;
        Thought lo3 = Thought25.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        dk = dk - dk;
</cutPoint3123>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3124>
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb1 = true;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = true;
    double ld3 = 448.8372636400826;
    on += dk;
    boolean lb4 = true;
    dk *= -1;
    boolean lb5 = true;
    bk = dk > dk;
    ok.m3();
    dk = dk + dk;
    on += dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo6 = Thought71.getInstance(dk, dk, dk, dk);
        on += dk;
    dk = dk + dk;
    boolean lb7 = false;
</cutPoint3124>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3125>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    double ld0 = 724.0543568319996;
    bk = dk < dk;
    dk = dk + dk;
    dk = dk - dk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        Thought lo1 = Thought85.getInstance();
</cutPoint3125>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3126>
    double ld0 = 382.85981316152424;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb2 = false;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    double ld3 = 401.1902856608639;
    double ld4 = 799.8582910574527;
    bk = dk > dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 281.5142969567298;
    bk = !bk;
        double ld6 = 358.96758268990624;
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3126>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3127>
    bk = !bk;
    dk *= -1;
    dk = dk + dk;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 911.2674706245355;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = ok.m2(dk, dk, dk, dk);
        bk = bk || bk;
        Thought lo1 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        dk = dk + dk;
        bk = !bk;
        boolean lb2 = true;
        for(int j=0; j<10; j++){
            ok.m1(bk, bk, bk, bk);
            bk = bk || bk;
            bk = bk && bk;
            ok = ok.m4();
            dk *= -1;
            bk = bk || bk;
            bk = dk < dk;
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3127>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3128>
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    dk = dk + dk;
    dk = dk + dk;
    Thought lo1 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought24.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    double ld3 = 531.1012199100667;
    on -= dk;
    bk = !bk;
    boolean lb4 = false;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint3128>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3129>
    double ld0 = 847.5517867582641;
    bk = !bk;
    dk *= -1;
    boolean lb1 = true;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    boolean lb2 = true;
    boolean lb3 = false;
    bk = ok.m2();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
        Thought lo4 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    double ld5 = 804.6504414258366;
</cutPoint3129>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3130>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 563.2561651725174;
    bk = dk > dk;
    Thought lo1 = Thought84.getInstance();
    double ld2 = 37.0418406691188;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint3130>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3131>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb0 = false;
    dk = dk - dk;
    dk = dk + dk;
    on -= dk;
    double ld1 = 568.3469436215007;
    dk *= -1;
    double ld2 = 800.9231395972456;
    bk = dk > dk;
    bk = !bk;
    dk = dk + dk;
    bk = dk < dk;
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    for(int j=0; j<10; j++){
        boolean lb3 = true;
        bk = !bk;
        dk *= -1;
        boolean lb4 = false;
        dk = dk - dk;
        boolean lb5 = true;
        bk = bk && bk;
</cutPoint3131>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3132>
    bk = !bk;
    bk = !bk;
    bk = bk && bk;
    bk = bk || bk;
    on += dk;
    dk = ok.m3();
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    bk = dk < dk;
    double ld1 = 356.1013352826014;
    ok.m3(dk, dk, dk, dk);
    boolean lb2 = false;
    bk = bk && bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    Thought lo3 = Thought7.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    bk = !bk;
</cutPoint3132>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3133>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    if (bk) {
        Thought lo0 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk + dk;
        dk = dk + dk;
        bk = bk && bk;
        if (bk) {
            on -= dk;
            dk = ok.m3();
            for(int j=0; j<10; j++){
                dk *= -1;
                }
            double ld1 = 538.1474947409198;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            } else {
            if (bk) {
</cutPoint3133>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3134>
    bk = !bk;
    bk = bk || bk;
    double ld0 = 666.9223711641969;
    Thought lo1 = Thought62.getInstance(ok, ok, ok, ok);
    Thought lo2 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought39.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    double ld4 = 16.610792427962913;
    Thought lo5 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb6 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    Thought lo7 = Thought51.getInstance(dk, dk, dk, dk);
</cutPoint3134>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3135>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    bk = ok.m2();
    boolean lb0 = true;
    dk = dk - dk;
        boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb2 = true;
    Thought lo3 = Thought59.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk < dk;
    Thought lo4 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    boolean lb6 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3135>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3136>
    boolean lb0 = false;
    boolean lb1 = false;
    dk = dk + dk;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    for(int j=0; j<10; j++){
        dk *= -1;
        double ld2 = 201.12958812132553;
        }
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
</cutPoint3136>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3137>
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
    ok.m1(dk, dk, dk, dk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    double ld0 = 164.94763690173636;
        bk = bk || bk;
    boolean lb1 = false;
    dk *= -1;
    for(int j=0; j<10; j++){
        boolean lb2 = false;
        ok.m3(bk, bk, bk, bk);
        on -= dk;
        bk = !bk;
        }
</cutPoint3137>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3138>
    dk = dk - dk;
    dk = ok.m3();
    dk = dk - dk;
    double ld0 = 83.08154399808882;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = false;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        double ld2 = 929.1700152835614;
        bk = bk && bk;
        dk = dk + dk;
        Thought lo3 = Thought90.getInstance(ok, ok, ok, ok);
        bk = dk > dk;
        on += dk;
        dk *= -1;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = !bk;
        bk = dk > dk;
</cutPoint3138>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3139>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    on += dk;
    Thought lo0 = Thought4.getInstance();
    bk = !bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint3139>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3140>
    on -= dk;
    dk = dk + dk;
    dk = dk + dk;
    on += dk;
        dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    double ld0 = 656.0670205987783;
    on -= dk;
    double ld1 = 429.36302982816414;
    bk = dk > dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint3140>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3141>
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought69.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
        ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought55.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld2 = 263.90220748236163;
        boolean lb3 = true;
        on += dk;
        for(int j=0; j<10; j++){
            ok = ok.m4(dk, dk, dk, dk);
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3141>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3142>
    Thought lo0 = Thought2.getInstance(bk, bk, bk, bk);
        bk = dk > dk;
    Thought lo1 = Thought55.getInstance();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    on -= dk;
    Thought lo3 = Thought97.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk || bk;
    bk = dk > dk;
    dk = dk + dk;
    bk = !bk;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3142>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3143>
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = ok.m2();
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    dk = dk - dk;
    double ld0 = 739.1414268671002;
    bk = !bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld2 = 385.20783578672143;
    double ld3 = 128.78241486692198;
</cutPoint3143>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3144>
    dk *= -1;
    bk = bk && bk;
    bk = bk || bk;
    boolean lb0 = true;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    Thought lo1 = Thought61.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 563.3559283448782;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    dk = dk - dk;
</cutPoint3144>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3145>
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    double ld0 = 200.03515604230387;
    bk = dk > dk;
    double ld1 = 926.4509056619007;
    Thought lo2 = Thought73.getInstance();
    boolean lb3 = true;
    bk = bk && bk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    bk = bk || bk;
        bk = !bk;
    boolean lb4 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    on += dk;
    double ld5 = 731.7504083886543;
</cutPoint3145>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3146>
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    boolean lb0 = false;
    double ld1 = 662.3501423591356;
    ok = ok.m4();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    dk = dk - dk;
</cutPoint3146>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3147>
    bk = !bk;
    bk = bk && bk;
    bk = dk > dk;
    bk = dk < dk;
    Thought lo0 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk);
    double ld1 = 715.6851197162633;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    boolean lb2 = false;
    dk = ok.m3(bk, bk, bk, bk);
        boolean lb3 = false;
    dk = ok.m3();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
    bk = dk > dk;
    double ld5 = 716.6511495126491;
    double ld6 = 361.35246135475205;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3147>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3148>
    boolean lb0 = true;
    Thought lo1 = Thought11.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk - dk;
    Thought lo2 = Thought12.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    on -= dk;
    dk *= -1;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo3 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought34.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    boolean lb5 = true;
    on += dk;
    bk = dk < dk;
    bk = bk && bk;
    Thought lo6 = Thought0.getInstance(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3148>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3149>
    bk = dk > dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4();
    bk = dk < dk;
    dk *= -1;
    on -= dk;
    dk = dk - dk;
    double ld1 = 630.6241551122979;
    bk = !bk;
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo2 = Thought91.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    boolean lb3 = true;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = !bk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint3149>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought90 extends Thought{
private static ArrayList<Thought90> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 29.30020074379692;
private double fd1 = 601.0159486247973;
private Thought fo0 = null;
private Thought fo1 = null;
Thought90 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought90 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought90 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought90 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought90 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought90 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought90 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought90 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought90 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought90 instance = new Thought90 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought90 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought90 instance = new Thought90 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought90 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought90 instance = new Thought90 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought90 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought90 instance = new Thought90 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought90 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought90 instance = new Thought90 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought90 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought90 instance = new Thought90 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought90 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought90 instance = new Thought90 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought90 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought90 instance = new Thought90 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3150>
    boolean lb0 = true;
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    if (bk) {
        dk *= -1;
        bk = bk && bk;
        bk = !bk;
        boolean lb1 = true;
        ok = ok.m4();
        on += dk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        } else if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = !bk;
        dk = dk - dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
        dk *= -1;
        bk = dk > dk;
</cutPoint3150>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3151>
    Thought lo0 = Thought71.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = ok.m2();
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld1 = 107.12932984591454;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        boolean lb2 = false;
        Thought lo3 = Thought65.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
        ok.m3(dk, dk, dk, dk);
        bk = dk > dk;
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        dk = dk - dk;
        Thought lo4 = Thought74.getInstance(bk, bk, bk, bk);
</cutPoint3151>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3152>
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok);
    Thought lo0 = Thought41.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb1 = false;
    dk = dk - dk;
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
        bk = bk && bk;
    bk = bk || bk;
    on += dk;
    double ld2 = 4.744652437630855;
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    Thought lo3 = Thought9.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 541.2726573388335;
    Thought lo5 = Thought22.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
</cutPoint3152>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3153>
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 326.1549772311895;
    ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought65.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 532.0907217773372;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought65.getInstance(ok, ok, ok, ok);
    boolean lb5 = false;
    bk = !bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    bk = dk < dk;
    double ld6 = 917.8831882470306;
    Thought lo7 = Thought5.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo8 = Thought88.getInstance(dk, dk, dk, dk);
    Thought lo9 = Thought7.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
</cutPoint3153>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3154>
    bk = ok.m2(bk, bk, bk, bk);
    ok.m1();
    bk = bk && bk;
    boolean lb0 = false;
    dk *= -1;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought25.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
    Thought lo2 = Thought58.getInstance(dk, dk, dk, dk);
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo4 = Thought13.getInstance();
    for(int j=0; j<10; j++){
        dk *= -1;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo5 = Thought46.getInstance(ok, ok, ok, ok);
        boolean lb6 = false;
        Thought lo7 = Thought44.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
</cutPoint3154>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3155>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = false;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    Thought lo2 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 893.4513754136659;
    dk *= -1;
    bk = dk < dk;
</cutPoint3155>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3156>
    bk = dk < dk;
    dk = dk + dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    Thought lo0 = Thought79.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = true;
    Thought lo2 = Thought18.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3156>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3157>
    double ld0 = 824.8647023114364;
    double ld1 = 387.48343896578314;
    dk = dk + dk;
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo2 = Thought4.getInstance();
    Thought lo3 = Thought40.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought79.getInstance(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo5 = Thought61.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo6 = Thought89.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2();
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo7 = Thought26.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb8 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3157>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3158>
    Thought lo0 = Thought99.getInstance(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought68.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    dk *= -1;
</cutPoint3158>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3159>
        bk = bk && bk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo0 = Thought19.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought52.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk > dk;
    bk = !bk;
    if (bk) {
        dk *= -1;
</cutPoint3159>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3160>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought7.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = false;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    bk = !bk;
    bk = dk > dk;
    Thought lo2 = Thought85.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
            ok.m1(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3160>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3161>
        Thought lo0 = Thought78.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    dk *= -1;
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    dk *= -1;
    boolean lb1 = false;
    dk = dk - dk;
    on -= dk;
    for(int j=0; j<10; j++){
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought4.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3161>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3162>
    ok = ok.m4(dk, dk, dk, dk);
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    double ld0 = 221.76725076748664;
    bk = !bk;
    boolean lb1 = true;
    boolean lb2 = true;
    dk = dk - dk;
    bk = dk < dk;
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo3 = Thought98.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    Thought lo4 = Thought4.getInstance(ok, ok, ok, ok);
    dk = dk - dk;
    Thought lo5 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
    dk = dk + dk;
    boolean lb6 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
</cutPoint3162>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3163>
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought58.getInstance(bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4();
    double ld1 = 137.76982491174752;
    bk = bk && bk;
    bk = bk && bk;
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb2 = false;
    boolean lb3 = true;
    dk = ok.m3(ok, ok, ok, ok);
</cutPoint3163>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3164>
    bk = bk && bk;
    bk = dk > dk;
    dk *= -1;
    for(int j=0; j<10; j++){
        dk = dk - dk;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = true;
        bk = dk > dk;
        dk = dk - dk;
        dk *= -1;
        on -= dk;
        bk = !bk;
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        Thought lo1 = Thought60.getInstance(dk, dk, dk, dk);
        bk = dk > dk;
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3164>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3165>
    dk = dk + dk;
    bk = !bk;
    double ld0 = 329.09164425171616;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    boolean lb1 = true;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought28.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint3165>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3166>
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb0 = true;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    bk = dk < dk;
    bk = bk && bk;
    dk = dk - dk;
    dk = dk - dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    dk *= -1;
</cutPoint3166>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3167>
    bk = dk > dk;
    boolean lb0 = true;
    dk = ok.m3();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok);
    Thought lo1 = Thought96.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo2 = Thought34.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb3 = true;
    bk = bk && bk;
    on += dk;
    double ld4 = 533.853558800951;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2();
    bk = !bk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint3167>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3168>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 845.2151748935408;
    double ld1 = 781.9890148611368;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        bk = !bk;
        bk = dk < dk;
        Thought lo2 = Thought10.getInstance(bk, bk, bk, bk);
        bk = dk < dk;
        boolean lb3 = true;
        dk = dk + dk;
        bk = bk && bk;
        dk = ok.m3();
        dk = dk - dk;
        boolean lb4 = true;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        Thought lo5 = Thought36.getInstance(ok, ok, ok, ok);
        Thought lo6 = Thought86.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        double ld7 = 15.08685960269638;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3168>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3169>
    Thought lo0 = Thought54.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought46.getInstance();
    bk = !bk;
    Thought lo2 = Thought43.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb3 = true;
    boolean lb4 = false;
    double ld5 = 218.4038425214776;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb6 = true;
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3169>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3170>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = dk - dk;
    dk *= -1;
    bk = bk || bk;
    bk = dk > dk;
    dk *= -1;
    dk = dk - dk;
    bk = !bk;
    Thought lo0 = Thought5.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
</cutPoint3170>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3171>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    on += dk;
    bk = dk < dk;
    Thought lo0 = Thought79.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = false;
    Thought lo2 = Thought29.getInstance(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk < dk;
    bk = bk || bk;
    dk *= -1;
    bk = bk && bk;
</cutPoint3171>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3172>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    if (bk) {
        bk = !bk;
        ok.m1(ok, ok, ok, ok);
        bk = dk < dk;
        dk = dk - dk;
        boolean lb0 = true;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = !bk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk);
        } else if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        boolean lb1 = false;
        on -= dk;
</cutPoint3172>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3173>
    ok = ok.m4();
    bk = dk < dk;
    on += dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought3.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb1 = true;
    dk *= -1;
    bk = dk < dk;
</cutPoint3173>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3174>
    on -= dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    Thought lo0 = Thought86.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld1 = 86.91150499688922;
        on -= dk;
        bk = bk && bk;
        dk = dk + dk;
        bk = !bk;
        on -= dk;
        bk = !bk;
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk + dk;
        boolean lb2 = true;
        ok = ok.m4();
</cutPoint3174>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3175>
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought62.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    Thought lo1 = Thought41.getInstance(bk, bk, bk, bk);
    boolean lb2 = false;
    ok.m2();
    Thought lo3 = Thought88.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk - dk;
    Thought lo4 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
        boolean lb6 = true;
</cutPoint3175>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3176>
    Thought lo0 = Thought33.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    boolean lb1 = true;
    bk = dk < dk;
    bk = bk || bk;
    bk = bk || bk;
    on -= dk;
    double ld2 = 221.07487488069748;
    bk = dk < dk;
    dk *= -1;
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk);
    double ld4 = 353.1425187369682;
    boolean lb5 = true;
    double ld6 = 118.59110317931132;
    boolean lb7 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    bk = dk > dk;
    ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
</cutPoint3176>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3177>
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    double ld1 = 475.86046831626845;
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
</cutPoint3177>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3178>
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb0 = true;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 622.8547682476521;
    bk = bk || bk;
    double ld2 = 754.7319982717837;
    bk = dk > dk;
    bk = dk < dk;
    boolean lb3 = false;
    boolean lb4 = true;
    Thought lo5 = Thought37.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk && bk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint3178>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3179>
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    boolean lb0 = true;
    dk *= -1;
    dk = dk + dk;
    boolean lb1 = false;
    dk *= -1;
    boolean lb2 = false;
    bk = dk > dk;
    on += dk;
</cutPoint3179>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3180>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    double ld0 = 662.4737173502209;
    on -= dk;
    bk = dk > dk;
    Thought lo1 = Thought10.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    on -= dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 575.7801645753748;
    bk = bk || bk;
    boolean lb3 = false;
    bk = dk > dk;
    bk = dk < dk;
    bk = bk && bk;
</cutPoint3180>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3181>
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb0 = false;
    bk = bk || bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
        dk *= -1;
    dk = dk - dk;
    double ld1 = 992.6373688448997;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok);
    dk = dk - dk;
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 791.9910180444997;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3181>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3182>
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    bk = dk < dk;
    bk = dk < dk;
    dk = dk - dk;
    dk = dk - dk;
    double ld0 = 921.4937340349641;
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought44.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb2 = false;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
        bk = dk < dk;
    boolean lb3 = true;
</cutPoint3182>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3183>
    Thought lo0 = Thought13.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4();
    bk = bk && bk;
    bk = dk > dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo1 = Thought49.getInstance(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb2 = false;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
</cutPoint3183>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3184>
    Thought lo0 = Thought10.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought82.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 281.5534538225176;
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    on += dk;
    dk = ok.m3();
    Thought lo4 = Thought95.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo5 = Thought47.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    Thought lo6 = Thought57.getInstance(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3184>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought91 extends Thought{
private static ArrayList<Thought91> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 195.8521082797534;
private double fd1 = 846.4403227000944;
private Thought fo0 = null;
private Thought fo1 = null;
Thought91 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought91 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought91 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought91 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought91 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought91 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought91 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought91 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought91 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought91 instance = new Thought91 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought91 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought91 instance = new Thought91 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought91 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought91 instance = new Thought91 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought91 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought91 instance = new Thought91 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought91 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought91 instance = new Thought91 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought91 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought91 instance = new Thought91 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought91 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought91 instance = new Thought91 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought91 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought91 instance = new Thought91 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3185>
    dk = dk + dk;
        bk = bk || bk;
    dk = dk - dk;
    Thought lo0 = Thought10.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    double ld1 = 958.5702757342178;
    bk = ok.m2();
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3185>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3186>
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought66.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld1 = 703.2055842116476;
    dk = dk - dk;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought13.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld3 = 347.9154004067692;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    bk = !bk;
    on -= dk;
</cutPoint3186>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3187>
        bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
    Thought lo0 = Thought10.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        Thought lo2 = Thought29.getInstance(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        double ld3 = 918.6256514950928;
        bk = ok.m2(bk, bk, bk, bk);
        } else if (bk) {
        double ld4 = 886.3839032431499;
        bk = dk < dk;
        bk = ok.m2();
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        if (bk) {
            } else if (bk) {
            bk = dk > dk;
            bk = dk < dk;
            dk *= -1;
            on -= dk;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3187>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3188>
    double ld0 = 201.85407238871557;
    on -= dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = bk || bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint3188>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3189>
    dk = ok.m3();
    if (bk) {
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
        dk = dk - dk;
        dk *= -1;
        dk *= -1;
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb0 = false;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        bk = ok.m2(dk, dk, dk, dk);
        Thought lo1 = Thought40.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3189>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3190>
    bk = !bk;
    boolean lb0 = false;
    bk = !bk;
    boolean lb1 = false;
    on -= dk;
    bk = !bk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb2 = true;
    bk = !bk;
    on += dk;
    double ld3 = 311.8943652916781;
    for(int j=0; j<10; j++){
        if (bk) {
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb4 = true;
            ok.m1(ok, ok, ok, ok);
            boolean lb5 = false;
            bk = dk < dk;
            bk = dk > dk;
            double ld6 = 555.1825076097042;
            bk = !bk;
            boolean lb7 = true;
            bk = dk < dk;
            bk = bk && bk;
            double ld8 = 54.10372930751631;
            double ld9 = 856.8633983828444;
</cutPoint3190>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3191>
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    double ld0 = 569.5365074168346;
    bk = ok.m2(dk, dk, dk, dk);
        double ld1 = 651.5683982132248;
    bk = bk || bk;
    dk = dk - dk;
    bk = dk > dk;
    double ld2 = 480.94009657226025;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
</cutPoint3191>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3192>
    boolean lb0 = true;
    double ld1 = 425.0277621203139;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo2 = Thought38.getInstance();
    bk = !bk;
    double ld3 = 256.2588069392181;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = false;
        ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    dk *= -1;
</cutPoint3192>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3193>
    bk = bk || bk;
    bk = bk && bk;
    boolean lb0 = true;
    dk = dk - dk;
    on -= dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    bk = bk || bk;
    Thought lo1 = Thought35.getInstance();
    Thought lo2 = Thought59.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    boolean lb3 = true;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb4 = true;
    dk *= -1;
    boolean lb5 = true;
    double ld6 = 426.4263878586423;
</cutPoint3193>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3194>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld0 = 389.2844977675571;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
</cutPoint3194>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3195>
    dk = dk + dk;
        double ld0 = 177.06879187687116;
    dk = dk + dk;
    on -= dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        bk = dk < dk;
        bk = dk > dk;
        bk = !bk;
        double ld1 = 582.1569176525446;
        Thought lo2 = Thought78.getInstance(bk, bk, bk, bk);
        dk *= -1;
        Thought lo3 = Thought56.getInstance();
        bk = bk || bk;
        }
    on += dk;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
</cutPoint3195>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3196>
    bk = dk > dk;
    dk = dk - dk;
    boolean lb0 = true;
    boolean lb1 = false;
    boolean lb2 = false;
    bk = bk && bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb4 = true;
    on -= dk;
    dk *= -1;
    dk = dk - dk;
    bk = bk && bk;
    dk *= -1;
    bk = bk && bk;
    boolean lb5 = true;
    dk *= -1;
        for(int j=0; j<10; j++){
</cutPoint3196>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3197>
    dk = dk - dk;
        bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    dk *= -1;
    bk = dk < dk;
    Thought lo1 = Thought62.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought3.getInstance(dk, dk, dk, dk);
    boolean lb3 = true;
    bk = dk > dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
</cutPoint3197>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3198>
    bk = bk && bk;
    dk = dk + dk;
    Thought lo0 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought28.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    on += dk;
    bk = !bk;
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought72.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    if (bk) {
        bk = bk || bk;
        dk = dk - dk;
        dk = dk + dk;
</cutPoint3198>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3199>
    bk = ok.m2();
    double ld0 = 368.1107083917238;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought2.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    for(int j=0; j<10; j++){
        }
    bk = ok.m2();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo2 = Thought57.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    boolean lb3 = true;
    dk *= -1;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint3199>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3200>
    on -= dk;
    bk = dk < dk;
    bk = !bk;
    bk = dk < dk;
    Thought lo0 = Thought61.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    boolean lb1 = true;
    dk = dk - dk;
    on += dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb2 = true;
    dk = dk - dk;
</cutPoint3200>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3201>
    dk = dk - dk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo0 = Thought96.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
    double ld1 = 492.91486442422917;
</cutPoint3201>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3202>
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4();
    dk *= -1;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = true;
    dk = dk - dk;
    Thought lo2 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
</cutPoint3202>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3203>
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    boolean lb0 = false;
    bk = !bk;
    double ld1 = 884.8366571552326;
    bk = dk < dk;
    ok.m2(bk, bk, bk, bk);
        on -= dk;
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 318.2885323500757;
    bk = !bk;
    dk *= -1;
    bk = dk < dk;
    if (bk) {
        bk = bk && bk;
        bk = bk || bk;
        dk = dk + dk;
        boolean lb3 = true;
</cutPoint3203>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3204>
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on += dk;
    double ld0 = 129.2848395762917;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought97.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint3204>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3205>
    bk = bk || bk;
    on += dk;
    double ld0 = 499.4421138806857;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk *= -1;
        boolean lb1 = false;
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk && bk;
        double ld2 = 617.578955890169;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        double ld3 = 456.7847367703593;
        on += dk;
</cutPoint3205>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3206>
    dk *= -1;
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    double ld0 = 414.86438226734026;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint3206>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3207>
    boolean lb0 = true;
    bk = dk < dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb1 = false;
    bk = !bk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    on -= dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo2 = Thought11.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint3207>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3208>
    for(int j=0; j<10; j++){
        dk *= -1;
        bk = !bk;
        bk = bk || bk;
        Thought lo0 = Thought78.getInstance();
        bk = dk < dk;
        dk *= -1;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
        double ld1 = 837.259371919791;
        dk *= -1;
        dk *= -1;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = false;
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo3 = Thought37.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = ok.m3(bk, bk, bk, bk);
        ok.m1();
        bk = dk < dk;
        }
    boolean lb4 = true;
    double ld5 = 494.96318971553006;
</cutPoint3208>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3209>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk < dk;
    dk = dk + dk;
    dk = dk - dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb1 = true;
    if (bk) {
        boolean lb2 = false;
        dk *= -1;
        bk = bk || bk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = !bk;
</cutPoint3209>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3210>
    double ld0 = 683.9197141027801;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    bk = bk && bk;
    ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    bk = ok.m2();
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought10.getInstance(ok, ok, ok, ok);
    double ld2 = 870.4638578942719;
</cutPoint3210>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3211>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = false;
    dk = dk + dk;
    Thought lo1 = Thought39.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = false;
    if (bk) {
        double ld3 = 266.2347314381573;
        dk = dk - dk;
        Thought lo4 = Thought89.getInstance(dk, dk, dk, dk);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        dk *= -1;
        ok.m3(bk, bk, bk, bk);
        dk = dk - dk;
        dk = dk + dk;
        boolean lb5 = false;
        ok.m1();
        bk = bk || bk;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        bk = bk || bk;
        Thought lo6 = Thought62.getInstance(ok, ok, ok, ok);
        boolean lb7 = true;
        bk = dk > dk;
</cutPoint3211>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3212>
    double ld0 = 153.48114725969612;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk - dk;
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk);
        double ld1 = 469.94649215140544;
        double ld2 = 423.7140188110113;
        Thought lo3 = Thought81.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        for(int j=0; j<10; j++){
            dk = ok.m3(bk, bk, bk, bk);
</cutPoint3212>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3213>
    bk = bk || bk;
    double ld0 = 289.22936244158086;
    dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    dk = dk + dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 1000.9561690024461;
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb3 = false;
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3213>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3214>
    bk = bk && bk;
    ok.m1(dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo0 = Thought89.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 286.06791134545296;
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 625.5079240174161;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint3214>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3215>
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    bk = !bk;
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought0.getInstance(ok, ok, ok, ok);
    for(int j=0; j<10; j++){
</cutPoint3215>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3216>
    bk = bk && bk;
    bk = !bk;
    dk *= -1;
    Thought lo0 = Thought6.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    bk = bk || bk;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    double ld1 = 593.8101118149323;
    dk = dk - dk;
    boolean lb2 = true;
    bk = bk && bk;
    for(int j=0; j<10; j++){
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        dk *= -1;
        dk = ok.m3(bk, bk, bk, bk);
        dk = ok.m3();
        on += dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought77.getInstance(ok, ok, ok, ok);
        Thought lo4 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
</cutPoint3216>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3217>
    bk = bk || bk;
    bk = !bk;
    on += dk;
    ok.m2(dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk < dk;
    bk = bk && bk;
    bk = dk < dk;
    dk *= -1;
        bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint3217>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3218>
    bk = ok.m2();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = false;
    bk = bk || bk;
    boolean lb1 = false;
    bk = bk || bk;
        double ld2 = 659.3086464553475;
    dk = dk - dk;
    dk = dk + dk;
</cutPoint3218>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3219>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        double ld0 = 824.4986130461381;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb1 = true;
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    boolean lb2 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld3 = 884.1872784456417;
    bk = dk < dk;
    bk = dk < dk;
    boolean lb4 = true;
    boolean lb5 = true;
    boolean lb6 = true;
    ok.m1(bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint3219>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought92 extends Thought{
private static ArrayList<Thought92> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 436.4335620279376;
private double fd1 = 945.6440183683957;
private Thought fo0 = null;
private Thought fo1 = null;
Thought92 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought92 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought92 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought92 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought92 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought92 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought92 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought92 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought92 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought92 instance = new Thought92 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought92 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought92 instance = new Thought92 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought92 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought92 instance = new Thought92 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought92 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought92 instance = new Thought92 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought92 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought92 instance = new Thought92 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought92 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought92 instance = new Thought92 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought92 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought92 instance = new Thought92 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought92 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought92 instance = new Thought92 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3220>
    boolean lb0 = true;
    on -= dk;
    boolean lb1 = false;
    bk = !bk;
    dk = dk + dk;
    dk = ok.m3();
    double ld2 = 499.4491272906897;
    dk *= -1;
    Thought lo3 = Thought14.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb4 = true;
    dk = dk - dk;
    on -= dk;
    dk = dk + dk;
    double ld5 = 993.331928138457;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3220>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3221>
    Thought lo0 = Thought22.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought20.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3();
    bk = !bk;
    dk = dk - dk;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    boolean lb2 = false;
    on += dk;
    bk = dk > dk;
    bk = !bk;
    bk = dk < dk;
    on -= dk;
    dk *= -1;
    boolean lb3 = false;
        bk = dk < dk;
    bk = dk > dk;
    boolean lb4 = true;
    bk = !bk;
    dk *= -1;
    double ld5 = 104.1327067516632;
</cutPoint3221>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3222>
    on += dk;
    boolean lb0 = false;
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = !bk;
    dk = dk - dk;
    dk = dk - dk;
    bk = dk > dk;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb2 = true;
    bk = !bk;
    bk = !bk;
</cutPoint3222>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3223>
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    double ld0 = 198.4753356099406;
    bk = !bk;
    boolean lb1 = true;
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    dk *= -1;
    if (bk) {
        boolean lb2 = true;
</cutPoint3223>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3224>
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    Thought lo0 = Thought81.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = !bk;
        boolean lb1 = true;
    if (bk) {
</cutPoint3224>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3225>
    double ld0 = 839.2671938948066;
    dk *= -1;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    boolean lb1 = false;
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
    dk *= -1;
    dk *= -1;
    bk = bk && bk;
    boolean lb2 = false;
    Thought lo3 = Thought85.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2();
</cutPoint3225>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3226>
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought50.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    double ld1 = 800.4341376140712;
    boolean lb2 = true;
    boolean lb3 = true;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo4 = Thought59.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    on -= dk;
    bk = bk || bk;
    dk = ok.m3();
    bk = bk && bk;
    Thought lo5 = Thought64.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb6 = false;
    dk = dk + dk;
    double ld7 = 205.82268789725876;
    ok.m2(ok, ok, ok, ok);
    on += dk;
    double ld8 = 259.78781316514727;
    boolean lb9 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint3226>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3227>
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
        boolean lb0 = true;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 776.1577021206826;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    on += dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint3227>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3228>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3228>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3229>
    bk = dk < dk;
    boolean lb0 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 480.19749823920534;
    Thought lo2 = Thought69.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    bk = !bk;
    ok.m1();
    boolean lb3 = true;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb4 = true;
    ok.m1(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint3229>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3230>
    dk = dk + dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
    bk = bk || bk;
    Thought lo0 = Thought43.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        ok.m3();
    bk = !bk;
    boolean lb1 = false;
    bk = bk || bk;
    boolean lb2 = false;
    on += dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    boolean lb4 = true;
</cutPoint3230>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3231>
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk && bk;
        on += dk;
        dk = dk - dk;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = bk && bk;
        bk = bk && bk;
        ok.m2();
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        bk = dk < dk;
        boolean lb0 = false;
        boolean lb1 = true;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok);
        for(int j=0; j<10; j++){
            Thought lo2 = Thought55.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb3 = false;
</cutPoint3231>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3232>
    bk = bk || bk;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        dk *= -1;
        bk = dk > dk;
        ok.m2(ok, ok, ok, ok);
        bk = dk > dk;
        bk = !bk;
        bk = bk && bk;
        if (bk) {
            dk *= -1;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            boolean lb1 = true;
            Thought lo2 = Thought57.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            ok.m2(dk, dk, dk, dk);
            boolean lb3 = true;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            bk = !bk;
</cutPoint3232>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3233>
        boolean lb0 = false;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = false;
    boolean lb2 = false;
    bk = bk || bk;
    dk = dk - dk;
    bk = bk || bk;
</cutPoint3233>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3234>
    boolean lb0 = false;
    bk = !bk;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 318.43926697828124;
    bk = bk || bk;
    bk = dk < dk;
    bk = bk || bk;
</cutPoint3234>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3235>
    bk = dk < dk;
    dk *= -1;
    bk = bk && bk;
    bk = !bk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1();
    dk *= -1;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    Thought lo1 = Thought20.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    Thought lo2 = Thought83.getInstance(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo3 = Thought76.getInstance(bk, bk, bk, bk);
    if (bk) {
</cutPoint3235>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3236>
    boolean lb0 = false;
    dk = dk + dk;
        dk = ok.m3();
    on += dk;
    double ld1 = 749.2587675504834;
    dk = dk - dk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint3236>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3237>
    boolean lb0 = false;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
    bk = dk < dk;
    boolean lb1 = true;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    bk = !bk;
    ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3();
    bk = dk < dk;
    for(int j=0; j<10; j++){
        if (bk) {
            double ld2 = 939.0773939316379;
            bk = dk > dk;
            Thought lo3 = Thought8.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
            dk *= -1;
            dk = ok.m3(ok, ok, ok, ok);
            dk = dk + dk;
</cutPoint3237>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3238>
    Thought lo0 = Thought33.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    double ld1 = 588.8803187825116;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
    bk = ok.m2(bk, bk, bk, bk);
    Thought lo2 = Thought64.getInstance();
    bk = dk < dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = !bk;
    double ld3 = 285.5427152213645;
    Thought lo4 = Thought9.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3238>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3239>
    dk *= -1;
    boolean lb0 = true;
    boolean lb1 = true;
    dk *= -1;
    bk = ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk + dk;
    boolean lb2 = false;
    bk = bk || bk;
    bk = bk && bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk > dk;
</cutPoint3239>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3240>
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    boolean lb0 = false;
    bk = bk && bk;
    boolean lb1 = true;
    dk = dk + dk;
    dk *= -1;
    Thought lo2 = Thought63.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    dk = dk - dk;
</cutPoint3240>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3241>
    Thought lo0 = Thought42.getInstance(dk, dk, dk, dk);
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought68.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought73.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
    double ld3 = 304.8947233552629;
    dk *= -1;
</cutPoint3241>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3242>
    bk = bk && bk;
    dk = dk - dk;
    dk *= -1;
    bk = bk && bk;
    on -= dk;
    boolean lb0 = true;
    boolean lb1 = false;
    dk *= -1;
    dk = dk - dk;
    dk *= -1;
    bk = dk < dk;
    Thought lo2 = Thought8.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        double ld3 = 298.564519748835;
        bk = dk > dk;
        bk = bk && bk;
        Thought lo4 = Thought44.getInstance(bk, bk, bk, bk);
        ok.m3();
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint3242>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3243>
    double ld0 = 217.50634560818875;
    dk *= -1;
    dk = dk - dk;
    double ld1 = 40.822635117542355;
    dk = dk - dk;
    dk *= -1;
    bk = dk > dk;
    boolean lb2 = true;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
</cutPoint3243>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3244>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    dk = ok.m3(bk, bk, bk, bk);
        dk *= -1;
    ok.m1();
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought92.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    dk *= -1;
    dk = dk + dk;
    bk = dk < dk;
    bk = dk < dk;
    double ld3 = 813.6597325328335;
</cutPoint3244>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3245>
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3();
    bk = !bk;
    bk = !bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = false;
    double ld2 = 940.4605407475345;
    Thought lo3 = Thought66.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3245>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3246>
    dk *= -1;
    double ld0 = 927.5582552483703;
    Thought lo1 = Thought78.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    bk = bk && bk;
    dk = dk - dk;
    double ld2 = 641.6520220461341;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    bk = dk > dk;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought82.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    on -= dk;
</cutPoint3246>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3247>
    bk = dk < dk;
    dk = dk - dk;
    double ld0 = 789.9417779195717;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought83.getInstance(bk, bk, bk, bk);
    on -= dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = dk > dk;
    boolean lb2 = true;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4();
    dk = dk + dk;
    bk = dk > dk;
    dk = dk + dk;
</cutPoint3247>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3248>
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    on -= dk;
    bk = dk > dk;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
    bk = dk > dk;
    dk = dk - dk;
    dk = dk - dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3248>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3249>
    bk = dk < dk;
    bk = dk > dk;
        boolean lb0 = false;
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo1 = Thought39.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 332.0149011366931;
    dk *= -1;
</cutPoint3249>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3250>
    if (bk) {
        boolean lb0 = true;
        bk = bk || bk;
        boolean lb1 = true;
        bk = ok.m2(ok, ok, ok, ok);
        bk = bk || bk;
        boolean lb2 = false;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        ok.m1(dk, dk, dk, dk);
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        bk = ok.m2(bk, bk, bk, bk);
        bk = !bk;
        if (bk) {
            ok = ok.m4();
            dk = dk - dk;
            bk = bk && bk;
            dk *= -1;
            double ld3 = 23.926025507164173;
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk - dk;
            Thought lo4 = Thought72.getInstance(ok, ok, ok, ok);
            ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3250>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3251>
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    double ld1 = 881.419334121418;
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 548.3449200156482;
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo4 = Thought8.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        on += dk;
</cutPoint3251>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3252>
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 591.45820815363;
    dk = dk - dk;
    double ld1 = 287.699792076134;
    Thought lo2 = Thought38.getInstance();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb3 = true;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint3252>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3253>
    double ld0 = 973.8684202314607;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk + dk;
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    double ld1 = 789.7549969435241;
    dk = dk + dk;
    bk = bk || bk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld3 = 721.6576047901416;
    ok.m2(dk, dk, dk, dk);
    boolean lb4 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3();
</cutPoint3253>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3254>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
        Thought lo0 = Thought0.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    bk = !bk;
        double ld1 = 89.52377270681627;
    dk *= -1;
    boolean lb2 = false;
    Thought lo3 = Thought96.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    bk = bk || bk;
    Thought lo4 = Thought18.getInstance(dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb5 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld6 = 327.2429078932509;
    ok = ok.m4();
</cutPoint3254>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought93 extends Thought{
private static ArrayList<Thought93> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 328.429621817746;
private double fd1 = 504.8629785359802;
private Thought fo0 = null;
private Thought fo1 = null;
Thought93 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought93 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought93 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought93 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought93 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought93 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought93 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought93 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought93 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought93 instance = new Thought93 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought93 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought93 instance = new Thought93 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought93 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought93 instance = new Thought93 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought93 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought93 instance = new Thought93 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought93 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought93 instance = new Thought93 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought93 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought93 instance = new Thought93 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought93 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought93 instance = new Thought93 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought93 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought93 instance = new Thought93 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3255>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    boolean lb0 = true;
    boolean lb1 = true;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    bk = dk < dk;
    dk *= -1;
    if (bk) {
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk - dk;
        bk = ok.m2();
        on -= dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m3(ok, ok, ok, ok);
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3255>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3256>
    dk = dk - dk;
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
        dk = dk + dk;
    bk = bk || bk;
    double ld0 = 540.1081162312246;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2();
    double ld1 = 280.23841717822114;
    double ld2 = 45.11514743284322;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3256>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3257>
    ok = ok.m4(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 400.60452225708616;
    dk = dk + dk;
    ok.m3(dk, dk, dk, dk);
    on += dk;
    bk = bk && bk;
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
    Thought lo1 = Thought16.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld2 = 314.2383103051879;
    ok.m1(bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    boolean lb3 = true;
    dk = dk + dk;
    ok.m3();
    bk = bk && bk;
</cutPoint3257>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3258>
    dk = dk + dk;
    dk = dk - dk;
    double ld0 = 427.45846602005923;
    dk = dk - dk;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    boolean lb1 = true;
    double ld2 = 984.8250306446035;
</cutPoint3258>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3259>
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo0 = Thought75.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    boolean lb1 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3259>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3260>
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    dk *= -1;
    boolean lb0 = true;
    dk = dk - dk;
    bk = dk > dk;
    dk = dk + dk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    Thought lo1 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
</cutPoint3260>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3261>
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    Thought lo0 = Thought16.getInstance();
        Thought lo1 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought90.getInstance(ok, ok, ok, ok);
    on -= dk;
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    bk = bk && bk;
    double ld3 = 195.6516714089641;
    bk = !bk;
</cutPoint3261>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3262>
    on -= dk;
    bk = dk < dk;
    double ld0 = 802.2579781398663;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    double ld1 = 104.43873970536072;
    Thought lo2 = Thought15.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought86.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3262>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3263>
    bk = dk < dk;
    dk = dk + dk;
    dk = dk - dk;
    dk *= -1;
    on += dk;
    bk = bk || bk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo0 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint3263>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3264>
    dk = dk - dk;
    if (bk) {
        Thought lo0 = Thought69.getInstance(dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        on -= dk;
        bk = bk && bk;
        bk = dk < dk;
        Thought lo1 = Thought16.getInstance(bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            ok.m3();
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok);
            boolean lb2 = false;
            boolean lb3 = false;
            bk = !bk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = dk < dk;
            boolean lb4 = true;
            on += dk;
            bk = bk || bk;
            dk = dk - dk;
            if (bk) {
                dk = dk + dk;
                bk = bk || bk;
</cutPoint3264>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3265>
    bk = bk && bk;
    bk = dk < dk;
    if (bk) {
        ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo0 = Thought70.getInstance(dk, dk, dk, dk);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
        boolean lb1 = false;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        dk *= -1;
        boolean lb2 = false;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought10.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        } else {
        dk = dk + dk;
        ok.m1(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk - dk;
        double ld4 = 468.8447060481552;
        dk = dk - dk;
        bk = ok.m2(bk, bk, bk, bk);
        on -= dk;
        bk = ok.m2();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        bk = dk < dk;
</cutPoint3265>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3266>
    dk = dk - dk;
    dk = dk - dk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb0 = false;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
    on -= dk;
</cutPoint3266>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3267>
    on += dk;
    boolean lb0 = false;
    boolean lb1 = true;
    bk = ok.m2();
        on -= dk;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    Thought lo3 = Thought6.getInstance(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
</cutPoint3267>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3268>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought1.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4();
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = bk || bk;
    dk = dk + dk;
    on += dk;
    bk = dk < dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo1 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
</cutPoint3268>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3269>
    bk = dk > dk;
    bk = bk || bk;
    dk = ok.m3();
    boolean lb0 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    boolean lb1 = true;
    double ld2 = 731.6728995309842;
    ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    double ld3 = 261.89644875107217;
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    double ld4 = 607.9969903211206;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint3269>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3270>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought61.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    double ld1 = 602.4323305191177;
    bk = ok.m2();
    bk = dk < dk;
</cutPoint3270>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3271>
    boolean lb0 = false;
    dk = dk + dk;
    boolean lb1 = false;
    bk = dk < dk;
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought13.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb3 = true;
    double ld4 = 749.8926150146111;
</cutPoint3271>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3272>
    bk = bk || bk;
    bk = bk || bk;
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = bk && bk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok.m1();
    dk = dk - dk;
    bk = bk && bk;
    double ld1 = 616.4141976062803;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint3272>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3273>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3();
    bk = dk > dk;
    boolean lb0 = true;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo1 = Thought85.getInstance(ok, ok, ok, ok);
    boolean lb2 = true;
    double ld3 = 884.3695920159857;
    boolean lb4 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        bk = ok.m2(dk, dk, dk, dk);
        bk = dk > dk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        dk *= -1;
        bk = ok.m2(bk, bk, bk, bk);
        dk *= -1;
        if (bk) {
</cutPoint3273>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3274>
    on += dk;
    bk = !bk;
    boolean lb0 = true;
    Thought lo1 = Thought63.getInstance();
    double ld2 = 16.754768309650522;
    bk = dk < dk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb3 = false;
    ok.m3(ok, ok, ok, ok);
        bk = dk < dk;
    dk *= -1;
    bk = dk < dk;
    dk *= -1;
    dk *= -1;
    Thought lo4 = Thought46.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint3274>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3275>
    bk = dk > dk;
    double ld0 = 23.287075249182887;
    dk *= -1;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        bk = !bk;
    bk = bk && bk;
    ok.m1();
    dk = dk - dk;
</cutPoint3275>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3276>
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    dk = dk - dk;
    boolean lb1 = false;
        dk = ok.m3(dk, dk, dk, dk);
    boolean lb2 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    boolean lb3 = true;
    dk *= -1;
    bk = bk && bk;
</cutPoint3276>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3277>
    dk = dk - dk;
    bk = bk || bk;
    on += dk;
    Thought lo0 = Thought47.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk < dk;
    double ld1 = 810.0269153380115;
    bk = bk || bk;
    Thought lo2 = Thought62.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint3277>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3278>
    boolean lb0 = false;
    bk = bk || bk;
    ok.m1(bk, bk, bk, bk);
    bk = ok.m2();
    boolean lb1 = true;
    boolean lb2 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    boolean lb3 = false;
    on += dk;
</cutPoint3278>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3279>
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo0 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    dk *= -1;
    boolean lb1 = true;
    bk = dk > dk;
    double ld2 = 0.8097721454625781;
    dk = dk - dk;
    double ld3 = 841.4518099456574;
    boolean lb4 = true;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = bk || bk;
</cutPoint3279>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3280>
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought0.getInstance(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    dk = dk - dk;
    bk = bk || bk;
    bk = bk && bk;
    on += dk;
    Thought lo1 = Thought2.getInstance(dk, dk, dk, dk);
    double ld2 = 740.1914632004854;
</cutPoint3280>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3281>
    bk = dk > dk;
    bk = dk < dk;
    bk = dk < dk;
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 139.41329755280103;
    bk = bk && bk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo1 = Thought41.getInstance();
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought77.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb3 = false;
    bk = !bk;
    dk *= -1;
    dk *= -1;
    bk = dk > dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3281>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3282>
    double ld0 = 575.2743748750038;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    double ld1 = 823.4654582888393;
    boolean lb2 = false;
    on -= dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = bk && bk;
    double ld3 = 781.3506429890546;
    dk *= -1;
    dk *= -1;
    dk = dk + dk;
    on -= dk;
    ok = ok.m4();
    boolean lb4 = false;
</cutPoint3282>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3283>
    double ld0 = 869.8526197326147;
    bk = bk || bk;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok);
    double ld2 = 647.6438733015007;
    bk = !bk;
    boolean lb3 = true;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
        bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought33.getInstance(dk, dk, dk, dk);
    Thought lo5 = Thought54.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb6 = false;
    boolean lb7 = false;
    bk = bk && bk;
    ok.m1(bk, bk, bk, bk);
    ok.m2();
    bk = dk > dk;
    dk *= -1;
    bk = !bk;
</cutPoint3283>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3284>
    bk = dk > dk;
    boolean lb0 = false;
    Thought lo1 = Thought3.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        on += dk;
        bk = dk < dk;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        }
    bk = bk && bk;
</cutPoint3284>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3285>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    double ld0 = 888.4706043107694;
    ok = ok.m4(bk, bk, bk, bk);
    bk = ok.m2();
    Thought lo1 = Thought11.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m3(ok, ok, ok, ok);
    bk = bk && bk;
    Thought lo2 = Thought59.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    double ld3 = 776.6101202414567;
    bk = dk < dk;
    Thought lo4 = Thought97.getInstance(dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    dk = dk - dk;
</cutPoint3285>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3286>
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    Thought lo0 = Thought47.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3286>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3287>
    bk = dk < dk;
    boolean lb0 = true;
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb1 = true;
    double ld2 = 977.5728576895607;
    ok = ok.m4();
    dk *= -1;
    dk = dk - dk;
    on += dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    boolean lb4 = false;
    bk = !bk;
    on -= dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint3287>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3288>
    dk = dk - dk;
    bk = !bk;
    double ld0 = 770.508623849498;
    boolean lb1 = true;
    double ld2 = 433.4331915028844;
    bk = bk && bk;
    bk = bk || bk;
    bk = dk > dk;
    Thought lo3 = Thought83.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    boolean lb4 = false;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = true;
    on += dk;
</cutPoint3288>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3289>
    Thought lo0 = Thought63.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought84.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk + dk;
    boolean lb2 = false;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2();
    boolean lb3 = false;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 210.92343541684502;
    ok = ok.m4(ok, ok, ok, ok);
    bk = dk < dk;
    bk = bk && bk;
    Thought lo5 = Thought53.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3289>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought94 extends Thought{
private static ArrayList<Thought94> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = false;
private double fd0 = 874.1065100995376;
private double fd1 = 392.91519400052147;
private Thought fo0 = null;
private Thought fo1 = null;
Thought94 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought94 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought94 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought94 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought94 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought94 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought94 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought94 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought94 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought94 instance = new Thought94 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought94 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought94 instance = new Thought94 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought94 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought94 instance = new Thought94 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought94 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought94 instance = new Thought94 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought94 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought94 instance = new Thought94 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought94 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought94 instance = new Thought94 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought94 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought94 instance = new Thought94 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought94 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought94 instance = new Thought94 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3290>
    ok.m1(dk, dk, dk, dk);
    bk = dk > dk;
    double ld0 = 735.9317347910425;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought22.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb2 = true;
    dk *= -1;
    boolean lb3 = true;
    double ld4 = 655.4292261426751;
    bk = bk || bk;
</cutPoint3290>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3291>
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld0 = 37.86641350812572;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought99.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    if (bk) {
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        ok = ok.m4(bk, bk, bk, bk);
        double ld2 = 230.24907037985204;
        bk = bk && bk;
        bk = dk > dk;
        dk = ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        double ld3 = 861.1377187741689;
        on -= dk;
        dk = dk - dk;
        dk = dk + dk;
        Thought lo4 = Thought44.getInstance(ok, ok, ok, ok);
        bk = bk && bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3291>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3292>
    bk = bk || bk;
    double ld0 = 451.70470363032075;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    bk = !bk;
    dk = dk + dk;
    boolean lb1 = false;
        bk = bk && bk;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        Thought lo2 = Thought31.getInstance(bk, bk, bk, bk);
        bk = bk || bk;
        dk = ok.m3();
        Thought lo3 = Thought5.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        on += dk;
        ok.m1(ok, ok, ok, ok);
        dk = dk - dk;
        dk = dk + dk;
        double ld4 = 146.50767668779378;
        dk *= -1;
        if (bk) {
            Thought lo5 = Thought18.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = dk < dk;
</cutPoint3292>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3293>
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    boolean lb0 = true;
    double ld1 = 377.7551664092774;
    bk = dk < dk;
    bk = dk > dk;
</cutPoint3293>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3294>
    double ld0 = 688.3193850848227;
        Thought lo1 = Thought62.getInstance();
    boolean lb2 = false;
    dk = dk + dk;
    on -= dk;
    double ld3 = 779.5968815239314;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    double ld4 = 942.3015047812366;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = false;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld6 = 471.95950770616673;
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    boolean lb7 = false;
    dk = dk + dk;
    bk = dk > dk;
    dk *= -1;
    ok.m3(bk, bk, bk, bk);
</cutPoint3294>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3295>
    boolean lb0 = true;
    bk = bk && bk;
    ok.m1();
    bk = !bk;
    Thought lo1 = Thought44.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb3 = false;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = dk < dk;
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint3295>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3296>
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb0 = false;
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    double ld1 = 580.6493206159266;
    dk *= -1;
    dk = dk - dk;
    boolean lb2 = false;
    ok = ok.m4();
    boolean lb3 = false;
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb4 = false;
    dk = dk + dk;
    double ld5 = 890.9345823413847;
    bk = !bk;
    bk = dk > dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    double ld6 = 51.37512368447883;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld7 = 399.9156899495461;
    bk = !bk;
</cutPoint3296>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3297>
    on -= dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
        dk = dk - dk;
    Thought lo0 = Thought13.getInstance(bk, bk, bk, bk);
    ok.m2();
    if (bk) {
        boolean lb1 = true;
        dk = dk + dk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok);
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk || bk;
        ok.m3(dk, dk, dk, dk);
        boolean lb2 = true;
        boolean lb3 = true;
        double ld4 = 765.3111253630932;
        Thought lo5 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3297>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3298>
    double ld0 = 824.8190440316631;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = ok.m2();
    Thought lo1 = Thought27.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    double ld3 = 960.6265771393316;
    dk = dk - dk;
    bk = dk > dk;
    on += dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    double ld4 = 785.1895156157278;
    bk = dk < dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk || bk;
</cutPoint3298>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3299>
    on += dk;
    Thought lo0 = Thought36.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk < dk;
    ok.m3(bk, bk, bk, bk);
    boolean lb1 = true;
    bk = dk < dk;
    ok.m3();
        if (bk) {
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought21.getInstance(ok, ok, ok, ok);
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo3 = Thought33.getInstance(dk, dk, dk, dk);
        Thought lo4 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        dk = ok.m3(bk, bk, bk, bk);
        } else {
        on += dk;
        boolean lb5 = false;
        dk *= -1;
        boolean lb6 = true;
        ok.m2();
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok);
        on -= dk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3299>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3300>
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 961.9242634882194;
    double ld1 = 143.7746670628862;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
        dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    double ld2 = 821.5541244431486;
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    bk = bk && bk;
    dk = dk + dk;
    dk *= -1;
    dk = dk + dk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
        ok.m3(bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
</cutPoint3300>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3301>
    ok.m2();
    bk = dk < dk;
    dk = dk - dk;
    dk *= -1;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk && bk;
    bk = dk < dk;
    dk = dk + dk;
    bk = bk || bk;
    bk = dk < dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought25.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought16.getInstance(dk, dk, dk, dk);
    dk *= -1;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb2 = false;
    dk = ok.m3();
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo3 = Thought4.getInstance(ok, ok, ok, ok);
    dk *= -1;
    for(int j=0; j<10; j++){
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
</cutPoint3301>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3302>
    for(int j=0; j<10; j++){
        boolean lb0 = true;
        bk = !bk;
        Thought lo1 = Thought62.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk < dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk < dk;
        bk = dk > dk;
        bk = bk && bk;
        double ld2 = 302.7298002674168;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        double ld3 = 948.699968608659;
        bk = dk < dk;
        double ld4 = 101.93479331215848;
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint3302>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3303>
    dk = dk - dk;
    Thought lo0 = Thought72.getInstance();
    boolean lb1 = true;
    bk = dk > dk;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    on += dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    boolean lb2 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
</cutPoint3303>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3304>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = false;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = dk - dk;
</cutPoint3304>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3305>
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    bk = !bk;
        ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk - dk;
    bk = !bk;
    dk *= -1;
</cutPoint3305>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3306>
    boolean lb0 = false;
    double ld1 = 929.8176175663543;
    Thought lo2 = Thought7.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
    Thought lo3 = Thought36.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    Thought lo4 = Thought64.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
        dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
    bk = dk > dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    on += dk;
    ok.m2(bk, bk, bk, bk);
    ok.m3();
</cutPoint3306>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3307>
    Thought lo0 = Thought17.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought40.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok.m1();
    bk = dk > dk;
    bk = dk < dk;
    double ld3 = 146.37945626725758;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb4 = false;
    boolean lb5 = false;
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb6 = true;
    dk *= -1;
    Thought lo7 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb8 = true;
</cutPoint3307>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3308>
    bk = dk < dk;
    boolean lb0 = false;
    bk = ok.m2(bk, bk, bk, bk);
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    Thought lo1 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb2 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    Thought lo3 = Thought58.getInstance(dk, dk, dk, dk);
    boolean lb4 = false;
    Thought lo5 = Thought7.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo6 = Thought80.getInstance(bk, bk, bk, bk);
    dk *= -1;
    for(int j=0; j<10; j++){
        boolean lb7 = true;
</cutPoint3308>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3309>
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    double ld0 = 161.77402347289183;
    if (bk) {
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        double ld1 = 225.2149279793617;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo2 = Thought23.getInstance(bk, bk, bk, bk);
        bk = bk || bk;
        dk = ok.m3();
        double ld3 = 754.6407370089806;
        double ld4 = 395.6953436335465;
        dk *= -1;
        boolean lb5 = true;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = bk || bk;
        dk *= -1;
        ok.m2(ok, ok, ok, ok);
        boolean lb6 = true;
</cutPoint3309>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3310>
    double ld0 = 199.34431871374366;
    boolean lb1 = true;
    on += dk;
    boolean lb2 = false;
    double ld3 = 97.44545663134143;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld4 = 180.73837016443844;
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo5 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld6 = 971.8134726747991;
    Thought lo7 = Thought27.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    bk = dk > dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    boolean lb8 = false;
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb9 = false;
    dk = dk - dk;
    double ld10 = 679.0950629696256;
</cutPoint3310>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3311>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo0 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo1 = Thought37.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought91.getInstance(bk, bk, bk, bk);
    boolean lb3 = false;
    dk = dk - dk;
    bk = dk < dk;
    dk = ok.m3();
    on -= dk;
    dk *= -1;
    Thought lo4 = Thought35.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint3311>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3312>
    bk = dk < dk;
    bk = bk || bk;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        on += dk;
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        double ld0 = 38.1645878765509;
        dk = dk + dk;
        boolean lb1 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        dk = dk + dk;
        Thought lo2 = Thought61.getInstance(bk, bk, bk, bk);
        dk = dk - dk;
        ok.m3();
        bk = dk < dk;
        bk = bk && bk;
        }
</cutPoint3312>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3313>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld0 = 973.0364252851141;
    ok.m2(ok, ok, ok, ok);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought0.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb3 = true;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb5 = true;
</cutPoint3313>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3314>
    bk = bk || bk;
    bk = dk > dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        bk = bk && bk;
        bk = dk < dk;
        ok.m1(ok, ok, ok, ok);
        dk = dk - dk;
        bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        dk = dk - dk;
        ok = ok.m4(dk, dk, dk, dk);
        dk = dk + dk;
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        bk = ok.m2(bk, bk, bk, bk);
        on -= dk;
        ok.m3();
        double ld0 = 626.4033198419066;
        bk = bk && bk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3314>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3315>
    dk *= -1;
    dk = dk - dk;
    double ld0 = 233.54954802711;
    dk = dk - dk;
    double ld1 = 176.66438766475667;
    boolean lb2 = false;
    boolean lb3 = true;
    boolean lb4 = true;
    dk = dk + dk;
    boolean lb5 = false;
    dk *= -1;
    dk *= -1;
    bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok);
    double ld6 = 649.564834488517;
    dk *= -1;
    dk *= -1;
    bk = bk && bk;
    bk = !bk;
        bk = !bk;
    double ld7 = 298.41082789015417;
</cutPoint3315>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3316>
        dk = dk + dk;
    for(int j=0; j<10; j++){
        bk = !bk;
        dk *= -1;
        }
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        boolean lb0 = false;
        bk = bk || bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk && bk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = ok.m2();
        bk = bk && bk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = bk && bk;
</cutPoint3316>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3317>
    on -= dk;
    bk = !bk;
    for(int j=0; j<10; j++){
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = dk + dk;
        dk = dk + dk;
        bk = dk < dk;
        boolean lb0 = true;
        ok.m2(dk, dk, dk, dk);
        dk = dk - dk;
        double ld1 = 796.1837654604826;
        on += dk;
        boolean lb2 = true;
        boolean lb3 = true;
        on -= dk;
        bk = dk < dk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk - dk;
</cutPoint3317>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3318>
    bk = bk || bk;
    ok = ok.m4();
    Thought lo0 = Thought33.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    dk *= -1;
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo1 = Thought92.getInstance(bk, bk, bk, bk);
    dk *= -1;
    ok.m2();
    dk = dk - dk;
</cutPoint3318>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3319>
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    dk = dk - dk;
        bk = dk < dk;
    dk = dk + dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    dk = dk + dk;
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    if (bk) {
        double ld0 = 55.031100373680424;
        dk = dk - dk;
        ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        } else {
        double ld1 = 417.350861599695;
        bk = dk < dk;
        boolean lb2 = false;
        dk = dk - dk;
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3319>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3320>
    boolean lb0 = false;
    dk *= -1;
    bk = dk < dk;
    bk = dk < dk;
    if (bk) {
        ok.m1(bk, bk, bk, bk);
        bk = dk > dk;
        ok = ok.m4();
        Thought lo1 = Thought98.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        dk *= -1;
        double ld2 = 453.2796654580414;
        double ld3 = 615.2610171710506;
        bk = dk < dk;
        boolean lb4 = false;
        dk = dk - dk;
        dk = dk + dk;
        dk = dk - dk;
        dk = dk + dk;
        double ld5 = 479.21264750752005;
        dk = dk + dk;
</cutPoint3320>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3321>
    ok.m3(ok, ok, ok, ok);
        bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 983.5387015314591;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    bk = bk || bk;
    bk = bk && bk;
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = ok.m2(bk, bk, bk, bk);
        dk = ok.m3();
        for(int j=0; j<10; j++){
            bk = !bk;
            on += dk;
            dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok);
            bk = bk && bk;
            boolean lb1 = false;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = bk || bk;
            boolean lb2 = true;
            ok = ok.m4(dk, dk, dk, dk);
            dk *= -1;
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
            boolean lb3 = true;
            dk *= -1;
</cutPoint3321>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3322>
    ok.m3(bk, bk, bk, bk);
    on += dk;
    dk = ok.m3();
    dk = dk - dk;
    dk = dk - dk;
    double ld0 = 172.22830183271952;
    bk = dk > dk;
    bk = dk > dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    double ld1 = 114.25353502178643;
</cutPoint3322>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3323>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = dk > dk;
    bk = dk > dk;
    bk = bk || bk;
    ok.m2(bk, bk, bk, bk);
</cutPoint3323>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3324>
    boolean lb0 = true;
    ok.m2();
    double ld1 = 352.2152802321546;
    bk = dk > dk;
    bk = bk || bk;
        boolean lb2 = false;
    Thought lo3 = Thought24.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo4 = Thought99.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk - dk;
        bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3324>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought95 extends Thought{
private static ArrayList<Thought95> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 917.0368076063498;
private double fd1 = 785.4827903667821;
private Thought fo0 = null;
private Thought fo1 = null;
Thought95 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought95 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought95 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought95 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought95 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought95 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought95 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought95 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought95 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought95 instance = new Thought95 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought95 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought95 instance = new Thought95 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought95 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought95 instance = new Thought95 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought95 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought95 instance = new Thought95 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought95 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought95 instance = new Thought95 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought95 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought95 instance = new Thought95 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought95 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought95 instance = new Thought95 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought95 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought95 instance = new Thought95 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3325>
    Thought lo0 = Thought40.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = true;
        ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought4.getInstance(bk, bk, bk, bk);
    ok.m2();
    bk = !bk;
</cutPoint3325>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3326>
    bk = dk > dk;
    bk = bk && bk;
    dk *= -1;
    bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
    bk = bk || bk;
    dk = dk + dk;
    Thought lo0 = Thought15.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    Thought lo3 = Thought42.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought78.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = ok.m2();
    bk = dk < dk;
    bk = dk > dk;
</cutPoint3326>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3327>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought24.getInstance(ok, ok, ok, ok);
    dk *= -1;
    double ld1 = 857.0753871939074;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        bk = dk > dk;
        bk = dk < dk;
        on -= dk;
        bk = bk && bk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
        Thought lo2 = Thought68.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        for(int j=0; j<10; j++){
</cutPoint3327>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3328>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb0 = true;
    dk = dk + dk;
    on += dk;
    dk = dk + dk;
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
</cutPoint3328>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3329>
    bk = bk && bk;
    dk = dk + dk;
    boolean lb0 = false;
    bk = dk < dk;
    dk *= -1;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    dk = dk - dk;
    if (bk) {
        dk *= -1;
        for(int j=0; j<10; j++){
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            ok = ok.m4(ok, ok, ok, ok);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk *= -1;
            dk = dk - dk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = !bk;
            dk *= -1;
            bk = bk && bk;
            ok = ok.m4(dk, dk, dk, dk);
</cutPoint3329>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3330>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    ok.m1();
    dk = dk - dk;
    boolean lb0 = true;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought70.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        boolean lb2 = true;
</cutPoint3330>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3331>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    if (bk) {
        bk = bk || bk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        on -= dk;
        double ld1 = 860.4115656896671;
</cutPoint3331>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3332>
    boolean lb0 = true;
    bk = dk < dk;
    dk *= -1;
    bk = bk && bk;
    Thought lo1 = Thought39.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    bk = dk < dk;
    boolean lb2 = false;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3332>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3333>
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld0 = 958.2264328821117;
    ok = ok.m4(bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    boolean lb1 = true;
    boolean lb2 = true;
    dk *= -1;
    boolean lb3 = false;
    double ld4 = 747.7188463050057;
    dk = dk + dk;
    Thought lo5 = Thought59.getInstance();
    bk = bk || bk;
    on += dk;
    Thought lo6 = Thought78.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb7 = true;
    ok.m2(ok, ok, ok, ok);
    boolean lb8 = false;
    bk = bk && bk;
</cutPoint3333>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3334>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    double ld0 = 672.972176686129;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    bk = !bk;
    bk = !bk;
    boolean lb1 = true;
</cutPoint3334>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3335>
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    Thought lo0 = Thought13.getInstance();
    Thought lo1 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m1(ok, ok, ok, ok);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    on -= dk;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
</cutPoint3335>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3336>
    bk = dk < dk;
    dk *= -1;
    ok.m2();
    Thought lo0 = Thought28.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk > dk;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    double ld1 = 736.912418825757;
</cutPoint3336>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3337>
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb0 = false;
    dk = dk - dk;
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4();
    double ld1 = 141.06827371631758;
    dk *= -1;
</cutPoint3337>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3338>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = bk && bk;
    dk = ok.m3();
    on -= dk;
    on += dk;
    bk = !bk;
    dk *= -1;
    double ld1 = 430.3161821344889;
    bk = dk > dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    Thought lo2 = Thought67.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
</cutPoint3338>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3339>
    ok.m2(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb0 = true;
    bk = dk < dk;
    dk *= -1;
    dk = dk - dk;
    dk *= -1;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
            ok = ok.m4();
    Thought lo1 = Thought28.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint3339>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3340>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    Thought lo0 = Thought84.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    on += dk;
    bk = dk > dk;
    bk = dk < dk;
    ok.m1(ok, ok, ok, ok);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb1 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint3340>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3341>
    ok.m3();
    if (bk) {
        boolean lb0 = true;
        bk = dk < dk;
        dk = dk + dk;
        bk = dk < dk;
        Thought lo1 = Thought25.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = true;
        bk = ok.m2(ok, ok, ok, ok);
        bk = dk < dk;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        boolean lb3 = false;
        bk = bk || bk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk || bk;
        boolean lb4 = false;
        dk *= -1;
        double ld5 = 611.7052532484946;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        dk *= -1;
        dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
        ok = ok.m4();
        double ld6 = 522.1723563214206;
</cutPoint3341>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3342>
    on -= dk;
    dk = dk - dk;
    dk *= -1;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought59.getInstance(ok, ok, ok, ok);
    Thought lo1 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 716.9199901208145;
    on += dk;
    Thought lo3 = Thought20.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint3342>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3343>
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    bk = !bk;
    double ld0 = 734.3045894385892;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    bk = !bk;
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok.m2(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo2 = Thought42.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
</cutPoint3343>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3344>
    ok = ok.m4();
    bk = !bk;
    Thought lo0 = Thought56.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        on -= dk;
        bk = dk > dk;
        if (bk) {
            Thought lo1 = Thought61.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk + dk;
            bk = bk || bk;
            dk = dk - dk;
            bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            boolean lb2 = true;
            dk = dk + dk;
</cutPoint3344>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3345>
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought27.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    on += dk;
    dk = dk - dk;
    boolean lb1 = false;
    bk = !bk;
    double ld2 = 726.9479000173982;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk > dk;
    Thought lo4 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    on += dk;
    boolean lb5 = true;
    Thought lo6 = Thought65.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3345>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3346>
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    dk = dk + dk;
    bk = dk < dk;
    Thought lo0 = Thought20.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = dk > dk;
    ok.m1();
    double ld1 = 931.7035062963089;
    bk = !bk;
    bk = bk && bk;
    dk = dk + dk;
    on += dk;
    on += dk;
    dk = dk - dk;
    on += dk;
        dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = true;
    boolean lb3 = false;
    on += dk;
    boolean lb4 = true;
</cutPoint3346>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3347>
    on += dk;
    dk = dk - dk;
    boolean lb0 = true;
    Thought lo1 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
</cutPoint3347>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3348>
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk || bk;
    boolean lb0 = false;
    double ld1 = 668.7826711951207;
    bk = bk && bk;
        dk = dk - dk;
    dk *= -1;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 832.1319200200453;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    if (bk) {
        bk = bk && bk;
        dk = dk + dk;
        dk = ok.m3(dk, dk, dk, dk);
        dk *= -1;
        dk = dk + dk;
</cutPoint3348>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3349>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    Thought lo0 = Thought76.getInstance(bk, bk, bk, bk);
            double ld1 = 251.19799033198336;
    double ld2 = 127.1682201234399;
    dk = dk + dk;
    ok.m2();
    bk = dk < dk;
    on -= dk;
    Thought lo3 = Thought12.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
        dk *= -1;
    double ld4 = 332.380989098791;
    bk = bk && bk;
    bk = bk && bk;
    on += dk;
    boolean lb5 = true;
    ok.m3(ok, ok, ok, ok);
</cutPoint3349>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3350>
    boolean lb0 = true;
    bk = dk > dk;
    dk *= -1;
    Thought lo1 = Thought88.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    on += dk;
    bk = !bk;
    boolean lb2 = true;
    bk = bk || bk;
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    bk = dk > dk;
    on += dk;
    double ld3 = 203.6045103834028;
    ok = ok.m4();
    bk = !bk;
    boolean lb4 = true;
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk *= -1;
    Thought lo5 = Thought58.getInstance(ok, ok, ok, ok);
    bk = dk < dk;
</cutPoint3350>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3351>
    dk = dk + dk;
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk < dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk);
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    dk = dk + dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    on -= dk;
    Thought lo2 = Thought4.getInstance();
    bk = !bk;
    boolean lb3 = false;
    boolean lb4 = false;
    bk = bk && bk;
    dk *= -1;
    dk *= -1;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld5 = 614.3067164628912;
</cutPoint3351>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3352>
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on += dk;
    dk *= -1;
    bk = dk < dk;
    bk = dk > dk;
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
    bk = dk > dk;
    dk = dk - dk;
    bk = ok.m2(bk, bk, bk, bk);
    dk = dk - dk;
    bk = bk || bk;
    bk = bk || bk;
    bk = ok.m2();
    double ld1 = 602.5908961879987;
    for(int j=0; j<10; j++){
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        double ld2 = 204.55897931760344;
        ok.m2(ok, ok, ok, ok);
</cutPoint3352>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3353>
    double ld0 = 71.77558144803916;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    on += dk;
    ok.m3(bk, bk, bk, bk);
    double ld1 = 742.9418537456415;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
</cutPoint3353>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3354>
    dk = dk + dk;
    Thought lo0 = Thought62.getInstance(ok, ok, ok, ok);
    boolean lb1 = false;
    on -= dk;
    dk *= -1;
    bk = bk && bk;
    bk = dk > dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk);
    double ld2 = 38.163755379813345;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    ok.m2(bk, bk, bk, bk);
    if (bk) {
        bk = !bk;
        bk = dk > dk;
        bk = dk < dk;
</cutPoint3354>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3355>
    ok.m1();
    bk = dk > dk;
    double ld0 = 878.7767740408648;
    bk = dk > dk;
    Thought lo1 = Thought99.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk *= -1;
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    on -= dk;
    dk = dk + dk;
    Thought lo2 = Thought27.getInstance(ok, ok, ok, ok);
    boolean lb3 = true;
    boolean lb4 = false;
    boolean lb5 = true;
    dk = dk - dk;
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 378.78146326154507;
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
</cutPoint3355>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3356>
    Thought lo0 = Thought50.getInstance(dk, dk, dk, dk);
    dk *= -1;
    boolean lb1 = true;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    boolean lb2 = false;
    boolean lb3 = true;
    boolean lb4 = false;
    Thought lo5 = Thought75.getInstance(bk, bk, bk, bk);
    dk = ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    double ld6 = 782.352001638921;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb7 = false;
</cutPoint3356>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3357>
    dk = dk + dk;
    Thought lo0 = Thought94.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb1 = false;
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
    ok.m3(bk, bk, bk, bk);
    dk = ok.m3();
    boolean lb2 = false;
    dk *= -1;
    dk *= -1;
    boolean lb3 = true;
    bk = bk || bk;
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint3357>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3358>
    double ld0 = 87.65265703744139;
        Thought lo1 = Thought87.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb2 = false;
    double ld3 = 495.6289526370207;
    bk = dk < dk;
    bk = ok.m2(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo4 = Thought90.getInstance(ok, ok, ok, ok);
    boolean lb5 = false;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    double ld6 = 722.2336077824302;
    dk = dk - dk;
    bk = bk && bk;
    bk = !bk;
    bk = bk && bk;
</cutPoint3358>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3359>
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    ok.m1(bk, bk, bk, bk);
    double ld0 = 584.6659758623501;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 112.55182757326011;
        bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    dk = dk + dk;
    bk = bk || bk;
    Thought lo2 = Thought54.getInstance(ok, ok, ok, ok);
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    ok.m1(dk, dk, dk, dk);
    double ld3 = 901.1668590198848;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    boolean lb4 = true;
    Thought lo5 = Thought42.getInstance(bk, bk, bk, bk);
    boolean lb6 = true;
</cutPoint3359>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought96 extends Thought{
private static ArrayList<Thought96> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = true;
private double fd0 = 864.4144540694714;
private double fd1 = 753.6491903882601;
private Thought fo0 = null;
private Thought fo1 = null;
Thought96 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought96 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought96 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought96 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought96 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought96 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought96 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought96 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought96 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought96 instance = new Thought96 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought96 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought96 instance = new Thought96 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought96 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought96 instance = new Thought96 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought96 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought96 instance = new Thought96 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought96 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought96 instance = new Thought96 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought96 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought96 instance = new Thought96 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought96 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought96 instance = new Thought96 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought96 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought96 instance = new Thought96 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3360>
    double ld0 = 133.34612656590332;
    bk = dk > dk;
    if (bk) {
        ok = ok.m4();
        bk = bk && bk;
        bk = dk > dk;
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        bk = bk || bk;
        } else {
                dk *= -1;
        for(int j=0; j<10; j++){
            bk = dk > dk;
            dk = dk - dk;
            Thought lo1 = Thought99.getInstance(ok, ok, ok, ok);
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            bk = !bk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            double ld2 = 993.7274540365507;
            on -= dk;
            bk = dk > dk;
            dk = dk - dk;
</cutPoint3360>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3361>
    dk *= -1;
    bk = dk < dk;
    boolean lb0 = false;
    boolean lb1 = true;
        bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo2 = Thought34.getInstance();
    boolean lb3 = false;
    double ld4 = 266.3451531846026;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok);
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo5 = Thought95.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld6 = 512.695548428539;
    ok.m2();
</cutPoint3361>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3362>
    double ld0 = 31.656766035566616;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    on += dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok);
    bk = !bk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought23.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo3 = Thought36.getInstance(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    Thought lo4 = Thought29.getInstance(bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4();
    boolean lb5 = false;
    bk = bk || bk;
    for(int j=0; j<10; j++){
        if (bk) {
            boolean lb6 = false;
</cutPoint3362>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3363>
    bk = dk > dk;
    double ld0 = 714.7186593157427;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
        bk = bk || bk;
    dk = dk - dk;
    dk *= -1;
    bk = bk || bk;
    boolean lb1 = false;
    boolean lb2 = false;
    dk = dk + dk;
    dk = dk + dk;
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    Thought lo4 = Thought92.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    boolean lb5 = false;
    dk = ok.m3(dk, dk, dk, dk);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint3363>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3364>
    dk *= -1;
    bk = bk && bk;
    bk = dk > dk;
    bk = bk || bk;
    bk = !bk;
    bk = dk < dk;
    boolean lb0 = false;
    boolean lb1 = false;
    ok = ok.m4();
    bk = dk < dk;
    bk = bk && bk;
    bk = dk < dk;
    double ld2 = 566.7222281835938;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    boolean lb3 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    Thought lo4 = Thought95.getInstance(bk, bk, bk, bk);
    double ld5 = 980.9433375693043;
    ok.m1();
    bk = dk < dk;
</cutPoint3364>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3365>
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 83.1183641982323;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint3365>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3366>
    ok.m1();
    boolean lb0 = true;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk - dk;
    for(int j=0; j<10; j++){
        double ld1 = 552.3548884834395;
        dk = dk + dk;
        Thought lo2 = Thought83.getInstance(dk, dk, dk, dk);
</cutPoint3366>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3367>
    dk = dk + dk;
    bk = dk > dk;
    double ld0 = 50.282907773376394;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought12.getInstance(bk, bk, bk, bk);
    bk = ok.m2();
    Thought lo2 = Thought58.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    Thought lo3 = Thought75.getInstance(ok, ok, ok, ok);
    boolean lb4 = true;
    bk = !bk;
    boolean lb5 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk + dk;
    bk = dk < dk;
    bk = bk && bk;
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        Thought lo6 = Thought74.getInstance(bk, bk, bk, bk);
        boolean lb7 = false;
        boolean lb8 = true;
        dk = ok.m3();
</cutPoint3367>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3368>
        bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld0 = 658.659478432799;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
        dk = dk + dk;
    bk = dk > dk;
    Thought lo1 = Thought40.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought27.getInstance(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
</cutPoint3368>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3369>
    dk = dk + dk;
    bk = dk < dk;
    double ld0 = 241.52418227159603;
    Thought lo1 = Thought79.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    double ld2 = 463.1855939079343;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 999.4979882648804;
    ok = ok.m4(bk, bk, bk, bk);
    dk *= -1;
    bk = bk && bk;
    Thought lo5 = Thought72.getInstance();
    bk = dk > dk;
    on -= dk;
    bk = bk && bk;
    dk *= -1;
    bk = dk < dk;
</cutPoint3369>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3370>
    bk = bk || bk;
    for(int j=0; j<10; j++){
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        dk = ok.m3(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        if (bk) {
            ok.m1(dk, dk, dk, dk);
            dk = dk - dk;
            Thought lo0 = Thought26.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3370>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3371>
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    bk = dk > dk;
    dk = dk + dk;
    bk = dk > dk;
    bk = bk && bk;
    bk = !bk;
    bk = bk || bk;
    bk = !bk;
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = ok.m3(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        on += dk;
        Thought lo0 = Thought20.getInstance(bk, bk, bk, bk);
        dk *= -1;
        boolean lb1 = true;
        ok = ok.m4();
        dk = dk - dk;
        }
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 339.0681766803376;
    bk = ok.m2(ok, ok, ok, ok);
</cutPoint3371>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3372>
    bk = bk && bk;
    double ld0 = 111.10096626956783;
    boolean lb1 = true;
    bk = dk < dk;
    Thought lo2 = Thought35.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = false;
    Thought lo4 = Thought97.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb5 = true;
    Thought lo6 = Thought45.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    bk = dk > dk;
</cutPoint3372>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3373>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    bk = dk < dk;
    bk = bk && bk;
    on += dk;
    dk = dk - dk;
    boolean lb0 = true;
    dk = dk + dk;
    ok = ok.m4();
    bk = bk || bk;
    bk = !bk;
    bk = bk || bk;
    bk = dk > dk;
    bk = !bk;
    Thought lo1 = Thought54.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = dk < dk;
    Thought lo2 = Thought21.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo4 = Thought99.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3373>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3374>
    bk = bk || bk;
    bk = dk < dk;
    dk *= -1;
    bk = bk || bk;
    double ld0 = 881.5706889185798;
    boolean lb1 = false;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk + dk;
    on -= dk;
    dk = ok.m3();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 848.0594381193141;
    double ld3 = 554.7603979591374;
    bk = dk < dk;
    bk = bk && bk;
    dk *= -1;
    boolean lb4 = false;
    on += dk;
    bk = !bk;
    bk = bk && bk;
    if (bk) {
        ok = ok.m4(dk, dk, dk, dk);
        boolean lb5 = true;
        bk = dk < dk;
</cutPoint3374>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3375>
    dk *= -1;
    dk = dk - dk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    boolean lb0 = false;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    boolean lb1 = true;
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    dk = dk - dk;
    bk = dk > dk;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
</cutPoint3375>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3376>
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    ok.m2(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    for(int j=0; j<10; j++){
        bk = !bk;
        dk = dk + dk;
        ok.m2();
        dk *= -1;
        dk = dk + dk;
        boolean lb0 = true;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        for(int j=0; j<10; j++){
            bk = bk && bk;
            on -= dk;
            bk = dk > dk;
</cutPoint3376>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3377>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk || bk;
    bk = bk || bk;
    double ld0 = 476.46607229301577;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    double ld1 = 513.4693765123179;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3377>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3378>
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = false;
    bk = !bk;
    dk *= -1;
    Thought lo1 = Thought76.getInstance();
    bk = dk < dk;
        dk *= -1;
    dk = dk + dk;
    bk = bk || bk;
</cutPoint3378>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3379>
    for(int j=0; j<10; j++){
        boolean lb0 = false;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok);
        }
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    dk = dk - dk;
    bk = bk || bk;
        dk = dk + dk;
    dk = dk - dk;
    dk = dk - dk;
    double ld1 = 814.607500162071;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
</cutPoint3379>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3380>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    dk = dk + dk;
    dk = dk + dk;
    bk = bk && bk;
    dk = dk + dk;
    Thought lo1 = Thought10.getInstance(bk, bk, bk, bk);
        bk = bk || bk;
    ok = ok.m4();
    dk *= -1;
</cutPoint3380>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3381>
    bk = bk || bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    Thought lo0 = Thought24.getInstance(dk, dk, dk, dk);
        on += dk;
    bk = dk < dk;
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3();
    on -= dk;
</cutPoint3381>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3382>
    double ld0 = 38.77334149420488;
    Thought lo1 = Thought58.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo2 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    Thought lo3 = Thought6.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo4 = Thought56.getInstance(bk, bk, bk, bk);
    double ld5 = 652.7951281149412;
    dk = dk + dk;
    bk = bk && bk;
    bk = bk || bk;
</cutPoint3382>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3383>
    boolean lb0 = true;
    ok.m2();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    bk = dk < dk;
    dk = dk + dk;
    Thought lo1 = Thought98.getInstance(ok, ok, ok, ok);
    dk = dk + dk;
    dk *= -1;
    bk = dk > dk;
    double ld2 = 522.0328107902927;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
</cutPoint3383>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3384>
    bk = !bk;
    Thought lo0 = Thought63.getInstance(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    ok = ok.m4();
    Thought lo1 = Thought16.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    ok.m1(ok, ok, ok, ok);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought91.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    boolean lb3 = true;
    bk = bk && bk;
    dk = dk + dk;
    Thought lo4 = Thought19.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb5 = true;
</cutPoint3384>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3385>
    dk = dk - dk;
    dk = dk - dk;
    dk = dk - dk;
    boolean lb0 = true;
    on -= dk;
    dk = dk - dk;
    bk = bk || bk;
    boolean lb1 = true;
    dk *= -1;
    bk = bk && bk;
    boolean lb2 = false;
    dk = dk + dk;
    for(int j=0; j<10; j++){
        double ld3 = 768.1667939120013;
        boolean lb4 = false;
        dk = ok.m3(bk, bk, bk, bk);
</cutPoint3385>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3386>
    dk = ok.m3();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok);
    on += dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = true;
    Thought lo2 = Thought50.getInstance(dk, dk, dk, dk);
    on += dk;
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo3 = Thought98.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint3386>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3387>
    boolean lb0 = false;
    bk = !bk;
    on -= dk;
    Thought lo1 = Thought50.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    if (bk) {
        dk = dk - dk;
        boolean lb3 = true;
        ok = ok.m4(dk, dk, dk, dk);
        bk = !bk;
        bk = dk > dk;
        dk = dk - dk;
        bk = bk || bk;
</cutPoint3387>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3388>
    bk = dk > dk;
    dk = dk - dk;
    Thought lo0 = Thought8.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo1 = Thought35.getInstance(bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    on += dk;
    bk = bk && bk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo2 = Thought41.getInstance(ok, ok, ok, ok);
</cutPoint3388>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3389>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld0 = 750.1123295910002;
    dk = dk + dk;
    Thought lo1 = Thought34.getInstance(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo2 = Thought5.getInstance();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        bk = dk > dk;
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo3 = Thought98.getInstance(dk, dk, dk, dk);
        bk = dk < dk;
</cutPoint3389>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3390>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb0 = false;
    dk = ok.m3();
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
</cutPoint3390>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3391>
    dk *= -1;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = false;
    dk = ok.m3(bk, bk, bk, bk);
    ok.m3();
    bk = !bk;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = bk || bk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok);
    Thought lo1 = Thought32.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m2(dk, dk, dk, dk);
    boolean lb2 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo3 = Thought57.getInstance();
    Thought lo4 = Thought10.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3391>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3392>
    on += dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    double ld0 = 377.0144038809434;
    bk = dk > dk;
    ok.m1(bk, bk, bk, bk);
    bk = bk || bk;
    double ld1 = 130.53724961902094;
    dk = dk + dk;
    bk = dk > dk;
    dk = dk + dk;
    dk = dk - dk;
    on += dk;
    bk = dk > dk;
    ok = ok.m4();
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
</cutPoint3392>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3393>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo0 = Thought48.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = true;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought70.getInstance();
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    on += dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought13.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb4 = true;
</cutPoint3393>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3394>
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    boolean lb0 = true;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = true;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok.m3();
    dk *= -1;
    bk = !bk;
    dk *= -1;
    dk = dk + dk;
</cutPoint3394>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought97 extends Thought{
private static ArrayList<Thought97> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 646.1214719786593;
private double fd1 = 8.977546271251303;
private Thought fo0 = null;
private Thought fo1 = null;
Thought97 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought97 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought97 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought97 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought97 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought97 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought97 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought97 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought97 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought97 instance = new Thought97 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought97 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought97 instance = new Thought97 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought97 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought97 instance = new Thought97 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought97 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought97 instance = new Thought97 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought97 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought97 instance = new Thought97 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought97 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought97 instance = new Thought97 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought97 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought97 instance = new Thought97 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought97 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought97 instance = new Thought97 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3395>
    dk = dk + dk;
    bk = bk || bk;
    dk = dk - dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    boolean lb0 = true;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint3395>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3396>
    ok = ok.m4();
    Thought lo0 = Thought29.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    Thought lo1 = Thought48.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = false;
    on += dk;
    on -= dk;
    on += dk;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb3 = true;
    dk = ok.m3();
    bk = bk || bk;
    boolean lb4 = true;
    bk = dk < dk;
    dk *= -1;
    bk = bk || bk;
    dk = dk + dk;
    dk *= -1;
    bk = !bk;
</cutPoint3396>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3397>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk + dk;
    boolean lb0 = false;
    double ld1 = 745.5346161427316;
    ok.m1(ok, ok, ok, ok);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    Thought lo2 = Thought73.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb3 = false;
</cutPoint3397>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3398>
    dk = dk + dk;
    bk = bk && bk;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo0 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    on -= dk;
    dk *= -1;
    ok.m1(ok, ok, ok, ok);
    bk = dk < dk;
    Thought lo1 = Thought75.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = true;
    on -= dk;
    on += dk;
    boolean lb3 = false;
    for(int j=0; j<10; j++){
</cutPoint3398>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3399>
    boolean lb0 = true;
    bk = dk > dk;
    bk = bk || bk;
    on -= dk;
        bk = bk || bk;
    bk = dk < dk;
    bk = bk || bk;
    dk = dk + dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    on += dk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    on += dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m2(ok, ok, ok, ok);
    bk = dk < dk;
</cutPoint3399>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3400>
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    if (bk) {
        Thought lo0 = Thought76.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = bk && bk;
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        dk = dk + dk;
        bk = bk || bk;
</cutPoint3400>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3401>
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4();
    bk = bk && bk;
    Thought lo0 = Thought47.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    double ld1 = 25.463860601404875;
    ok = ok.m4(ok, ok, ok, ok);
    double ld2 = 777.9878508423394;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk > dk;
    ok.m1(dk, dk, dk, dk);
    on -= dk;
    dk = dk - dk;
    boolean lb3 = false;
    dk = dk + dk;
    boolean lb4 = true;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    for(int j=0; j<10; j++){
        boolean lb5 = true;
        dk = dk - dk;
</cutPoint3401>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3402>
    dk *= -1;
    bk = bk && bk;
    boolean lb0 = false;
    bk = dk < dk;
    bk = !bk;
    ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    Thought lo1 = Thought91.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
        dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld2 = 849.6237660555628;
    bk = dk < dk;
    dk *= -1;
    Thought lo3 = Thought85.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    double ld4 = 296.1054888770744;
    ok.m2(bk, bk, bk, bk);
    Thought lo5 = Thought5.getInstance();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = bk || bk;
    double ld6 = 570.7967791347652;
</cutPoint3402>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3403>
    bk = bk && bk;
    dk *= -1;
    bk = !bk;
    ok.m2(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb0 = true;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld1 = 152.15115909821733;
    dk = dk + dk;
    bk = dk < dk;
    ok.m3(bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4();
    double ld3 = 720.8415668298255;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld4 = 683.1294168047255;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
    bk = bk && bk;
    bk = !bk;
</cutPoint3403>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3404>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
        bk = dk > dk;
    on -= dk;
    bk = bk || bk;
    bk = dk > dk;
    bk = dk > dk;
    dk = dk + dk;
    boolean lb0 = false;
    ok.m1();
    bk = bk || bk;
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3404>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3405>
    on -= dk;
    boolean lb0 = true;
    bk = !bk;
    double ld1 = 619.819874224431;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = !bk;
</cutPoint3405>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3406>
    bk = dk < dk;
    on -= dk;
    dk = dk - dk;
    boolean lb0 = true;
    bk = bk && bk;
    on += dk;
    on += dk;
    bk = ok.m2();
    bk = !bk;
    bk = bk || bk;
</cutPoint3406>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3407>
    bk = bk || bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok.m2(ok, ok, ok, ok);
    on -= dk;
    dk = dk + dk;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    on += dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    dk *= -1;
    ok = ok.m4();
    bk = dk < dk;
    dk = dk + dk;
    boolean lb0 = false;
    bk = dk > dk;
</cutPoint3407>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3408>
    on += dk;
    double ld0 = 808.6566973901316;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    ok.m2(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld1 = 940.0431103515033;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    bk = !bk;
    double ld2 = 579.4675675319654;
</cutPoint3408>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3409>
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m2(bk, bk, bk, bk);
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk || bk;
    double ld0 = 77.23578618140525;
    boolean lb1 = true;
    on -= dk;
    double ld2 = 46.83672302373259;
    double ld3 = 154.88509562514847;
    boolean lb4 = false;
    Thought lo5 = Thought47.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld6 = 638.8335538529741;
    double ld7 = 414.6141504433945;
    boolean lb8 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3409>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3410>
    dk = dk - dk;
    dk *= -1;
    dk *= -1;
    bk = dk > dk;
    ok = ok.m4(dk, dk, dk, dk);
    bk = bk || bk;
    on -= dk;
    dk = dk - dk;
    boolean lb0 = true;
    double ld1 = 250.3703783344341;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    </cutPoint3410>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3411>
    dk = dk + dk;
    bk = dk > dk;
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    dk = ok.m3();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok);
    Thought lo0 = Thought80.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    bk = !bk;
    boolean lb2 = true;
    boolean lb3 = false;
    dk *= -1;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    boolean lb4 = true;
</cutPoint3411>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3412>
    double ld0 = 524.5646365682145;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb1 = false;
    double ld2 = 660.3462714150919;
    dk = dk - dk;
    double ld3 = 103.24124195482152;
    ok = ok.m4(ok, ok, ok, ok);
    on -= dk;
    bk = bk && bk;
    bk = !bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    on += dk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m1(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint3412>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3413>
    bk = bk && bk;
    bk = bk || bk;
    double ld0 = 567.2313993314243;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok.m3(ok, ok, ok, ok);
    bk = bk || bk;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought3.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m3(bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
    on += dk;
    Thought lo3 = Thought59.getInstance();
    dk *= -1;
    bk = !bk;
    dk = dk - dk;
        bk = dk > dk;
</cutPoint3413>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3414>
    bk = dk < dk;
    dk = dk - dk;
    Thought lo0 = Thought50.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    boolean lb1 = true;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok);
    Thought lo2 = Thought58.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        double ld3 = 506.0325298886129;
        for(int j=0; j<10; j++){
            ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
            boolean lb4 = true;
            bk = dk < dk;
            Thought lo5 = Thought14.getInstance(dk, dk, dk, dk);
            dk = dk + dk;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
            ok.m3(bk, bk, bk, bk);
            bk = bk && bk;
            ok = ok.m4();
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
            bk = bk || bk;
            ok.m3(ok, ok, ok, ok);
            double ld6 = 836.2830606911384;
            dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk *= -1;
            Thought lo7 = Thought36.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
            dk = dk + dk;
            dk *= -1;
</cutPoint3414>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3415>
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
        bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m1(ok, ok, ok, ok);
    double ld0 = 883.7061733138762;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 539.3983014600194;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    dk = dk + dk;
        bk = bk || bk;
</cutPoint3415>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3416>
    Thought lo0 = Thought68.getInstance(bk, bk, bk, bk);
    bk = !bk;
    bk = ok.m2();
    dk = dk + dk;
    dk = dk - dk;
    dk *= -1;
    Thought lo1 = Thought30.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk || bk;
    dk *= -1;
    bk = dk > dk;
    ok.m3(ok, ok, ok, ok);
    boolean lb2 = false;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    double ld3 = 36.372249912138095;
    on += dk;
    Thought lo4 = Thought37.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint3416>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3417>
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    bk = bk && bk;
    boolean lb0 = true;
    bk = ok.m2();
    Thought lo1 = Thought30.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    dk = dk + dk;
    dk *= -1;
    double ld3 = 9.414355976110736;
    dk = dk - dk;
    Thought lo4 = Thought97.getInstance(dk, dk, dk, dk);
</cutPoint3417>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3418>
    dk *= -1;
    dk = dk + dk;
    on += dk;
    bk = bk && bk;
    bk = dk < dk;
    bk = bk && bk;
    bk = dk < dk;
    on += dk;
    boolean lb0 = false;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3418>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3419>
    ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb0 = true;
    bk = bk && bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    ok.m1(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    boolean lb1 = false;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3419>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3420>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    double ld0 = 803.8210421453994;
    Thought lo1 = Thought28.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk *= -1;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo2 = Thought42.getInstance(bk, bk, bk, bk);
    ok = ok.m4();
    dk = dk - dk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 882.4463540910956;
    boolean lb4 = true;
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk *= -1;
    on -= dk;
    dk = dk + dk;
    bk = dk < dk;
    dk = dk + dk;
    bk = bk && bk;
    bk = dk > dk;
</cutPoint3420>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3421>
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb0 = false;
    dk = dk + dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    boolean lb2 = false;
    boolean lb3 = false;
    boolean lb4 = true;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk || bk;
    bk = dk > dk;
    boolean lb5 = false;
    boolean lb6 = true;
</cutPoint3421>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3422>
    boolean lb0 = true;
    bk = ok.m2(bk, bk, bk, bk);
    boolean lb1 = false;
    bk = dk < dk;
    on += dk;
    ok = ok.m4();
    double ld2 = 366.75603382316586;
    bk = dk > dk;
    for(int j=0; j<10; j++){
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        double ld3 = 856.486389543172;
        bk = ok.m2(ok, ok, ok, ok);
</cutPoint3422>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3423>
    Thought lo0 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    bk = bk && bk;
    bk = dk > dk;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
</cutPoint3423>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3424>
    ok.m3();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    double ld1 = 364.63555968185125;
    Thought lo2 = Thought59.getInstance(ok, ok, ok, ok);
    bk = !bk;
    on -= dk;
    if (bk) {
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        dk = ok.m3(dk, dk, dk, dk);
        boolean lb3 = true;
        dk = dk - dk;
        dk *= -1;
        dk = dk - dk;
</cutPoint3424>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3425>
    boolean lb0 = true;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        ok.m2(bk, bk, bk, bk);
        ok = ok.m4();
        bk = !bk;
        boolean lb1 = true;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        if (bk) {
            on -= dk;
            Thought lo2 = Thought86.getInstance(ok, ok, ok, ok);
</cutPoint3425>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3426>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    bk = dk < dk;
    bk = !bk;
    ok.m2();
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = false;
    dk = dk + dk;
    Thought lo2 = Thought92.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    double ld3 = 728.381070690212;
</cutPoint3426>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3427>
    double ld0 = 354.0246238375977;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    Thought lo1 = Thought45.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb2 = true;
    ok.m1();
    dk = dk - dk;
    dk = dk + dk;
    dk = dk + dk;
    boolean lb3 = false;
    double ld4 = 556.5347382377112;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    on -= dk;
    dk = dk - dk;
    bk = dk < dk;
    boolean lb5 = false;
    bk = !bk;
    dk *= -1;
    double ld6 = 415.29791620913204;
    dk *= -1;
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
</cutPoint3427>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3428>
    boolean lb0 = false;
    dk *= -1;
    Thought lo1 = Thought7.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    on -= dk;
    double ld3 = 161.86504207858306;
    dk *= -1;
    bk = dk < dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    dk *= -1;
    boolean lb4 = false;
    boolean lb5 = true;
    bk = !bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = dk > dk;
    ok = ok.m4();
    dk = dk - dk;
    boolean lb6 = false;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb7 = true;
    bk = bk || bk;
</cutPoint3428>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3429>
    double ld0 = 915.678116265491;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk *= -1;
        bk = bk && bk;
    dk *= -1;
    bk = dk > dk;
    dk = dk + dk;
    dk *= -1;
    dk = dk + dk;
    on -= dk;
    bk = bk && bk;
</cutPoint3429>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought98 extends Thought{
private static ArrayList<Thought98> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = false;
private boolean fb1 = true;
private double fd0 = 92.89704239455588;
private double fd1 = 732.8576272098229;
private Thought fo0 = null;
private Thought fo1 = null;
Thought98 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought98 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought98 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought98 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought98 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought98 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought98 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought98 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought98 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought98 instance = new Thought98 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought98 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought98 instance = new Thought98 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought98 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought98 instance = new Thought98 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought98 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought98 instance = new Thought98 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought98 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought98 instance = new Thought98 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought98 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought98 instance = new Thought98 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought98 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought98 instance = new Thought98 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought98 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought98 instance = new Thought98 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3430>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    if (bk) {
        bk = bk && bk;
        bk = ok.m2(bk, bk, bk, bk);
        bk = ok.m2();
        on -= dk;
        on += dk;
        boolean lb0 = false;
        bk = !bk;
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = true;
        bk = dk > dk;
        ok.m1(ok, ok, ok, ok);
        double ld2 = 534.4260960527167;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb3 = true;
        bk = dk < dk;
        boolean lb4 = false;
        Thought lo5 = Thought52.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3430>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3431>
    dk = ok.m3(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb0 = true;
    bk = dk < dk;
        bk = ok.m2();
    boolean lb1 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk < dk;
    bk = dk > dk;
    bk = ok.m2(dk, dk, dk, dk);
    on -= dk;
    dk = dk + dk;
    boolean lb3 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 527.8316329247343;
    ok.m1(bk, bk, bk, bk);
</cutPoint3431>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3432>
    double ld0 = 841.2619218244706;
    bk = ok.m2();
    bk = bk || bk;
    Thought lo1 = Thought68.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk + dk;
    if (bk) {
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
        for(int j=0; j<10; j++){
            ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
            ok.m2(dk, dk, dk, dk);
            double ld2 = 862.9973442031334;
</cutPoint3432>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3433>
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb0 = true;
    double ld1 = 341.68444783282257;
    boolean lb2 = true;
    bk = !bk;
    bk = dk < dk;
    dk = ok.m3(bk, bk, bk, bk);
    ok.m1();
    bk = dk < dk;
    bk = dk > dk;
    on -= dk;
    on -= dk;
        bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk = dk - dk;
    bk = dk < dk;
</cutPoint3433>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3434>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    Thought lo0 = Thought16.getInstance(bk, bk, bk, bk);
    bk = bk && bk;
    dk = ok.m3();
    bk = !bk;
    bk = bk || bk;
    if (bk) {
        boolean lb1 = true;
        bk = !bk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo2 = Thought84.getInstance(ok, ok, ok, ok);
        bk = dk < dk;
        bk = dk < dk;
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
        dk *= -1;
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = bk || bk;
        double ld3 = 827.0949854849101;
        bk = dk > dk;
        dk *= -1;
        dk = dk - dk;
        ok = ok.m4(bk, bk, bk, bk);
</cutPoint3434>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3435>
    on -= dk;
    ok = ok.m4();
    boolean lb0 = true;
    dk = dk - dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    boolean lb1 = true;
    Thought lo2 = Thought77.getInstance(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3435>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3436>
    dk = dk + dk;
    boolean lb0 = true;
    on -= dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = !bk;
    for(int j=0; j<10; j++){
        dk = dk + dk;
        Thought lo1 = Thought86.getInstance(bk, bk, bk, bk);
        double ld2 = 33.00881738509537;
        on += dk;
        dk = dk - dk;
</cutPoint3436>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3437>
    ok.m3();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    dk = ok.m3(ok, ok, ok, ok);
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    on += dk;
    bk = !bk;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    Thought lo0 = Thought77.getInstance(dk, dk, dk, dk);
</cutPoint3437>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3438>
    dk = dk + dk;
    Thought lo0 = Thought50.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2();
    double ld1 = 2.045178192144507;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        bk = dk > dk;
        bk = dk < dk;
        ok = ok.m4(ok, ok, ok, ok);
</cutPoint3438>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3439>
    boolean lb0 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb1 = true;
    for(int j=0; j<10; j++){
        boolean lb2 = true;
        boolean lb3 = false;
        Thought lo4 = Thought57.getInstance(dk, dk, dk, dk);
        bk = bk && bk;
        Thought lo5 = Thought3.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        dk *= -1;
        bk = dk > dk;
</cutPoint3439>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3440>
    Thought lo0 = Thought91.getInstance(bk, bk, bk, bk);
    bk = !bk;
    dk *= -1;
    bk = bk || bk;
    on += dk;
    boolean lb1 = true;
    if (bk) {
        bk = dk > dk;
        bk = bk || bk;
        bk = dk < dk;
        ok.m1();
        bk = dk > dk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok);
        if (bk) {
            ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
            dk = dk - dk;
            ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
            bk = dk < dk;
            for(int j=0; j<10; j++){
                ok = ok.m4(dk, dk, dk, dk);
                boolean lb2 = true;
                dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
                ok = ok.m4(bk, bk, bk, bk);
                bk = bk && bk;
                double ld3 = 631.6771917906035;
                boolean lb4 = true;
                dk = dk - dk;
                dk *= -1;
</cutPoint3440>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3441>
    ok = ok.m4();
    Thought lo0 = Thought45.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = true;
    bk = ok.m2(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    boolean lb2 = false;
    double ld3 = 96.35416776979181;
    bk = !bk;
    double ld4 = 778.5315083579585;
    dk = dk + dk;
    if (bk) {
        double ld5 = 485.5486055514193;
        bk = dk < dk;
        boolean lb6 = true;
        dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
        bk = dk < dk;
</cutPoint3441>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3442>
        dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    double ld0 = 759.0313476081794;
    ok = ok.m4();
    double ld1 = 948.9310301653042;
    boolean lb2 = true;
    bk = bk && bk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
        boolean lb3 = true;
    dk = dk + dk;
    boolean lb4 = true;
    bk = bk && bk;
    dk = dk + dk;
    ok.m1(bk, bk, bk, bk);
    dk = ok.m3();
    for(int j=0; j<10; j++){
</cutPoint3442>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3443>
    boolean lb0 = true;
    bk = dk > dk;
    Thought lo1 = Thought40.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    bk = !bk;
    dk = dk + dk;
        Thought lo2 = Thought17.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    dk = dk - dk;
    double ld3 = 934.0592650048927;
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
</cutPoint3443>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3444>
    Thought lo0 = Thought60.getInstance(dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk = dk - dk;
        Thought lo1 = Thought16.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk - dk;
        bk = dk > dk;
        dk = dk + dk;
        ok = ok.m4();
        double ld2 = 588.1942127077892;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
        double ld3 = 168.63869837143545;
        Thought lo4 = Thought84.getInstance(ok, ok, ok, ok);
        dk = dk - dk;
</cutPoint3444>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3445>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    double ld0 = 432.46762893098503;
    dk = ok.m3(dk, dk, dk, dk);
    Thought lo1 = Thought99.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
    bk = !bk;
    on += dk;
    dk = dk + dk;
    bk = bk || bk;
    boolean lb2 = false;
</cutPoint3445>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3446>
    ok.m1(bk, bk, bk, bk);
    dk *= -1;
    dk = dk + dk;
    Thought lo0 = Thought71.getInstance();
    Thought lo1 = Thought71.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    bk = dk < dk;
    bk = dk < dk;
        on -= dk;
    on += dk;
    dk = dk - dk;
    bk = bk || bk;
    bk = dk < dk;
    Thought lo2 = Thought73.getInstance(ok, ok, ok, ok);
    double ld3 = 594.634050700848;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint3446>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3447>
    bk = bk && bk;
    boolean lb0 = true;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought89.getInstance(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    Thought lo2 = Thought68.getInstance(bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4();
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo3 = Thought20.getInstance(ok, ok, ok, ok);
    double ld4 = 438.10193106544875;
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3447>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3448>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    bk = bk || bk;
    boolean lb0 = false;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb1 = false;
    boolean lb2 = true;
    if (bk) {
        bk = bk && bk;
        boolean lb3 = true;
        boolean lb4 = false;
        dk = ok.m3(bk, bk, bk, bk);
        ok.m1();
        bk = dk < dk;
        boolean lb5 = true;
        bk = bk || bk;
        bk = bk && bk;
        boolean lb6 = false;
        on += dk;
        ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = !bk;
        dk = dk - dk;
        bk = bk && bk;
        dk *= -1;
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok);
        bk = !bk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3448>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3449>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    bk = !bk;
    bk = bk || bk;
    bk = bk || bk;
    bk = dk < dk;
    ok = ok.m4();
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    double ld0 = 422.62762306712267;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    ok.m2(ok, ok, ok, ok);
</cutPoint3449>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3450>
    on += dk;
    bk = dk < dk;
    bk = bk || bk;
    dk = dk + dk;
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        double ld1 = 652.084057536819;
        dk = dk - dk;
        bk = !bk;
        dk = dk + dk;
        ok.m1(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        bk = ok.m2();
        ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = false;
        dk = ok.m3(ok, ok, ok, ok);
</cutPoint3450>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3451>
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = bk && bk;
    Thought lo1 = Thought91.getInstance(dk, dk, dk, dk);
    bk = bk || bk;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk = dk + dk;
        bk = bk && bk;
        ok = ok.m4(bk, bk, bk, bk);
        dk = dk + dk;
        dk *= -1;
        }
    boolean lb2 = true;
    dk = dk + dk;
    bk = !bk;
    ok = ok.m4();
    boolean lb3 = false;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    if (bk) {
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk || bk;
</cutPoint3451>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3452>
    Thought lo0 = Thought97.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = dk - dk;
        dk = dk + dk;
        double ld1 = 287.56364407273577;
        bk = !bk;
        }
    dk *= -1;
    boolean lb2 = false;
    Thought lo3 = Thought66.getInstance(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    double ld4 = 506.42285148796765;
    bk = dk > dk;
    Thought lo5 = Thought50.getInstance(bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint3452>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3453>
    dk = dk + dk;
    ok = ok.m4();
    boolean lb0 = true;
    bk = dk < dk;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    boolean lb2 = true;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    bk = dk > dk;
    ok.m3(dk, dk, dk, dk);
    Thought lo3 = Thought99.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk = dk + dk;
    boolean lb4 = true;
    bk = bk && bk;
    dk = ok.m3(bk, bk, bk, bk);
</cutPoint3453>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3454>
    bk = !bk;
    double ld0 = 14.434635904128204;
    bk = !bk;
    if (bk) {
        on -= dk;
        } else {
        Thought lo1 = Thought99.getInstance();
                dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        dk *= -1;
</cutPoint3454>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3455>
    boolean lb0 = false;
    bk = dk > dk;
    if (bk) {
        bk = !bk;
        double ld1 = 634.1880550691898;
        ok = ok.m4(ok, ok, ok, ok);
        bk = bk || bk;
        boolean lb2 = false;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk < dk;
        bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo3 = Thought84.getInstance(dk, dk, dk, dk);
        double ld4 = 92.58338881968733;
        dk *= -1;
        } else if (bk) {
        } else if (bk) {
        Thought lo5 = Thought45.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        ok.m3();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb6 = false;
        bk = dk < dk;
</cutPoint3455>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3456>
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb0 = true;
    dk *= -1;
    boolean lb1 = true;
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    double ld2 = 944.6474467470412;
    bk = !bk;
    double ld3 = 464.36774126320057;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    on -= dk;
    Thought lo4 = Thought95.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    double ld5 = 671.4834360006942;
    bk = dk < dk;
</cutPoint3456>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3457>
    bk = bk && bk;
    double ld0 = 309.48364178393484;
    Thought lo1 = Thought6.getInstance(bk, bk, bk, bk);
    on += dk;
    dk = dk - dk;
    dk *= -1;
    double ld2 = 521.5537221276254;
    ok = ok.m4();
    dk = dk + dk;
    bk = bk || bk;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 196.27051311261286;
    Thought lo4 = Thought39.getInstance(ok, ok, ok, ok);
    dk *= -1;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb5 = false;
    Thought lo6 = Thought97.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    double ld7 = 316.5269475830026;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    bk = dk > dk;
</cutPoint3457>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3458>
    dk = dk + dk;
    ok.m3(bk, bk, bk, bk);
    double ld0 = 817.1593868988552;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    bk = ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
</cutPoint3458>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3459>
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo0 = Thought67.getInstance(dk, dk, dk, dk);
    boolean lb1 = true;
    on += dk;
    dk *= -1;
    bk = bk && bk;
        bk = bk || bk;
        on -= dk;
    dk *= -1;
    dk = dk - dk;
    bk = bk && bk;
    double ld2 = 460.12672080064533;
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
</cutPoint3459>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3460>
    ok = ok.m4();
    bk = !bk;
    boolean lb0 = false;
    dk *= -1;
        dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok);
    bk = !bk;
    boolean lb1 = true;
    for(int j=0; j<10; j++){
        boolean lb2 = false;
        Thought lo3 = Thought93.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo4 = Thought27.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        dk *= -1;
        double ld5 = 438.2771913931099;
</cutPoint3460>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3461>
    Thought lo0 = Thought72.getInstance(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    for(int j=0; j<10; j++){
        dk = ok.m3(bk, bk, bk, bk);
        dk *= -1;
        dk = dk + dk;
        for(int j=0; j<10; j++){
            ok = ok.m4();
            ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
            dk = ok.m3(ok, ok, ok, ok);
</cutPoint3461>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3462>
    double ld0 = 455.0585215727883;
    boolean lb1 = true;
    dk = dk + dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    double ld2 = 646.1645054186645;
    boolean lb3 = false;
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk + dk;
    bk = !bk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    on -= dk;
    ok.m1(bk, bk, bk, bk);
</cutPoint3462>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3463>
    on += dk;
    on -= dk;
    ok = ok.m4();
    boolean lb0 = false;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    boolean lb1 = true;
        on -= dk;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld3 = 933.990159153556;
    double ld4 = 351.34474350067836;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb5 = true;
    ok.m3(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb6 = false;
    dk = dk - dk;
    dk = dk + dk;
    boolean lb7 = false;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    bk = !bk;
    dk = dk - dk;
    dk = ok.m3();
    dk *= -1;
    bk = !bk;
</cutPoint3463>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3464>
    boolean lb0 = false;
    dk = dk + dk;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    dk = dk + dk;
    boolean lb1 = false;
    Thought lo2 = Thought57.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought92.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
</cutPoint3464>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
}
<endClass/>
class Thought99 extends Thought{
private static ArrayList<Thought99> instances = new ArrayList<>();
private static int instanceCounter = 0;
private boolean fb0 = true;
private boolean fb1 = false;
private double fd0 = 238.81553425829347;
private double fd1 = 150.72842193297865;
private Thought fo0 = null;
private Thought fo1 = null;
Thought99 (){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
Thought.STACK_COUNTER++;
}
Thought99 (boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
Thought.STACK_COUNTER++;
}
Thought99 (double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought99 (double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
Thought.STACK_COUNTER++;
}
Thought99 (Thought ao1, Thought ao2, Thought ao3, Thought ao4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought99 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought99 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
Thought99 (Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
fb0 = ab1; 
fb1 = ab2; 
fd0 = ad1; 
fd1 = ad2; 
fo0 = ao1; 
fo1 = ao2; 
Thought.STACK_COUNTER++;
}
public static Thought99 getInstance(){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought99 instance = new Thought99 (); 
instances.add(instance); 
return instance; 
} 
}
public static Thought99 getInstance(boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought99 instance = new Thought99 ( ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought99 getInstance(double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought99 instance = new Thought99 ( ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought99 getInstance(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought99 instance = new Thought99 ( ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought99 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought99 instance = new Thought99 ( ao1,  ao2,  ao3,  ao4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought99 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought99 instance = new Thought99 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought99 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought99 instance = new Thought99 ( ao1,  ao2,  ao3,  ao4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
public static Thought99 getInstance(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4){
if (instances.size() >= 10) { 
instanceCounter++; 
instanceCounter%=10; 
return instances.get(instanceCounter); 
} else { 
Thought99 instance = new Thought99 ( ao1,  ao2,  ao3,  ao4,  ad1,  ad2,  ad3,  ad4,  ab1,  ab2,  ab3,  ab4); 
instances.add(instance); 
return instance; 
} 
}
void m1() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3465>
    bk = dk > dk;
    bk = !bk;
    dk *= -1;
    bk = dk < dk;
    dk = dk - dk;
    bk = dk > dk;
    dk = dk - dk;
    on += dk;
    Thought lo0 = Thought49.getInstance(bk, bk, bk, bk);
    double ld1 = 11.569983010843256;
    if (bk) {
        bk = bk || bk;
        ok.m1();
        bk = dk > dk;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk + dk;
        Thought lo2 = Thought70.getInstance(ok, ok, ok, ok);
        bk = bk || bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        Thought lo3 = Thought37.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        dk *= -1;
        bk = bk || bk;
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk);
        bk = bk && bk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        Thought lo4 = Thought24.getInstance(bk, bk, bk, bk);
</cutPoint3465>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3466>
    bk = bk || bk;
        Thought lo0 = Thought41.getInstance();
    on += dk;
    boolean lb1 = true;
    ok.m1(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb2 = false;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok);
    ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk *= -1;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok.m1(bk, bk, bk, bk);
    Thought lo4 = Thought22.getInstance();
    for(int j=0; j<10; j++){
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk && bk;
        dk = ok.m3(ok, ok, ok, ok);
        dk = dk + dk;
        dk = dk + dk;
        dk = dk - dk;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint3466>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3467>
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
        bk = bk && bk;
    dk = dk - dk;
</cutPoint3467>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3468>
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok);
    dk *= -1;
    boolean lb0 = false;
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 604.3077644455664;
    Thought lo2 = Thought54.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk > dk;
        dk *= -1;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    dk = ok.m3(bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk - dk;
    bk = dk < dk;
    bk = bk && bk;
    ok = ok.m4();
    boolean lb3 = true;
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok);
</cutPoint3468>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3469>
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    if (bk) {
        bk = dk < dk;
        bk = dk < dk;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = dk > dk;
        ok = ok.m4(dk, dk, dk, dk);
        Thought lo0 = Thought14.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
        on -= dk;
        bk = dk > dk;
        dk = dk + dk;
        ok.m3(bk, bk, bk, bk);
        ok = ok.m4();
        dk = dk + dk;
        bk = !bk;
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb1 = false;
        bk = dk > dk;
        ok = ok.m4(ok, ok, ok, ok);
        ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        dk = dk - dk;
        bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        bk = ok.m2(dk, dk, dk, dk);
        dk = dk - dk;
        bk = !bk;
        boolean lb2 = false;
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3469>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3470>
    ok.m2(bk, bk, bk, bk);
    dk = dk + dk;
    dk = dk - dk;
    on += dk;
    bk = !bk;
    ok.m2();
    boolean lb0 = true;
    dk = dk - dk;
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3470>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3471>
    dk *= -1;
    boolean lb0 = false;
    ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    bk = !bk;
    on += dk;
    Thought lo1 = Thought23.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    dk = dk + dk;
    ok.m3();
    boolean lb2 = false;
    ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    dk = dk + dk;
</cutPoint3471>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void m1(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3472>
    boolean lb0 = true;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb1 = false;
    for(int j=0; j<10; j++){
        boolean lb2 = true;
        dk *= -1;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        on -= dk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
        double ld3 = 155.25122975857118;
        dk = dk - dk;
        dk = dk - dk;
        boolean lb4 = false;
        ok = ok.m4(dk, dk, dk, dk);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
        ok = ok.m4(bk, bk, bk, bk);
        Thought lo5 = Thought55.getInstance();
        Thought lo6 = Thought22.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3472>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
boolean m2() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3473>
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok);
    ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought26.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk + dk;
    double ld1 = 272.03285125112967;
    for(int j=0; j<10; j++){
        bk = dk > dk;
        double ld2 = 725.6631370593301;
        bk = !bk;
        dk = dk + dk;
        dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
        bk = dk > dk;
        dk = dk - dk;
        ok = ok.m4();
        dk = dk - dk;
        boolean lb3 = false;
        ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
        bk = bk || bk;
</cutPoint3473>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3474>
    on -= dk;
    bk = bk || bk;
    dk *= -1;
    Thought lo0 = Thought72.getInstance(ok, ok, ok, ok);
    boolean lb1 = false;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    for(int j=0; j<10; j++){
        dk = dk + dk;
        double ld2 = 353.7103324577451;
        double ld3 = 470.58465730099596;
        dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
        Thought lo4 = Thought4.getInstance(dk, dk, dk, dk);
        bk = dk > dk;
        bk = bk && bk;
        }
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb5 = true;
    bk = !bk;
    dk = dk + dk;
    dk = ok.m3();
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3474>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3475>
    dk *= -1;
    bk = dk < dk;
    dk = dk + dk;
    dk *= -1;
    on += dk;
    bk = ok.m2(ok, ok, ok, ok);
    double ld0 = 865.1406407357778;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    double ld1 = 371.8229401836651;
    bk = !bk;
        ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    double ld2 = 250.7862095108994;
    dk = ok.m3(dk, dk, dk, dk);
    boolean lb3 = false;
    boolean lb4 = true;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb5 = false;
        ok = ok.m4(bk, bk, bk, bk);
    boolean lb6 = true;
    dk = dk - dk;
    dk = dk + dk;
</cutPoint3475>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3476>
    Thought lo0 = Thought66.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok);
    boolean lb2 = true;
    bk = bk || bk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = !bk;
    if (bk) {
        dk = dk + dk;
        ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
        ok = ok.m4(dk, dk, dk, dk);
</cutPoint3476>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3477>
        bk = bk && bk;
        ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    dk = dk - dk;
    dk = dk + dk;
        ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        dk *= -1;
        dk = dk + dk;
        double ld0 = 560.9618348697871;
        dk = dk - dk;
        dk = dk - dk;
        ok.m1();
        Thought lo1 = Thought28.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb2 = true;
        ok.m3(ok, ok, ok, ok);
        bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
        bk = dk > dk;
</cutPoint3477>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3478>
    ok.m1(ok, ok, ok, ok, bk, bk, bk, bk);
    ok.m3(dk, dk, dk, dk);
    bk = dk > dk;
        ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = !bk;
    boolean lb0 = true;
    dk = dk + dk;
    bk = bk || bk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    boolean lb1 = true;
    bk = !bk;
    ok = ok.m4();
    bk = dk < dk;
    bk = bk || bk;
    dk *= -1;
    dk *= -1;
    on -= dk;
    dk *= -1;
    dk = dk + dk;
    dk = dk + dk;
    dk *= -1;
    boolean lb2 = false;
    Thought lo3 = Thought88.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3478>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3479>
    bk = dk < dk;
    dk = dk - dk;
    on += dk;
    on -= dk;
    dk *= -1;
    dk *= -1;
    double ld0 = 894.968068257325;
    bk = bk || bk;
    Thought lo1 = Thought30.getInstance(ok, ok, ok, ok);
    bk = bk || bk;
    boolean lb2 = true;
    boolean lb3 = false;
    bk = dk > dk;
</cutPoint3479>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} 
}
boolean m2(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3480>
    bk = bk && bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    dk = dk + dk;
    dk = dk - dk;
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = !bk;
    dk = ok.m3(dk, dk, dk, dk);
    dk = dk + dk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    ok.m1();
    boolean lb1 = false;
    bk = bk || bk;
    bk = dk < dk;
    on -= dk;
    dk = dk + dk;
    bk = !bk;
    double ld2 = 535.9708869016957;
    boolean lb3 = true;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
</cutPoint3480>
Thought.STACK_COUNTER++;
return bk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return false;
} 
}
double m3() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3481>
    Thought lo0 = Thought60.getInstance(ok, ok, ok, ok);
    bk = !bk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
        bk = !bk;
    Thought lo1 = Thought85.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb2 = false;
    bk = dk > dk;
    bk = dk < dk;
    ok = ok.m4();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb3 = true;
    Thought lo4 = Thought89.getInstance(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
</cutPoint3481>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3482>
    dk = ok.m3(dk, dk, dk, dk);
    bk = !bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo0 = Thought20.getInstance();
    Thought lo1 = Thought73.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    boolean lb2 = true;
    ok.m2(ok, ok, ok, ok);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = dk > dk;
    boolean lb3 = false;
    bk = dk < dk;
    bk = !bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    dk = dk - dk;
</cutPoint3482>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3483>
    on += dk;
    bk = bk || bk;
    Thought lo0 = Thought44.getInstance();
    bk = dk < dk;
    Thought lo1 = Thought6.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    boolean lb2 = true;
    dk = dk - dk;
    bk = !bk;
    bk = dk < dk;
    Thought lo3 = Thought16.getInstance(ok, ok, ok, ok);
    bk = dk > dk;
    on -= dk;
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk *= -1;
    double ld4 = 334.4331229624646;
    bk = dk > dk;
    bk = dk > dk;
    bk = dk > dk;
    dk = dk + dk;
    Thought lo5 = Thought53.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
</cutPoint3483>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3484>
    bk = ok.m2(bk, bk, bk, bk);
    bk = dk < dk;
    boolean lb0 = true;
    ok = ok.m4();
        ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
</cutPoint3484>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3485>
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    dk = dk + dk;
    dk = dk - dk;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    bk = bk || bk;
    bk = bk && bk;
    boolean lb0 = false;
    ok.m2();
</cutPoint3485>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3486>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m3(ok, ok, ok, ok);
        ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = false;
    boolean lb1 = false;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    boolean lb2 = true;
    dk = ok.m3(bk, bk, bk, bk);
    bk = !bk;
    bk = !bk;
    dk = dk + dk;
    on -= dk;
    dk = dk + dk;
    dk = dk + dk;
    dk = ok.m3();
    dk = dk + dk;
</cutPoint3486>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3487>
    dk = ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = ok.m3(ok, ok, ok, ok);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo0 = Thought32.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = ok.m3(dk, dk, dk, dk);
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = ok.m2(bk, bk, bk, bk);
    ok.m2();
    boolean lb1 = false;
    bk = !bk;
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok.m2(ok, ok, ok, ok);
    bk = dk > dk;
    bk = dk > dk;
    dk = dk + dk;
</cutPoint3487>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
double m3(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3488>
    Thought lo0 = Thought94.getInstance(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    dk = ok.m3(dk, dk, dk, dk);
    bk = dk < dk;
    bk = bk && bk;
    dk = dk - dk;
    bk = !bk;
    </cutPoint3488>
Thought.STACK_COUNTER++;
return dk;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return 0.0;
} 
}
Thought m4() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3489>
    bk = bk && bk;
    on += dk;
    dk = dk - dk;
    Thought lo0 = Thought1.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    ok = ok.m4(bk, bk, bk, bk);
    double ld1 = 564.7162277989852;
    for(int j=0; j<10; j++){
        ok = ok.m4();
        for(int j=0; j<10; j++){
            bk = bk || bk;
            }
        if (bk) {
            boolean lb2 = false;
            bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
            for(int j=0; j<10; j++){
                ok.m3(ok, ok, ok, ok);
                ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
                ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
                dk = ok.m3(dk, dk, dk, dk);
                ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
                boolean lb3 = true;
                ok = ok.m4(bk, bk, bk, bk);
                ok = ok.m4();
                ok.m3(dk, dk, dk, dk, bk, bk, bk, bk);
                ok = ok.m4(ok, ok, ok, ok);
                bk = !bk;
</cutPoint3489>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3490>
        bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    bk = !bk;
    dk *= -1;
    dk = dk - dk;
    dk = dk - dk;
    dk = dk - dk;
    boolean lb0 = false;
    bk = dk > dk;
    Thought lo1 = Thought51.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    boolean lb2 = true;
    on -= dk;
    bk = bk || bk;
    ok = ok.m4(dk, dk, dk, dk);
    Thought lo3 = Thought21.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    bk = dk > dk;
    bk = bk && bk;
    dk = dk + dk;
    on += dk;
    dk *= -1;
    bk = ok.m2(bk, bk, bk, bk);
    bk = bk && bk;
    ok.m2();
    if (bk) {
        bk = bk && bk;
        dk = dk - dk;
</cutPoint3490>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3491>
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    on += dk;
    dk = dk + dk;
    dk = dk + dk;
    on += dk;
    bk = dk > dk;
    bk = bk && bk;
    bk = bk || bk;
    bk = bk && bk;
    bk = dk > dk;
    double ld0 = 660.2559810063788;
    boolean lb1 = true;
    bk = dk < dk;
    dk *= -1;
    dk = ok.m3(ok, ok, ok, ok);
    dk *= -1;
    dk *= -1;
</cutPoint3491>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3492>
    dk = dk + dk;
    dk = dk - dk;
    dk = dk + dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    boolean lb0 = true;
    boolean lb1 = true;
    bk = bk || bk;
    Thought lo2 = Thought11.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    dk = dk - dk;
    on -= dk;
    for(int j=0; j<10; j++){
</cutPoint3492>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3493>
    ok = ok.m4(dk, dk, dk, dk);
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = ok.m3(bk, bk, bk, bk);
    bk = ok.m2();
    dk = dk + dk;
    bk = bk || bk;
    on += dk;
    bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk && bk;
    ok.m1(ok, ok, ok, ok);
</cutPoint3493>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3494>
    dk *= -1;
        bk = !bk;
    boolean lb0 = false;
    double ld1 = 733.7401179366678;
    bk = ok.m2(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo2 = Thought96.getInstance(dk, dk, dk, dk);
    bk = !bk;
    bk = bk && bk;
    bk = dk < dk;
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk + dk;
    dk *= -1;
    double ld3 = 194.29689614479264;
    ok = ok.m4(bk, bk, bk, bk);
    if (bk) {
        dk = ok.m3();
        bk = ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
        boolean lb4 = true;
        Thought lo5 = Thought38.getInstance(ok, ok, ok, ok);
        bk = !bk;
        double ld6 = 682.4245070794759;
        boolean lb7 = true;
        bk = dk < dk;
        bk = bk && bk;
</cutPoint3494>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3495>
    on += dk;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    ok.m2();
    ok.m2(dk, dk, dk, dk, bk, bk, bk, bk);
    ok = ok.m4(ok, ok, ok, ok);
    bk = bk || bk;
    bk = dk < dk;
    bk = bk && bk;
    bk = dk < dk;
    boolean lb0 = true;
    bk = !bk;
    ok.m1(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    bk = bk || bk;
    bk = dk > dk;
    dk = dk + dk;
    on -= dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    Thought lo1 = Thought46.getInstance(dk, dk, dk, dk);
    Thought lo2 = Thought27.getInstance(ok, ok, ok, ok, dk, dk, dk, dk);
    dk = dk - dk;
    bk = bk && bk;
</cutPoint3495>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
Thought m4(Thought ao1, Thought ao2, Thought ao3, Thought ao4, double ad1, double ad2, double ad3, double ad4, boolean ab1, boolean ab2, boolean ab3, boolean ab4) throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3496>
    bk = dk > dk;
    dk = ok.m3(bk, bk, bk, bk);
    boolean lb0 = false;
    bk = bk && bk;
    dk = dk + dk;
    bk = dk < dk;
    dk *= -1;
    bk = bk && bk;
    bk = ok.m2();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo1 = Thought54.getInstance(ok, ok, ok, ok);
    bk = bk && bk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    Thought lo2 = Thought72.getInstance(ok, ok, ok, ok, bk, bk, bk, bk);
    bk = ok.m2(dk, dk, dk, dk);
    double ld3 = 981.6978854374347;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk && bk;
    dk *= -1;
    ok = ok.m4(bk, bk, bk, bk);
    Thought lo4 = Thought98.getInstance();
    ok = ok.m4(dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk + dk;
    ok.m2(ok, ok, ok, ok);
</cutPoint3496>
Thought.STACK_COUNTER++;
return ok;
} catch (StackOverflowExc | NoClassDefFoundError e) { throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
return null;
} 
}
void accept(String color) throws CountDownExc {
switch (color) {
case "e":
empty();
break;
case "own":
own();
break;
case "other":
other();
break;
default:
throw new RuntimeException("Illegal color!!!");
}
}
void empty() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3497>
    on += dk;
    dk = ok.m3(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    dk = dk - dk;
    ok = ok.m4(ok, ok, ok, ok, bk, bk, bk, bk);
    ok = ok.m4(dk, dk, dk, dk);
    bk = dk < dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = bk || bk;
    dk = ok.m3(bk, bk, bk, bk);
    dk *= -1;
    bk = dk > dk;
</cutPoint3497>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void own() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3498>
    boolean lb0 = false;
    dk = ok.m3();
    boolean lb1 = false;
    on -= dk;
    bk = dk < dk;
    bk = bk || bk;
    Thought lo2 = Thought24.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    bk = dk > dk;
    dk = ok.m3(ok, ok, ok, ok);
    bk = dk > dk;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk, bk, bk, bk, bk);
    on -= dk;
    dk = ok.m3(ok, ok, ok, ok, bk, bk, bk, bk);
    on -= dk;
    bk = !bk;
    ok.m1(dk, dk, dk, dk);
    boolean lb3 = false;
    dk = dk + dk;
    double ld4 = 270.62823575385397;
    double ld5 = 614.5874930212373;
    ok = ok.m4(ok, ok, ok, ok, dk, dk, dk, dk);
    bk = dk > dk;
    bk = bk || bk;
    ok = ok.m4(bk, bk, bk, bk);
    ok = ok.m4();
</cutPoint3498>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} catch (CountDownExc e) {
if(!e.surfaced()) {
e.dec();
throw e;
}
} 
}
void other() throws CountDownExc {
Thought.STACK_COUNTER--;
if(Thought.STACK_COUNTER <=0){
throw new StackOverflowExc();
}
try {
if (false) { throw new CountDownExc(-1); }
<cutPoint3499>
    on += dk;
    bk = dk < dk;
    dk = dk + dk;
    boolean lb0 = true;
    bk = dk < dk;
    bk = dk > dk;
        bk = bk || bk;
    bk = dk > dk;
    Thought lo1 = Thought85.getInstance(dk, dk, dk, dk, bk, bk, bk, bk);
    </cutPoint3499>
Thought.STACK_COUNTER++;
} catch (StackOverflowExc | NoClassDefFoundError e) { 
throw new CountDownExc(50);
} 
}
}
<endClass/>
